;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! jc2916@library-file-path->cache-path (unspecified)) (set! jc2918@read-annotated (unspecified)) (set! jc291a@annotation-stripped (unspecified)) (set! jc291c@annotation? (unspecified)) (set! jc291e@annotation-source (unspecified)) (set! jc2920@annotation-expression (unspecified)) (set! jc2922@scm->fasl (unspecified)) (set! jc2924@fasl-save (unspecified)) (set! jc2926@fasl-load (unspecified)) (set! jc2928@verbose? (unspecified)) (set! jc292a@serialize-library (unspecified)) (set! jc292c@load-serialized-library (unspecified)) (set! jc292e@make-record-printer (unspecified)) (set! jc2930@compile-core (unspecified)) (set! jc2932@read-library-source-file (unspecified)) (set! jc2934@make-parameter (unspecified)) (set! jc2936@mosh-cache-dir (unspecified)) (set! jc29cc@file-options-spec (unspecified)) (set! jc2916@library-file-path->cache-path (lambda (jc29cd@x) (call-with-values (lambda () (open-string-output-port)) (lambda (jc29d3@jc29d0 jc29d4@jc29d2) (let ((jc29d7@extract jc29d4@jc29d2) (jc29d8@p jc29d3@jc29d0)) (letrec* ((jc29dc@display-hex (lambda (jc29e5@n) (if (<= '0 jc29e5@n '9) (display jc29e5@n jc29d8@p) (display (integer->char (+ (char->integer '#\a) (- jc29e5@n '10))) jc29d8@p))))) (begin (let jc29df@f ((jc29dd@ls (string-split jc29cd@x '#\/))) (if (not (null? jc29dd@ls)) (begin (display '"_" jc29d8@p) (for-each (lambda (jc29e1@c) (if (or (char<=? '#\a jc29e1@c '#\z) (char<=? '#\A jc29e1@c '#\Z) (char<=? '#\0 jc29e1@c '#\9) (memv jc29e1@c '(#\- #\. #\_ #\~))) (display jc29e1@c jc29d8@p) (begin (display '"%" jc29d8@p) (let ((jc29e3@n (char->integer jc29e1@c))) (begin (jc29dc@display-hex (quotient jc29e3@n '16)) (jc29dc@display-hex (remainder jc29e3@n '16))))))) (string->list (car jc29dd@ls))) (jc29df@f (cdr jc29dd@ls))) (void))) (jc29d7@extract)))))))) (set! jc2a47@jc2916@library-file-path->cache-path jc2916@library-file-path->cache-path) (set! jc2918@read-annotated read) (set! jc2a48@jc2918@read-annotated jc2918@read-annotated) (set! jc291a@annotation-stripped (lambda (jc29e7@x) (if (pair? jc29e7@x) (cons (jc291a@annotation-stripped (car jc29e7@x)) (jc291a@annotation-stripped (cdr jc29e7@x))) (if (procedure? jc29e7@x) (set-source-info! jc29e7@x '#f) jc29e7@x)))) (set! jc2a49@jc291a@annotation-stripped jc291a@annotation-stripped) (set! jc291c@annotation? (lambda (jc29e9@x) (or (and (annotated-pair? jc29e9@x) (source-info jc29e9@x)) (and (procedure? jc29e9@x) (source-info jc29e9@x))))) (set! jc2a4a@jc291c@annotation? jc291c@annotation?) (set! jc291e@annotation-source (lambda (jc29eb@x) (source-info jc29eb@x))) (set! jc2a4b@jc291e@annotation-source jc291e@annotation-source) (set! jc2920@annotation-expression (lambda (jc29ed@x) (if (annotated-pair? jc29ed@x) (cons (car jc29ed@x) (cdr jc29ed@x)) (if (procedure? jc29ed@x) (set-source-info! jc29ed@x '#f) jc29ed@x)))) (set! jc2a4c@jc2920@annotation-expression jc2920@annotation-expression) (set! jc2922@scm->fasl (lambda (jc29ef@filename) (string-append (jc2936@mosh-cache-dir) '"/" (jc2916@library-file-path->cache-path jc29ef@filename) '".mosh-fasl"))) (set! jc2a4d@jc2922@scm->fasl jc2922@scm->fasl) (set! jc2924@fasl-save (lambda (jc29f1@filename jc29f2@obj) (call-with-port (open-file-output-port jc29f1@filename) (lambda (jc29f5@port) ((symbol-value 'fasl-write!) jc29f2@obj jc29f5@port))))) (set! jc2a4e@jc2924@fasl-save jc2924@fasl-save) (set! jc2926@fasl-load (lambda (jc29f7@filename) (call-with-port (open-file-input-port jc29f7@filename) (symbol-value 'fasl-read!)))) (set! jc2a4f@jc2926@fasl-load jc2926@fasl-load) (set! jc2928@verbose? (symbol-value '%verbose)) (set! jc2a50@jc2928@verbose? jc2928@verbose?) (set! jc292a@serialize-library (lambda (jc29f9@filename jc29fa@obj) (begin (if jc2928@verbose? (format (current-error-port) '"serialize-library ~a\n..." jc29f9@filename) (void)) (let ((jc29fd@expanded2core (symbol-value 'expanded2core))) (let ((jc29ff@compile (symbol-value 'compile-w/o-halt))) (let ((jc2a01@code jc29fa@obj)) (let ((jc2a03@pivot (cddddr (cddddr jc2a01@code)))) (let ((jc2a05@visit (jc29ff@compile (jc29fd@expanded2core (car jc2a03@pivot))))) (begin (set-car! jc2a03@pivot jc2a05@visit) (let ((jc2a07@pivot (cdr jc2a03@pivot))) (let ((jc2a09@invoke (jc29ff@compile (jc29fd@expanded2core (car jc2a07@pivot))))) (set-car! jc2a07@pivot jc2a09@invoke))))))))) (let ((jc2a0b@fasl-file (jc2922@scm->fasl jc29f9@filename))) (begin (if (file-exists? jc2a0b@fasl-file) (delete-file jc2a0b@fasl-file) (void)) ((call/cc (lambda (jc2a0f@jc2a0d) (lambda () (with-exception-handler (lambda (jc2a11@c) ((call/cc (lambda (jc2a13@jc2a0e) (jc2a0f@jc2a0d (lambda () (if '#t (begin (if jc2928@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" jc29f9@filename) (void)) (if (file-exists? jc2a0b@fasl-file) (delete-file jc2a0b@fasl-file) (void)) '#f) (jc2a13@jc2a0e (lambda () (raise-continuable jc2a11@c)))))))))) (lambda () (jc2924@fasl-save jc2a0b@fasl-file jc29fa@obj)))))))))))) (set! jc2a51@jc292a@serialize-library jc292a@serialize-library) (set! jc292c@load-serialized-library (lambda (jc2a15@filename jc2a16@obj) (and (jc2936@mosh-cache-dir) (let ((jc2a19@fasl-file (jc2922@scm->fasl jc2a15@filename))) (if (and (file-exists? jc2a19@fasl-file) ((symbol-value 'file-newer?) jc2a19@fasl-file jc2a15@filename)) (let ((jc2a1b@expanded2core (symbol-value 'expanded2core))) (let ((jc2a1d@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((jc2a1f@code (jc2926@fasl-load jc2a19@fasl-file))) (let ((jc2a21@pivot (cddddr (cddddr jc2a1f@code)))) (let ((jc2a23@visit (car jc2a21@pivot))) (let ((jc2a25@visit-proc (lambda () (jc2a1d@eval-compiled-core jc2a23@visit)))) (begin (set-car! jc2a21@pivot jc2a25@visit-proc) (let ((jc2a27@pivot (cdr jc2a21@pivot))) (let ((jc2a29@invoke (car jc2a27@pivot))) (begin (set-car! jc2a27@pivot (lambda () (jc2a1d@eval-compiled-core jc2a29@invoke))) (apply jc2a16@obj jc2a1f@code))))))))))) '#f))))) (set! jc2a52@jc292c@load-serialized-library jc292c@load-serialized-library) (set! jc292e@make-record-printer (lambda (jc2a2b@name jc2a2c@printer) (lambda jc2a2f@x (begin (display '"record printer") (for-each display jc2a2f@x))))) (set! jc2a53@jc292e@make-record-printer jc292e@make-record-printer) (set! jc2930@compile-core (lambda jc2a31@x (apply error 'comile-core '"not implementated" jc2a31@x))) (set! jc2a54@jc2930@compile-core jc2930@compile-core) (set! jc2932@read-library-source-file (lambda (jc2a33@file-name) (with-input-from-file jc2a33@file-name jc2918@read-annotated))) (set! jc2a55@jc2932@read-library-source-file jc2932@read-library-source-file) (set! jc2934@make-parameter (lambda jc2a43 (let ((jc2a44 (length jc2a43))) (if (= jc2a44 '1) (apply (lambda (jc2a35@x) (jc2934@make-parameter jc2a35@x (lambda (jc2a37@x) jc2a37@x))) jc2a43) (if (= jc2a44 '2) (apply (lambda (jc2a39@x jc2a3a@fender) (let ((jc2a3d@x (jc2a3a@fender jc2a39@x))) (lambda jc2a41 (let ((jc2a42 (length jc2a41))) (if (= jc2a42 '0) (apply (lambda () jc2a3d@x) jc2a41) (if (= jc2a42 '1) (apply (lambda (jc2a3f@v) (set! jc2a3d@x (jc2a3a@fender jc2a3f@v))) jc2a41) (error 'apply '"invalid arg count"))))))) jc2a43) (error 'apply '"invalid arg count")))))) (set! jc2a56@jc2934@make-parameter jc2934@make-parameter) (set! jc2936@mosh-cache-dir (jc2934@make-parameter '#f)) (set! jc2a57@jc2936@mosh-cache-dir jc2936@mosh-cache-dir) (set! jc29cc@file-options-spec (lambda (jc2a45@x) jc2a45@x)) (set! jc2a58@jc29cc@file-options-spec jc29cc@file-options-spec) (void))
(begin (set! jc2a5e@current-primitive-locations (unspecified)) (set! jc2a60@mutable? (unspecified)) (set! jc2a62@rewriter (unspecified)) (set! jc2a64@expanded->core (unspecified)) (set! jc2a66@compile-core-expr (unspecified)) (set! jc2a68@pretty-print (unspecified)) (set! jc2a6a@compile-core-expr-to-port (unspecified)) (set! jc2a5e@current-primitive-locations (jc2a56@jc2934@make-parameter (lambda (jc2a6b@x) '#f) (lambda (jc2a6d@p) jc2a6d@p))) (set! jc2aa9@jc2a5e@current-primitive-locations jc2a5e@current-primitive-locations) (set! jc2a60@mutable? (lambda (jc2a6f@x) (or (pair? jc2a6f@x) (vector? jc2a6f@x) (hashtable? jc2a6f@x)))) (set! jc2aaa@jc2a60@mutable? jc2a60@mutable?) (set! jc2a62@rewriter (lambda (jc2a71@quote-hack?) (letrec* ((jc2a74@f (lambda (jc2a75@x) (if (pair? jc2a75@x) (let ((jc2a77@t (car jc2a75@x))) (if (memv jc2a77@t '(quote)) (if (and jc2a71@quote-hack? (jc2a60@mutable? (cadr jc2a75@x))) (let ((jc2a79@g (gensym))) (begin (set-symbol-value! jc2a79@g (cadr jc2a75@x)) jc2a79@g)) jc2a75@x) (if (memv jc2a77@t '(case-lambda)) (cons 'case-lambda (map (lambda (jc2a7b@x) (cons (car jc2a7b@x) (map jc2a74@f (cdr jc2a7b@x)))) (cdr jc2a75@x))) (if (memv jc2a77@t '(lambda)) (cons* 'lambda (cadr jc2a75@x) (map jc2a74@f (cddr jc2a75@x))) (if (memv jc2a77@t '(letrec)) (let ((jc2a7d@bindings (cadr jc2a75@x)) (jc2a7e@body* (cddr jc2a75@x))) (let ((jc2a81@lhs* (map car jc2a7d@bindings)) (jc2a82@rhs* (map cadr jc2a7d@bindings))) (cons* 'letrec (map list jc2a81@lhs* (map jc2a74@f jc2a82@rhs*)) (map jc2a74@f jc2a7e@body*)))) (if (memv jc2a77@t '(letrec*)) (let ((jc2a85@bindings (cadr jc2a75@x)) (jc2a86@body* (cddr jc2a75@x))) (let ((jc2a89@lhs* (map car jc2a85@bindings)) (jc2a8a@rhs* (map cadr jc2a85@bindings))) (cons* 'letrec* (map list jc2a89@lhs* (map jc2a74@f jc2a8a@rhs*)) (map jc2a74@f jc2a86@body*)))) (if (memv jc2a77@t '(library-letrec*)) (let ((jc2a8d@name (cadr jc2a75@x)) (jc2a8e@x (cdr jc2a75@x))) (let ((jc2a91@bindings (cadr jc2a8e@x)) (jc2a92@body* (cddr jc2a8e@x))) (let ((jc2a95@lhs* (map car jc2a91@bindings)) (jc2a96@lhs** (map cadr jc2a91@bindings)) (jc2a97@rhs* (map caddr jc2a91@bindings))) (cons* 'library-letrec* jc2a8d@name (map list jc2a95@lhs* jc2a96@lhs** (map jc2a74@f jc2a97@rhs*)) (map jc2a74@f jc2a92@body*))))) (if (memv jc2a77@t '(begin)) (cons 'begin (map jc2a74@f (cdr jc2a75@x))) (if (memv jc2a77@t '(set!)) (list 'set! (cadr jc2a75@x) (jc2a74@f (caddr jc2a75@x))) (if (memv jc2a77@t '(primitive)) (let ((jc2a9b@op (cadr jc2a75@x))) (let ((jc2a9d@t ((jc2a5e@current-primitive-locations) jc2a9b@op))) (if jc2a9d@t ((lambda (jc2a9f@loc) jc2a9f@loc) jc2a9d@t) jc2a9b@op))) (if (memv jc2a77@t '(define)) jc2a75@x (if (list? jc2a75@x) (map jc2a74@f jc2a75@x) (error 'rewrite '"invalid form ~s ~s" jc2a75@x (list? jc2a75@x)))))))))))))) jc2a75@x)))) jc2a74@f))) (set! jc2aab@jc2a62@rewriter jc2a62@rewriter) (set! jc2a64@expanded->core (lambda (jc2aa1@x) ((jc2a62@rewriter '#f) jc2aa1@x))) (set! jc2aac@jc2a64@expanded->core jc2a64@expanded->core) (set! jc2a66@compile-core-expr (lambda (jc2aa3@x) ((jc2a62@rewriter '#f) jc2aa3@x))) (set! jc2aad@jc2a66@compile-core-expr jc2a66@compile-core-expr) (set! jc2a68@pretty-print write) (set! jc2aae@jc2a68@pretty-print jc2a68@pretty-print) (set! jc2a6a@compile-core-expr-to-port (lambda (jc2aa5@x jc2aa6@p) (jc2a68@pretty-print ((jc2a62@rewriter '#f) jc2aa5@x) jc2aa6@p))) (set! jc2aaf@jc2a6a@compile-core-expr-to-port jc2a6a@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! jc2afe@make-collection (unspecified)) (set! jc2b00@current-library-collection (unspecified)) (set! jc2b02@rp (unspecified)) (set! jc2b0c@library? (unspecified)) (set! jc2b0e@library-id (unspecified)) (set! jc2b10@set-library-id! (unspecified)) (set! jc2b12@library-name (unspecified)) (set! jc2b14@set-library-name! (unspecified)) (set! jc2b16@library-version (unspecified)) (set! jc2b18@set-library-version! (unspecified)) (set! jc2b1a@library-imp* (unspecified)) (set! jc2b1c@set-library-imp*! (unspecified)) (set! jc2b1e@library-vis* (unspecified)) (set! jc2b20@set-library-vis*! (unspecified)) (set! jc2b22@library-inv* (unspecified)) (set! jc2b24@set-library-inv*! (unspecified)) (set! jc2b26@library-subst (unspecified)) (set! jc2b28@set-library-subst! (unspecified)) (set! jc2b2a@library-env (unspecified)) (set! jc2b2c@set-library-env! (unspecified)) (set! jc2b2e@library-visit-state (unspecified)) (set! jc2b30@set-library-visit-state! (unspecified)) (set! jc2b32@library-invoke-state (unspecified)) (set! jc2b34@set-library-invoke-state! (unspecified)) (set! jc2b36@library-visit-code (unspecified)) (set! jc2b38@set-library-visit-code! (unspecified)) (set! jc2b3a@library-invoke-code (unspecified)) (set! jc2b3c@set-library-invoke-code! (unspecified)) (set! jc2b3e@library-visible? (unspecified)) (set! jc2b40@set-library-visible?! (unspecified)) (set! jc2b42@library-source-file-name (unspecified)) (set! jc2b44@set-library-source-file-name! (unspecified)) (set! jc2b46@dummy (unspecified)) (set! jc2b48@find-dependencies (unspecified)) (set! jc2b4a@find-library-by (unspecified)) (set! jc2b4c@library-path (unspecified)) (set! jc2b4e@library-extensions (unspecified)) (set! jc2b50@library-name->file-name (unspecified)) (set! jc2b52@file-locator (unspecified)) (set! jc2b54@serialize-all (unspecified)) (set! jc2b56@current-precompiled-library-loader (unspecified)) (set! jc2b58@try-load-from-file (unspecified)) (set! jc2b5a@library-loader (unspecified)) (set! jc2b5c@current-library-expander (unspecified)) (set! jc2b5e@external-pending-libraries (unspecified)) (set! jc2b60@find-external-library (unspecified)) (set! jc2b62@find-library-by-name (unspecified)) (set! jc2b64@library-exists? (unspecified)) (set! jc2b66@find-library-by-spec/die (unspecified)) (set! jc2b68@label->binding-table (unspecified)) (set! jc2b6a@install-library-record (unspecified)) (set! jc2b6c@install-library (unspecified)) (set! jc2b6e@imported-label->binding (unspecified)) (set! jc2b70@invoke-library (unspecified)) (set! jc2b72@visit-library (unspecified)) (set! jc2b74@invoke-library-by-spec (unspecified)) (set! jc2b76@installed-libraries (unspecified)) (set! jc2b78@library-spec (unspecified)) (set! jc2afe@make-collection (lambda () (let ((jc2b79@set '())) (letrec* ((jc2b7c@set-cons (lambda (jc2b81@x jc2b82@ls) (if (memq jc2b81@x jc2b82@ls) jc2b82@ls (cons jc2b81@x jc2b82@ls))))) (lambda jc2b7f (let ((jc2b80 (length jc2b7f))) (if (= jc2b80 '0) (apply (lambda () jc2b79@set) jc2b7f) (if (= jc2b80 '1) (apply (lambda (jc2b7d@x) (set! jc2b79@set (jc2b7c@set-cons jc2b7d@x jc2b79@set))) jc2b7f) (error 'apply '"invalid arg count"))))))))) (set! jc2ced@jc2afe@make-collection jc2afe@make-collection) (set! jc2b00@current-library-collection (jc2a56@jc2934@make-parameter (jc2afe@make-collection) (lambda (jc2b85@x) (begin (if (not (procedure? jc2b85@x)) (assertion-violation 'current-library-collection '"not a procedure" jc2b85@x) (void)) jc2b85@x)))) (set! jc2cee@jc2b00@current-library-collection jc2b00@current-library-collection) (set! jc2b02@rp (jc2a53@jc292e@make-record-printer 'library (lambda (jc2b87@x jc2b88@p jc2b89@wr) (begin (if (not (jc2b0c@library? jc2b87@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (jc2b16@library-version jc2b87@x)) (jc2b12@library-name jc2b87@x) (append (jc2b12@library-name jc2b87@x) (list (jc2b16@library-version jc2b87@x))))) jc2b88@p))))) (set! jc2cef@jc2b02@rp jc2b02@rp) (set! jc2b0c@library? (lambda (jc2b8d@x) (and (simple-struct? jc2b8d@x) (eq? (simple-struct-name jc2b8d@x) 'library)))) (set! jc2cf0@jc2b0c@library? jc2b0c@library?) (set! jc2b0e@library-id (lambda (jc2b8f@x) (simple-struct-ref jc2b8f@x '0))) (set! jc2cf1@jc2b0e@library-id jc2b0e@library-id) (set! jc2b10@set-library-id! (lambda (jc2b91@x jc2b92@val) (simple-struct-set! jc2b91@x '0 jc2b92@val))) (set! jc2cf2@jc2b10@set-library-id! jc2b10@set-library-id!) (set! jc2b12@library-name (lambda (jc2b95@x) (simple-struct-ref jc2b95@x '1))) (set! jc2cf3@jc2b12@library-name jc2b12@library-name) (set! jc2b14@set-library-name! (lambda (jc2b97@x jc2b98@val) (simple-struct-set! jc2b97@x '1 jc2b98@val))) (set! jc2cf4@jc2b14@set-library-name! jc2b14@set-library-name!) (set! jc2b16@library-version (lambda (jc2b9b@x) (simple-struct-ref jc2b9b@x '2))) (set! jc2cf5@jc2b16@library-version jc2b16@library-version) (set! jc2b18@set-library-version! (lambda (jc2b9d@x jc2b9e@val) (simple-struct-set! jc2b9d@x '2 jc2b9e@val))) (set! jc2cf6@jc2b18@set-library-version! jc2b18@set-library-version!) (set! jc2b1a@library-imp* (lambda (jc2ba1@x) (simple-struct-ref jc2ba1@x '3))) (set! jc2cf7@jc2b1a@library-imp* jc2b1a@library-imp*) (set! jc2b1c@set-library-imp*! (lambda (jc2ba3@x jc2ba4@val) (simple-struct-set! jc2ba3@x '3 jc2ba4@val))) (set! jc2cf8@jc2b1c@set-library-imp*! jc2b1c@set-library-imp*!) (set! jc2b1e@library-vis* (lambda (jc2ba7@x) (simple-struct-ref jc2ba7@x '4))) (set! jc2cf9@jc2b1e@library-vis* jc2b1e@library-vis*) (set! jc2b20@set-library-vis*! (lambda (jc2ba9@x jc2baa@val) (simple-struct-set! jc2ba9@x '4 jc2baa@val))) (set! jc2cfa@jc2b20@set-library-vis*! jc2b20@set-library-vis*!) (set! jc2b22@library-inv* (lambda (jc2bad@x) (simple-struct-ref jc2bad@x '5))) (set! jc2cfb@jc2b22@library-inv* jc2b22@library-inv*) (set! jc2b24@set-library-inv*! (lambda (jc2baf@x jc2bb0@val) (simple-struct-set! jc2baf@x '5 jc2bb0@val))) (set! jc2cfc@jc2b24@set-library-inv*! jc2b24@set-library-inv*!) (set! jc2b26@library-subst (lambda (jc2bb3@x) (simple-struct-ref jc2bb3@x '6))) (set! jc2cfd@jc2b26@library-subst jc2b26@library-subst) (set! jc2b28@set-library-subst! (lambda (jc2bb5@x jc2bb6@val) (simple-struct-set! jc2bb5@x '6 jc2bb6@val))) (set! jc2cfe@jc2b28@set-library-subst! jc2b28@set-library-subst!) (set! jc2b2a@library-env (lambda (jc2bb9@x) (simple-struct-ref jc2bb9@x '7))) (set! jc2cff@jc2b2a@library-env jc2b2a@library-env) (set! jc2b2c@set-library-env! (lambda (jc2bbb@x jc2bbc@val) (simple-struct-set! jc2bbb@x '7 jc2bbc@val))) (set! jc2d00@jc2b2c@set-library-env! jc2b2c@set-library-env!) (set! jc2b2e@library-visit-state (lambda (jc2bbf@x) (simple-struct-ref jc2bbf@x '8))) (set! jc2d01@jc2b2e@library-visit-state jc2b2e@library-visit-state) (set! jc2b30@set-library-visit-state! (lambda (jc2bc1@x jc2bc2@val) (simple-struct-set! jc2bc1@x '8 jc2bc2@val))) (set! jc2d02@jc2b30@set-library-visit-state! jc2b30@set-library-visit-state!) (set! jc2b32@library-invoke-state (lambda (jc2bc5@x) (simple-struct-ref jc2bc5@x '9))) (set! jc2d03@jc2b32@library-invoke-state jc2b32@library-invoke-state) (set! jc2b34@set-library-invoke-state! (lambda (jc2bc7@x jc2bc8@val) (simple-struct-set! jc2bc7@x '9 jc2bc8@val))) (set! jc2d04@jc2b34@set-library-invoke-state! jc2b34@set-library-invoke-state!) (set! jc2b36@library-visit-code (lambda (jc2bcb@x) (simple-struct-ref jc2bcb@x '10))) (set! jc2d05@jc2b36@library-visit-code jc2b36@library-visit-code) (set! jc2b38@set-library-visit-code! (lambda (jc2bcd@x jc2bce@val) (simple-struct-set! jc2bcd@x '10 jc2bce@val))) (set! jc2d06@jc2b38@set-library-visit-code! jc2b38@set-library-visit-code!) (set! jc2b3a@library-invoke-code (lambda (jc2bd1@x) (simple-struct-ref jc2bd1@x '11))) (set! jc2d07@jc2b3a@library-invoke-code jc2b3a@library-invoke-code) (set! jc2b3c@set-library-invoke-code! (lambda (jc2bd3@x jc2bd4@val) (simple-struct-set! jc2bd3@x '11 jc2bd4@val))) (set! jc2d08@jc2b3c@set-library-invoke-code! jc2b3c@set-library-invoke-code!) (set! jc2b3e@library-visible? (lambda (jc2bd7@x) (simple-struct-ref jc2bd7@x '12))) (set! jc2d09@jc2b3e@library-visible? jc2b3e@library-visible?) (set! jc2b40@set-library-visible?! (lambda (jc2bd9@x jc2bda@val) (simple-struct-set! jc2bd9@x '12 jc2bda@val))) (set! jc2d0a@jc2b40@set-library-visible?! jc2b40@set-library-visible?!) (set! jc2b42@library-source-file-name (lambda (jc2bdd@x) (simple-struct-ref jc2bdd@x '13))) (set! jc2d0b@jc2b42@library-source-file-name jc2b42@library-source-file-name) (set! jc2b44@set-library-source-file-name! (lambda (jc2bdf@x jc2be0@val) (simple-struct-set! jc2bdf@x '13 jc2be0@val))) (set! jc2d0c@jc2b44@set-library-source-file-name! jc2b44@set-library-source-file-name!) (set! jc2b46@dummy '3) (set! jc2d0d@jc2b46@dummy jc2b46@dummy) (set! jc2b48@find-dependencies (lambda (jc2be3@ls) (if (null? jc2be3@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! jc2d0e@jc2b48@find-dependencies jc2b48@find-dependencies) (set! jc2b4a@find-library-by (lambda (jc2be5@pred) (let jc2be9@f ((jc2be7@ls ((jc2b00@current-library-collection)))) (if (null? jc2be7@ls) '#f (if (jc2be5@pred (car jc2be7@ls)) (car jc2be7@ls) (jc2be9@f (cdr jc2be7@ls))))))) (set! jc2d0f@jc2b4a@find-library-by jc2b4a@find-library-by) (set! jc2b4c@library-path (jc2a56@jc2934@make-parameter '(".") (lambda (jc2beb@x) (if (and (list? jc2beb@x) (for-all string? jc2beb@x)) (map (lambda (jc2bed@x) jc2bed@x) jc2beb@x) (assertion-violation 'library-path '"not a list of strings" jc2beb@x))))) (set! jc2d10@jc2b4c@library-path jc2b4c@library-path) (set! jc2b4e@library-extensions (jc2a56@jc2934@make-parameter '(".sls" ".ss" ".scm") (lambda (jc2bef@x) (if (and (list? jc2bef@x) (for-all string? jc2bef@x)) (map (lambda (jc2bf1@x) jc2bf1@x) jc2bef@x) (assertion-violation 'library-extensions '"not a list of strings" jc2bef@x))))) (set! jc2d11@jc2b4e@library-extensions jc2b4e@library-extensions) (set! jc2b50@library-name->file-name (lambda (jc2bf3@x) (call-with-values (lambda () (open-string-output-port)) (lambda (jc2bf9@jc2bf6 jc2bfa@jc2bf8) (let ((jc2bfd@extract jc2bfa@jc2bf8) (jc2bfe@p jc2bf9@jc2bf6)) (letrec* ((jc2c02@display-hex (lambda (jc2c0b@n) (if (<= '0 jc2c0b@n '9) (display jc2c0b@n jc2bfe@p) (display (integer->char (+ (char->integer '#\a) (- jc2c0b@n '10))) jc2bfe@p))))) (begin (let jc2c05@f ((jc2c03@ls jc2bf3@x)) (if (not (null? jc2c03@ls)) (begin (display '"/" jc2bfe@p) (for-each (lambda (jc2c07@c) (if (or (char<=? '#\a jc2c07@c '#\z) (char<=? '#\A jc2c07@c '#\Z) (char<=? '#\0 jc2c07@c '#\9) (memv jc2c07@c '(#\- #\. #\_ #\~))) (display jc2c07@c jc2bfe@p) (begin (display '"%" jc2bfe@p) (let ((jc2c09@n (char->integer jc2c07@c))) (begin (jc2c02@display-hex (quotient jc2c09@n '16)) (jc2c02@display-hex (remainder jc2c09@n '16))))))) (string->list (symbol->string (car jc2c03@ls)))) (jc2c05@f (cdr jc2c03@ls))) (void))) (jc2bfd@extract)))))))) (set! jc2d12@jc2b50@library-name->file-name jc2b50@library-name->file-name) (set! jc2b52@file-locator (jc2a56@jc2934@make-parameter (lambda (jc2c0d@x) (let ((jc2c0f@str (jc2b50@library-name->file-name jc2c0d@x))) (let jc2c17@f ((jc2c11@ls (jc2b4c@library-path)) (jc2c12@exts (jc2b4e@library-extensions)) (jc2c13@failed-list '())) (if (null? jc2c11@ls) (letrec* ((jc2c21@jc2c1c (make-record-type-descriptor '&library-resolution &condition-rtd 'jc2c1f '#f '#f '#((immutable library) (immutable files)))) (jc2c23@jc2c1e '#f) (jc2c25@jc2c1d (make-record-constructor-descriptor jc2c21@jc2c1c &condition-rcd jc2c23@jc2c1e)) (jc2c28@jc2c1b (record-predicate jc2c21@jc2c1c)) (jc2c2a@make-library-resolution-condition (record-constructor jc2c25@jc2c1d)) (jc2c2c@jc2c19 (record-accessor jc2c21@jc2c1c '0)) (jc2c2e@jc2c1a (record-accessor jc2c21@jc2c1c '1)) (jc2c30@library-resolution-condition? (condition-predicate jc2c21@jc2c1c)) (jc2c32@condition-library (condition-accessor jc2c21@jc2c1c jc2c2c@jc2c19)) (jc2c34@condition-files (condition-accessor jc2c21@jc2c1c jc2c2e@jc2c1a))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (jc2c2a@make-library-resolution-condition jc2c0d@x (reverse jc2c13@failed-list))))) (if (null? jc2c12@exts) (jc2c17@f (cdr jc2c11@ls) (jc2b4e@library-extensions) jc2c13@failed-list) (let ((jc2c35@name (string-append (car jc2c11@ls) jc2c0f@str (car jc2c12@exts)))) (if (file-exists? jc2c35@name) jc2c35@name (jc2c17@f jc2c11@ls (cdr jc2c12@exts) (cons jc2c35@name jc2c13@failed-list))))))))) (lambda (jc2c37@f) (if (procedure? jc2c37@f) jc2c37@f (assertion-violation 'file-locator '"not a procedure" jc2c37@f))))) (set! jc2d13@jc2b52@file-locator jc2b52@file-locator) (set! jc2b54@serialize-all (lambda (jc2c39@serialize jc2c3a@compile) (letrec* ((jc2c3e@library-desc (lambda (jc2c41@x) (list (jc2b0e@library-id jc2c41@x) (jc2b12@library-name jc2c41@x))))) (for-each (lambda (jc2c3f@x) (if (jc2b42@library-source-file-name jc2c3f@x) (jc2c39@serialize (jc2b42@library-source-file-name jc2c3f@x) (list (jc2b0e@library-id jc2c3f@x) (jc2b12@library-name jc2c3f@x) (jc2b16@library-version jc2c3f@x) (map jc2c3e@library-desc (jc2b1a@library-imp* jc2c3f@x)) (map jc2c3e@library-desc (jc2b1e@library-vis* jc2c3f@x)) (map jc2c3e@library-desc (jc2b22@library-inv* jc2c3f@x)) (jc2b26@library-subst jc2c3f@x) (jc2b2a@library-env jc2c3f@x) (jc2c3a@compile (jc2b36@library-visit-code jc2c3f@x)) (jc2c3a@compile (jc2b3a@library-invoke-code jc2c3f@x)) (jc2b3e@library-visible? jc2c3f@x))) (void))) ((jc2b00@current-library-collection)))))) (set! jc2d14@jc2b54@serialize-all jc2b54@serialize-all) (set! jc2b56@current-precompiled-library-loader (jc2a56@jc2934@make-parameter (lambda (jc2c43@filename jc2c44@sk) '#f))) (set! jc2d15@jc2b56@current-precompiled-library-loader jc2b56@current-precompiled-library-loader) (set! jc2b58@try-load-from-file (lambda (jc2c47@filename) ((jc2b56@current-precompiled-library-loader) jc2c47@filename (lambda jc2c6d (let ((jc2c6e (length jc2c6d))) (if (= jc2c6e '11) (apply (lambda (jc2c49@id jc2c4a@name jc2c4b@ver jc2c4c@imp* jc2c4d@vis* jc2c4e@inv* jc2c4f@exp-subst jc2c50@exp-env jc2c51@visit-proc jc2c52@invoke-proc jc2c53@visible?) (let jc2c61@f ((jc2c5f@deps (append jc2c4c@imp* jc2c4d@vis* jc2c4e@inv*))) (if (null? jc2c5f@deps) (begin (jc2b6c@install-library jc2c49@id jc2c4a@name jc2c4b@ver jc2c4c@imp* jc2c4d@vis* jc2c4e@inv* jc2c4f@exp-subst jc2c50@exp-env jc2c51@visit-proc jc2c52@invoke-proc '#f '#f jc2c53@visible? '#f) '#t) (let ((jc2c63@d (car jc2c5f@deps))) (let ((jc2c65@label (car jc2c63@d)) (jc2c66@dname (cadr jc2c63@d))) (let ((jc2c69@l (jc2b62@find-library-by-name jc2c66@dname))) (if (and (jc2b0c@library? jc2c69@l) (eq? jc2c65@label (jc2b0e@library-id jc2c69@l))) (jc2c61@f (cdr jc2c5f@deps)) (begin (if jc2a50@jc2928@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" jc2c4a@name jc2c66@dname jc2c47@filename) (void)) '#f)))))))) jc2c6d) (if (>= jc2c6e '0) (apply (lambda jc2c6b@others '#f) jc2c6d) (error 'apply '"invalid arg count")))))))) (set! jc2d16@jc2b58@try-load-from-file jc2b58@try-load-from-file) (set! jc2b5a@library-loader (jc2a56@jc2934@make-parameter (lambda (jc2c6f@x) (let ((jc2c71@file-name ((jc2b52@file-locator) jc2c6f@x))) (if (not jc2c71@file-name) (assertion-violation '#f '"cannot file library" jc2c6f@x) (or (jc2b58@try-load-from-file jc2c71@file-name) ((jc2b5c@current-library-expander) (jc2a55@jc2932@read-library-source-file jc2c71@file-name) jc2c71@file-name (lambda (jc2c73@name) (if (not (fast-equal? jc2c73@name jc2c6f@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (jc2c79@jc2c76 jc2c7a@jc2c78) (let ((jc2c7d@e jc2c7a@jc2c78) (jc2c7e@p jc2c79@jc2c76)) (begin (display '"expected to find library " jc2c7e@p) (write jc2c6f@x jc2c7e@p) (display '" in file " jc2c7e@p) (display jc2c71@file-name jc2c7e@p) (display '", found " jc2c7e@p) (write jc2c73@name jc2c7e@p) (display '" instead" jc2c7e@p) (jc2c7d@e)))))) (void)))))))) (lambda (jc2c81@f) (if (procedure? jc2c81@f) jc2c81@f (assertion-violation 'library-locator '"not a procedure" jc2c81@f))))) (set! jc2d17@jc2b5a@library-loader jc2b5a@library-loader) (set! jc2b5c@current-library-expander (jc2a56@jc2934@make-parameter (lambda (jc2c83@x) (assertion-violation 'library-expander '"not initialized")) (lambda (jc2c85@f) (if (procedure? jc2c85@f) jc2c85@f (assertion-violation 'library-expander '"not a procedure" jc2c85@f))))) (set! jc2d18@jc2b5c@current-library-expander jc2b5c@current-library-expander) (set! jc2b5e@external-pending-libraries (jc2a56@jc2934@make-parameter '())) (set! jc2d19@jc2b5e@external-pending-libraries jc2b5e@external-pending-libraries) (set! jc2b60@find-external-library (lambda (jc2c87@name) (begin (if (member jc2c87@name (jc2b5e@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" jc2c87@name) (void)) (let ((jc2c8d@jc2c8a jc2b5e@external-pending-libraries) (jc2c8e@jc2c8c (cons jc2c87@name (jc2b5e@external-pending-libraries)))) (let ((jc2c91@swap (lambda () (let ((jc2c93@t (jc2c8d@jc2c8a))) (begin (jc2c8d@jc2c8a jc2c8e@jc2c8c) (set! jc2c8e@jc2c8c jc2c93@t)))))) (dynamic-wind jc2c91@swap (lambda () (begin ((jc2b5a@library-loader) jc2c87@name) (or (jc2b4a@find-library-by (lambda (jc2c95@x) (fast-equal? (jc2b12@library-name jc2c95@x) jc2c87@name))) (assertion-violation '#f '"handling external library did not yield the correct library" jc2c87@name)))) jc2c91@swap)))))) (set! jc2d1a@jc2b60@find-external-library jc2b60@find-external-library) (set! jc2b62@find-library-by-name (lambda (jc2c97@name) (or (jc2b4a@find-library-by (lambda (jc2c99@x) (fast-equal? (jc2b12@library-name jc2c99@x) jc2c97@name))) (jc2b60@find-external-library jc2c97@name)))) (set! jc2d1b@jc2b62@find-library-by-name jc2b62@find-library-by-name) (set! jc2b64@library-exists? (lambda (jc2c9b@name) (and (jc2b4a@find-library-by (lambda (jc2c9d@x) (fast-equal? (jc2b12@library-name jc2c9d@x) jc2c9b@name))) '#t))) (set! jc2d1c@jc2b64@library-exists? jc2b64@library-exists?) (set! jc2b66@find-library-by-spec/die (lambda (jc2c9f@spec) (let ((jc2ca1@id (car jc2c9f@spec))) (or (jc2b4a@find-library-by (lambda (jc2ca3@x) (eq? jc2ca1@id (jc2b0e@library-id jc2ca3@x)))) (assertion-violation '#f '"cannot find library with required spec" jc2c9f@spec))))) (set! jc2d1d@jc2b66@find-library-by-spec/die jc2b66@find-library-by-spec/die) (set! jc2b68@label->binding-table (make-eq-hashtable)) (set! jc2d1e@jc2b68@label->binding-table jc2b68@label->binding-table) (set! jc2b6a@install-library-record (lambda (jc2ca5@lib) (begin (let ((jc2ca7@exp-env (jc2b2a@library-env jc2ca5@lib))) (for-each (lambda (jc2ca9@x) (let ((jc2cab@label (car jc2ca9@x)) (jc2cac@binding (cdr jc2ca9@x))) (let ((jc2caf@binding (let ((jc2cb1@t (car jc2cac@binding))) (if (memv jc2cb1@t '(global)) (cons 'global (cons jc2ca5@lib (cdr jc2cac@binding))) (if (memv jc2cb1@t '(global-macro)) (cons 'global-macro (cons jc2ca5@lib (cdr jc2cac@binding))) (if (memv jc2cb1@t '(global-macro!)) (cons 'global-macro! (cons jc2ca5@lib (cdr jc2cac@binding))) jc2cac@binding)))))) (begin (if (hashtable-ref jc2b68@label->binding-table jc2cab@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" jc2cab@label (hashtable-ref jc2b68@label->binding-table jc2cab@label '#f) jc2caf@binding) (exit)) (void)) (hashtable-set! jc2b68@label->binding-table jc2cab@label jc2caf@binding))))) jc2ca7@exp-env)) ((jc2b00@current-library-collection) jc2ca5@lib)))) (set! jc2d1f@jc2b6a@install-library-record jc2b6a@install-library-record) (set! jc2b6c@install-library (lambda (jc2cb3@id jc2cb4@name jc2cb5@ver jc2cb6@imp* jc2cb7@vis* jc2cb8@inv* jc2cb9@exp-subst jc2cba@exp-env jc2cbb@visit-proc jc2cbc@invoke-proc jc2cbd@visit-code jc2cbe@invoke-code jc2cbf@visible? jc2cc0@source-file-name) (let ((jc2ccf@imp-lib* (map jc2b66@find-library-by-spec/die jc2cb6@imp*)) (jc2cd0@vis-lib* (map jc2b66@find-library-by-spec/die jc2cb7@vis*)) (jc2cd1@inv-lib* (map jc2b66@find-library-by-spec/die jc2cb8@inv*))) (begin (if (not (and (symbol? jc2cb3@id) (list? jc2cb4@name) (list? jc2cb5@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" jc2cb3@id jc2cb4@name jc2cb5@ver) (void)) (if (jc2b64@library-exists? jc2cb4@name) (assertion-violation 'install-library '"library is already installed" jc2cb4@name) (void)) (let ((jc2cd5@lib (make-simple-struct 'library '15 (list jc2cb3@id jc2cb4@name jc2cb5@ver jc2ccf@imp-lib* jc2cd0@vis-lib* jc2cd1@inv-lib* jc2cb9@exp-subst jc2cba@exp-env jc2cbb@visit-proc jc2cbc@invoke-proc jc2cbd@visit-code jc2cbe@invoke-code jc2cbf@visible? jc2cc0@source-file-name)))) (jc2b6a@install-library-record jc2cd5@lib)))))) (set! jc2d20@jc2b6c@install-library jc2b6c@install-library) (set! jc2b6e@imported-label->binding (lambda (jc2cd7@lab) (hashtable-ref jc2b68@label->binding-table jc2cd7@lab '#f))) (set! jc2d21@jc2b6e@imported-label->binding jc2b6e@imported-label->binding) (set! jc2b70@invoke-library (lambda (jc2cd9@lib) (let ((jc2cdb@invoke (jc2b32@library-invoke-state jc2cd9@lib))) (if (procedure? jc2cdb@invoke) (begin (jc2b34@set-library-invoke-state! jc2cd9@lib (lambda () (assertion-violation 'invoke '"circularity detected" jc2cd9@lib))) (for-each jc2b70@invoke-library (jc2b22@library-inv* jc2cd9@lib)) (jc2b34@set-library-invoke-state! jc2cd9@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" jc2cd9@lib))) (jc2cdb@invoke) (jc2b34@set-library-invoke-state! jc2cd9@lib '#t)) (void))))) (set! jc2d22@jc2b70@invoke-library jc2b70@invoke-library) (set! jc2b72@visit-library (lambda (jc2cdd@lib) (let ((jc2cdf@visit (jc2b2e@library-visit-state jc2cdd@lib))) (if (procedure? jc2cdf@visit) (begin (jc2b30@set-library-visit-state! jc2cdd@lib (lambda () (assertion-violation 'visit '"circularity detected" jc2cdd@lib))) (for-each jc2b70@invoke-library (jc2b1e@library-vis* jc2cdd@lib)) (jc2b30@set-library-visit-state! jc2cdd@lib (lambda () (assertion-violation 'invoke '"first visit did not return" jc2cdd@lib))) (jc2cdf@visit) (jc2b30@set-library-visit-state! jc2cdd@lib '#t)) (void))))) (set! jc2d23@jc2b72@visit-library jc2b72@visit-library) (set! jc2b74@invoke-library-by-spec (lambda (jc2ce1@spec) (jc2b70@invoke-library (jc2b66@find-library-by-spec/die jc2ce1@spec)))) (set! jc2d24@jc2b74@invoke-library-by-spec jc2b74@invoke-library-by-spec) (set! jc2b76@installed-libraries (lambda jc2ce9 (let ((jc2cea (length jc2ce9))) (if (= jc2cea '1) (apply (lambda (jc2ce3@all?) (let jc2ce7@f ((jc2ce5@ls ((jc2b00@current-library-collection)))) (if (null? jc2ce5@ls) '() (if (or jc2ce3@all? (jc2b3e@library-visible? (car jc2ce5@ls))) (cons (car jc2ce5@ls) (jc2ce7@f (cdr jc2ce5@ls))) (jc2ce7@f (cdr jc2ce5@ls)))))) jc2ce9) (if (= jc2cea '0) (apply (lambda () (jc2b76@installed-libraries '#f)) jc2ce9) (error 'apply '"invalid arg count")))))) (set! jc2d25@jc2b76@installed-libraries jc2b76@installed-libraries) (set! jc2b78@library-spec (lambda (jc2ceb@x) (begin (if (not (jc2b0c@library? jc2ceb@x)) (assertion-violation 'library-spec '"not a library" jc2ceb@x) (void)) (list (jc2b0e@library-id jc2ceb@x) (jc2b12@library-name jc2ceb@x) (jc2b16@library-version jc2ceb@x))))) (set! jc2d26@jc2b78@library-spec jc2b78@library-spec) (void))
(begin (set! jc2d2a@build-global-define (unspecified)) (set! jc2d9b@build-lambda (unspecified)) (set! jc2d9d@build-case-lambda (unspecified)) (set! jc2dcb@build-sequence (unspecified)) (set! jc2dcd@build-void (unspecified)) (set! jc2dcf@build-letrec (unspecified)) (set! jc2dd1@build-let (unspecified)) (set! jc2dd3@build-named-let (unspecified)) (set! jc2dd5@build-letrec* (unspecified)) (set! jc2dd7@build-library-letrec* (unspecified)) (set! jc2dd9@build-receive (unspecified)) (set! jc2d2a@build-global-define (lambda (jc2dda@x) (jc2dcd@build-void))) (set! jc2e68@jc2d2a@build-global-define jc2d2a@build-global-define) (set! jc2d9b@build-lambda (lambda (jc2ddc@ae jc2ddd@vars jc2dde@exp) (list 'lambda jc2ddd@vars jc2dde@exp))) (set! jc2e69@jc2d9b@build-lambda jc2d9b@build-lambda) (set! jc2d9d@build-case-lambda (lambda (jc2de2@ae jc2de3@vars* jc2de4@exp*) (letrec* ((jc2de9@build-error (lambda (jc2e20@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (jc2deb@build-pred (lambda (jc2e08@ae jc2e09@n jc2e0a@vars) (call-with-values (lambda () (let jc2e16@f ((jc2e12@vars jc2e0a@vars) (jc2e13@count '0)) (if (pair? jc2e12@vars) (jc2e16@f (cdr jc2e12@vars) (+ jc2e13@count '1)) (if (null? jc2e12@vars) (values jc2e13@count '=) (values jc2e13@count '>=))))) (lambda (jc2e18@jc2e0f jc2e19@jc2e11) (let ((jc2e1c@pred jc2e19@jc2e11) (jc2e1d@count jc2e18@jc2e0f)) (list (list 'primitive jc2e1c@pred) jc2e09@n (list 'quote jc2e1d@count))))))) (jc2ded@build-apply (lambda (jc2e00@ae jc2e01@g jc2e02@vars jc2e03@exp) (list '(primitive apply) (jc2d9b@build-lambda jc2e00@ae jc2e02@vars jc2e03@exp) jc2e01@g))) (jc2def@expand-case-lambda (lambda (jc2df0@ae jc2df1@vars jc2df2@exp*) (let ((jc2df6@g (gensym)) (jc2df7@n (gensym))) (list 'lambda jc2df6@g (jc2dd1@build-let jc2df0@ae (list jc2df7@n) (list (list '(primitive length) jc2df6@g)) (let jc2dfe@f ((jc2dfa@vars* jc2de3@vars*) (jc2dfb@exp* jc2df2@exp*)) (if (null? jc2dfa@vars*) (jc2de9@build-error jc2df0@ae) (list 'if (jc2deb@build-pred jc2df0@ae jc2df7@n (car jc2dfa@vars*)) (jc2ded@build-apply jc2df0@ae jc2df6@g (car jc2dfa@vars*) (car jc2dfb@exp*)) (jc2dfe@f (cdr jc2dfa@vars*) (cdr jc2dfb@exp*))))))))))) (if (= (length jc2de4@exp*) '1) (jc2d9b@build-lambda jc2de2@ae (car jc2de3@vars*) (car jc2de4@exp*)) (jc2def@expand-case-lambda jc2de2@ae jc2de3@vars* jc2de4@exp*))))) (set! jc2e6a@jc2d9d@build-case-lambda jc2d9d@build-case-lambda) (set! jc2dcb@build-sequence (lambda (jc2e22@ae jc2e23@exps) (let jc2e28@loop ((jc2e26@exps jc2e23@exps)) (if (null? (cdr jc2e26@exps)) (car jc2e26@exps) (if (equal? (car jc2e26@exps) (jc2dcd@build-void)) (jc2e28@loop (cdr jc2e26@exps)) (cons 'begin jc2e26@exps)))))) (set! jc2e6b@jc2dcb@build-sequence jc2dcb@build-sequence) (set! jc2dcd@build-void (lambda () '((primitive void)))) (set! jc2e6c@jc2dcd@build-void jc2dcd@build-void) (set! jc2dcf@build-letrec (lambda (jc2e2a@ae jc2e2b@vars jc2e2c@val-exps jc2e2d@body-exp) (if (null? jc2e2b@vars) jc2e2d@body-exp (list 'letrec (map list jc2e2b@vars jc2e2c@val-exps) jc2e2d@body-exp)))) (set! jc2e6d@jc2dcf@build-letrec jc2dcf@build-letrec) (set! jc2dd1@build-let (lambda (jc2e32@ae jc2e33@vars jc2e34@val-exps jc2e35@body-exp) (if (null? jc2e33@vars) jc2e35@body-exp (list 'let (map list jc2e33@vars jc2e34@val-exps) jc2e35@body-exp)))) (set! jc2e6e@jc2dd1@build-let jc2dd1@build-let) (set! jc2dd3@build-named-let (lambda (jc2e3a@ae jc2e3b@name jc2e3c@vars jc2e3d@val-exps jc2e3e@body-exp) (list 'let jc2e3b@name (map list jc2e3c@vars jc2e3d@val-exps) jc2e3e@body-exp))) (set! jc2e6f@jc2dd3@build-named-let jc2dd3@build-named-let) (set! jc2dd5@build-letrec* (lambda (jc2e44@ae jc2e45@vars jc2e46@val-exps jc2e47@body-exp) (if (null? jc2e45@vars) jc2e47@body-exp (list 'letrec* (map list jc2e45@vars jc2e46@val-exps) jc2e47@body-exp)))) (set! jc2e70@jc2dd5@build-letrec* jc2dd5@build-letrec*) (set! jc2dd7@build-library-letrec* (lambda (jc2e4c@ae jc2e4d@name jc2e4e@vars jc2e4f@locs jc2e50@val-exps jc2e51@body-exp) (cons 'begin (append (map (lambda (jc2e58@var) (cons 'set! (cons jc2e58@var '((unspecified))))) jc2e4e@vars) (append (apply append (map (lambda (jc2e5a@var jc2e5b@loc jc2e5c@val-exp) (list (list 'set! jc2e5a@var jc2e5c@val-exp) (list 'set! jc2e5b@loc jc2e5a@var))) jc2e4e@vars jc2e4f@locs jc2e50@val-exps)) (list jc2e51@body-exp)))))) (set! jc2e71@jc2dd7@build-library-letrec* jc2dd7@build-library-letrec*) (set! jc2dd9@build-receive (lambda (jc2e60@ae jc2e61@vars jc2e62@producer jc2e63@body*) (begin (display '"************** in ") (cons 'receive (cons jc2e61@vars (cons jc2e62@producer jc2e63@body*)))))) (set! jc2e72@jc2dd9@build-receive jc2dd9@build-receive) (void))
(begin (set! jc2e81@file-options-macro (unspecified)) (set! jc2e83@set-cons (unspecified)) (set! jc2e85@set-union (unspecified)) (set! jc2e8a@top-mark* (unspecified)) (set! jc2e8c@top-marked? (unspecified)) (set! jc2e8e@gen-lexical (unspecified)) (set! jc2e90@gen-global (unspecified)) (set! jc2e92@gen-label (unspecified)) (set! jc2e94@gen-top-level-label (unspecified)) (set! jc2e96@gen-define-label+loc (unspecified)) (set! jc2e98@gen-define-label (unspecified)) (set! jc2ea2@rib? (unspecified)) (set! jc2ea4@rib-sym* (unspecified)) (set! jc2ea6@set-rib-sym*! (unspecified)) (set! jc2ea8@rib-mark** (unspecified)) (set! jc2eaa@set-rib-mark**! (unspecified)) (set! jc2eac@rib-label* (unspecified)) (set! jc2eae@set-rib-label*! (unspecified)) (set! jc2eb0@rib-sealed/freq (unspecified)) (set! jc2eb2@set-rib-sealed/freq! (unspecified)) (set! jc2eb4@rib-cache (unspecified)) (set! jc2eb6@set-rib-cache! (unspecified)) (set! jc2eb8@dummy (unspecified)) (set! jc2eba@make-empty-rib (unspecified)) (set! jc2ebc@extend-rib! (unspecified)) (set! jc2ebe@extend-rib/nc! (unspecified)) (set! jc2ec0@make-rib-map (unspecified)) (set! jc2ec2@seal-rib! (unspecified)) (set! jc2ec4@unseal-rib! (unspecified)) (set! jc2ec6@make-full-rib (unspecified)) (set! jc2ec8@rp (unspecified)) (set! jc2ed2@stx? (unspecified)) (set! jc2ed4@stx-expr (unspecified)) (set! jc2ed6@set-stx-expr! (unspecified)) (set! jc2ed8@stx-mark* (unspecified)) (set! jc2eda@set-stx-mark*! (unspecified)) (set! jc2edc@stx-subst* (unspecified)) (set! jc2ede@set-stx-subst*! (unspecified)) (set! jc2ee0@stx-ae* (unspecified)) (set! jc2ee2@set-stx-ae*! (unspecified)) (set! jc2ee4@dummy (unspecified)) (set! jc2ee6@datum->stx (unspecified)) (set! jc2ee8@gen-mark (unspecified)) (set! jc2eea@anti-mark (unspecified)) (set! jc2eec@anti-mark? (unspecified)) (set! jc2eee@mkstx (unspecified)) (set! jc2ef0@add-subst (unspecified)) (set! jc2ef2@add-mark (unspecified)) (set! jc2ef4@syntax-kind? (unspecified)) (set! jc2ef6@syntax-vector->list (unspecified)) (set! jc2ef8@syntax-pair? (unspecified)) (set! jc2efa@syntax-vector? (unspecified)) (set! jc2efc@syntax-null? (unspecified)) (set! jc2efe@syntax-list? (unspecified)) (set! jc2f00@syntax-car (unspecified)) (set! jc2f02@syntax-cdr (unspecified)) (set! jc2f04@syntax->list (unspecified)) (set! jc2f06@id? (unspecified)) (set! jc2f08@id->sym (unspecified)) (set! jc2f0a@bound-id=? (unspecified)) (set! jc2f0c@free-id=? (unspecified)) (set! jc2f0e@valid-bound-ids? (unspecified)) (set! jc2f10@distinct-bound-ids? (unspecified)) (set! jc2f12@bound-id-member? (unspecified)) (set! jc2f14@self-evaluating? (unspecified)) (set! jc2f16@strip-annotations (unspecified)) (set! jc2f18@strip (unspecified)) (set! jc2f1a@stx->datum (unspecified)) (set! jc2f1c@id->label (unspecified)) (set! jc2f1e@label->binding (unspecified)) (set! jc2f20@make-binding (unspecified)) (set! jc2f22@binding-type (unspecified)) (set! jc2f24@binding-value (unspecified)) (set! jc2f26@raise-unbound-error (unspecified)) (set! jc2f28@syntax-type (unspecified)) (set! jc2f36@sanitize-binding (unspecified)) (set! jc2f38@make-variable-transformer (unspecified)) (set! jc2f3a@variable-transformer? (unspecified)) (set! jc2f3c@variable-transformer-procedure (unspecified)) (set! jc2f3e@make-eval-transformer (unspecified)) (set! jc308f@parse-define (unspecified)) (set! jc3091@parse-define-syntax (unspecified)) (set! jc3093@scheme-stx-hashtable (unspecified)) (set! jc3095@scheme-stx (unspecified)) (set! jc3097@lexical-var (unspecified)) (set! jc3099@lexical-mutable? (unspecified)) (set! jc309b@set-lexical-mutable! (unspecified)) (set! jc309d@add-lexical (unspecified)) (set! jc309f@add-lexicals (unspecified)) (set! jc30a1@letrec-helper (unspecified)) (set! jc30a3@let-transformer (unspecified)) (set! jc30a5@letrec-transformer (unspecified)) (set! jc30a7@letrec*-transformer (unspecified)) (set! jc30a9@fluid-let-syntax-transformer (unspecified)) (set! jc30ab@type-descriptor-transformer (unspecified)) (set! jc30ad@record-type-descriptor-transformer (unspecified)) (set! jc30af@record-constructor-descriptor-transformer (unspecified)) (set! jc30b1@when-macro (unspecified)) (set! jc30b3@unless-macro (unspecified)) (set! jc30b5@if-transformer (unspecified)) (set! jc30b7@and-transformer (unspecified)) (set! jc30b9@or-transformer (unspecified)) (set! jc30bb@case-macro (unspecified)) (set! jc30bd@quote-transformer (unspecified)) (set! jc30bf@case-lambda-transformer (unspecified)) (set! jc30c1@lambda-transformer (unspecified)) (set! jc30c3@bless (unspecified)) (set! jc30c5@with-syntax-macro (unspecified)) (set! jc30c7@invalid-fmls-error (unspecified)) (set! jc30c9@let-macro (unspecified)) (set! jc30cb@let-values-macro (unspecified)) (set! jc30cd@let*-values-macro (unspecified)) (set! jc30cf@trace-lambda-macro (unspecified)) (set! jc30d1@trace-define-macro (unspecified)) (set! jc30d3@trace-define-syntax-macro (unspecified)) (set! jc30d5@trace-let/rec-syntax (unspecified)) (set! jc30d7@trace-let-syntax-macro (unspecified)) (set! jc30d9@trace-letrec-syntax-macro (unspecified)) (set! jc30db@guard-macro (unspecified)) (set! jc30dd@define-enumeration-macro (unspecified)) (set! jc30df@time-macro (unspecified)) (set! jc30e1@delay-macro (unspecified)) (set! jc30e3@assert-macro (unspecified)) (set! jc30e5@endianness-macro (unspecified)) (set! jc30e7@identifier-syntax-macro (unspecified)) (set! jc30e9@do-macro (unspecified)) (set! jc30eb@let*-macro (unspecified)) (set! jc30ed@or-macro (unspecified)) (set! jc30ef@and-macro (unspecified)) (set! jc30f1@cond-macro (unspecified)) (set! jc30f3@do-include (unspecified)) (set! jc30f5@include-macro (unspecified)) (set! jc30f7@include-into-macro (unspecified)) (set! jc30f9@syntax-rules-macro (unspecified)) (set! jc30fb@quasiquote-macro (unspecified)) (set! jc30fd@quasisyntax-macro (unspecified)) (set! jc30ff@define-struct-macro (unspecified)) (set! jc3101@define-record-type-macro (unspecified)) (set! jc3103@define-condition-type-macro (unspecified)) (set! jc3105@incorrect-usage-macro (unspecified)) (set! jc3107@parameterize-macro (unspecified)) (set! jc3109@foreign-call-transformer (unspecified)) (set! jc310b@convert-pattern (unspecified)) (set! jc310d@syntax-dispatch (unspecified)) (set! jc310f@ellipsis? (unspecified)) (set! jc3111@underscore? (unspecified)) (set! jc3113@verify-literals (unspecified)) (set! jc3115@syntax-case-transformer (unspecified)) (set! jc3117@ellipsis-map (unspecified)) (set! jc3119@syntax-transformer (unspecified)) (set! jc311b@core-macro-transformer (unspecified)) (set! jc311d@symbol-macro (unspecified)) (set! jc311f@macro-transformer (unspecified)) (set! jc3121@local-macro-transformer (unspecified)) (set! jc3123@do-macro-call (unspecified)) (set! jc3125@chi-macro (unspecified)) (set! jc3127@chi-local-macro (unspecified)) (set! jc3129@chi-global-macro (unspecified)) (set! jc312b@chi-expr* (unspecified)) (set! jc312d@chi-application (unspecified)) (set! jc312f@chi-expr (unspecified)) (set! jc3131@chi-set! (unspecified)) (set! jc3133@verify-formals (unspecified)) (set! jc3135@chi-lambda-clause (unspecified)) (set! jc3137@chi-lambda-clause* (unspecified)) (set! jc3139@chi-defun (unspecified)) (set! jc313b@chi-rhs (unspecified)) (set! jc313d@expand-interaction-rhs*/init* (unspecified)) (set! jc313f@chi-rhs* (unspecified)) (set! jc3141@find-bound=? (unspecified)) (set! jc3143@find-dups (unspecified)) (set! jc3145@chi-internal (unspecified)) (set! jc3147@parse-module (unspecified)) (set! jc3151@module-interface? (unspecified)) (set! jc3153@module-interface-first-mark (unspecified)) (set! jc3155@set-module-interface-first-mark! (unspecified)) (set! jc3157@module-interface-exp-id-vec (unspecified)) (set! jc3159@set-module-interface-exp-id-vec! (unspecified)) (set! jc315b@module-interface-exp-lab-vec (unspecified)) (set! jc315d@set-module-interface-exp-lab-vec! (unspecified)) (set! jc315f@dummy (unspecified)) (set! jc3161@module-interface-exp-id* (unspecified)) (set! jc3163@chi-internal-module (unspecified)) (set! jc3165@chi-body* (unspecified)) (set! jc3167@expand-transformer (unspecified)) (set! jc3169@parse-exports (unspecified)) (set! jc316b@parse-library-name (unspecified)) (set! jc316d@parse-library (unspecified)) (set! jc316f@parse-import-spec* (unspecified)) (set! jc3171@make-top-rib (unspecified)) (set! jc3173@make-collector (unspecified)) (set! jc3175@inv-collector (unspecified)) (set! jc3177@vis-collector (unspecified)) (set! jc3179@imp-collector (unspecified)) (set! jc317b@chi-library-internal (unspecified)) (set! jc317d@chi-interaction-expr (unspecified)) (set! jc317f@library-body-expander (unspecified)) (set! jc3181@core-library-expander (unspecified)) (set! jc3183@parse-top-level-program (unspecified)) (set! jc3185@top-level-expander (unspecified)) (set! jc3187@rp (unspecified)) (set! jc3191@env? (unspecified)) (set! jc3193@env-names (unspecified)) (set! jc3195@set-env-names! (unspecified)) (set! jc3197@env-labels (unspecified)) (set! jc3199@set-env-labels! (unspecified)) (set! jc319b@env-itc (unspecified)) (set! jc319d@set-env-itc! (unspecified)) (set! jc319f@dummy (unspecified)) (set! jc31a1@rp (unspecified)) (set! jc31ab@interaction-env? (unspecified)) (set! jc31ad@interaction-env-rib (unspecified)) (set! jc31af@set-interaction-env-rib! (unspecified)) (set! jc31b1@interaction-env-r (unspecified)) (set! jc31b3@set-interaction-env-r! (unspecified)) (set! jc31b5@interaction-env-locs (unspecified)) (set! jc31b7@set-interaction-env-locs! (unspecified)) (set! jc31b9@dummy (unspecified)) (set! jc31bb@interaction-environment-symbols (unspecified)) (set! jc31bd@environment-bindings (unspecified)) (set! jc31bf@parse-binding (unspecified)) (set! jc31c1@environment? (unspecified)) (set! jc31c3@environment-symbols (unspecified)) (set! jc31c5@environment (unspecified)) (set! jc31c7@null-environment (unspecified)) (set! jc31c9@scheme-report-environment (unspecified)) (set! jc31cb@expand (unspecified)) (set! jc31cd@eval (unspecified)) (set! jc31cf@library-expander (unspecified)) (set! jc31d1@boot-library-expand (unspecified)) (set! jc31d3@rev-map-append (unspecified)) (set! jc31d5@build-exports (unspecified)) (set! jc31d7@make-export-subst (unspecified)) (set! jc31d9@make-export-env/macros (unspecified)) (set! jc31db@generate-temporaries (unspecified)) (set! jc31dd@free-identifier=? (unspecified)) (set! jc31df@bound-identifier=? (unspecified)) (set! jc31e1@make-source-condition (unspecified)) (set! jc31e3@extract-position-condition (unspecified)) (set! jc31e5@expression-position (unspecified)) (set! jc31e7@assertion-error (unspecified)) (set! jc31e9@syntax-error (unspecified)) (set! jc31eb@syntax-violation* (unspecified)) (set! jc31ed@syntax-violation (unspecified)) (set! jc31ef@identifier? (unspecified)) (set! jc31f1@datum->syntax (unspecified)) (set! jc31f3@syntax->datum (unspecified)) (set! jc31f5@ungensym-all (unspecified)) (set! jc31f7@compile-r6rs-top-level (unspecified)) (set! jc31f9@pre-compile-r6rs-top-level (unspecified)) (set! jc31fb@interaction-environment (unspecified)) (set! jc31fd@top-level-context (unspecified)) (set! jc2e81@file-options-macro (lambda (jc31fe@x) (letrec* ((jc3201@valid-option? (lambda (jc320a@x) (and (jc2f06@id? jc320a@x) (memq (jc2f08@id->sym jc320a@x) '(no-fail no-create no-truncate)))))) (let ((jc3202@t jc31fe@x)) (let ((jc3204@ls/false (jc310d@syntax-dispatch jc3202@t '(_ . each-any)))) (if (and jc3204@ls/false (apply (lambda (jc3206@opt*) (for-all jc3201@valid-option? jc3206@opt*)) jc3204@ls/false)) (apply (lambda (jc3208@opt*) (jc30c3@bless (list 'make-file-options (list 'quote jc3208@opt*)))) jc3204@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3202@t))))))) (set! jc4b8a@jc2e81@file-options-macro jc2e81@file-options-macro) (set! jc2e83@set-cons (lambda (jc320c@x jc320d@ls) (if (memq jc320c@x jc320d@ls) jc320d@ls (cons jc320c@x jc320d@ls)))) (set! jc4b8b@jc2e83@set-cons jc2e83@set-cons) (set! jc2e85@set-union (lambda (jc3210@ls1 jc3211@ls2) (if (null? jc3210@ls1) jc3211@ls2 (if (memq (car jc3210@ls1) jc3211@ls2) (jc2e85@set-union (cdr jc3210@ls1) jc3211@ls2) (cons (car jc3210@ls1) (jc2e85@set-union (cdr jc3210@ls1) jc3211@ls2)))))) (set! jc4b8c@jc2e85@set-union jc2e85@set-union) (set! jc2e8a@top-mark* '(top)) (set! jc4b8d@jc2e8a@top-mark* jc2e8a@top-mark*) (set! jc2e8c@top-marked? (lambda (jc3214@m*) (memq 'top jc3214@m*))) (set! jc4b8e@jc2e8c@top-marked? jc2e8c@top-marked?) (set! jc2e8e@gen-lexical (lambda (jc3216@sym) (if (symbol? jc3216@sym) (gensym jc3216@sym) (if (jc2ed2@stx? jc3216@sym) (jc2e8e@gen-lexical (jc2f08@id->sym jc3216@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" jc3216@sym))))) (set! jc4b8f@jc2e8e@gen-lexical jc2e8e@gen-lexical) (set! jc2e90@gen-global (lambda (jc3218@x) (jc2e8e@gen-lexical jc3218@x))) (set! jc4b90@jc2e90@gen-global jc2e90@gen-global) (set! jc2e92@gen-label (lambda (jc321a@_) (gensym))) (set! jc4b91@jc2e92@gen-label jc2e92@gen-label) (set! jc2e94@gen-top-level-label (lambda (jc321c@id jc321d@rib) (letrec* ((jc3221@find (lambda (jc322c@sym jc322d@mark* jc322e@sym* jc322f@mark** jc3230@label*) (and (pair? jc322e@sym*) (if (and (eq? jc322c@sym (car jc322e@sym*)) (same-marks? jc322d@mark* (car jc322f@mark**))) (car jc3230@label*) (jc3221@find jc322c@sym jc322d@mark* (cdr jc322e@sym*) (cdr jc322f@mark**) (cdr jc3230@label*))))))) (let ((jc3222@sym (jc2f08@id->sym jc321c@id)) (jc3223@mark* (jc2ed8@stx-mark* jc321c@id))) (let ((jc3226@sym* (jc2ea4@rib-sym* jc321d@rib))) (let ((jc3228@t (and (memq jc3222@sym (jc2ea4@rib-sym* jc321d@rib)) (jc3221@find jc3222@sym jc3223@mark* jc3226@sym* (jc2ea8@rib-mark** jc321d@rib) (jc2eac@rib-label* jc321d@rib))))) (if jc3228@t ((lambda (jc322a@label) (if (jc2d21@jc2b6e@imported-label->binding jc322a@label) (gensym) jc322a@label)) jc3228@t) (gensym)))))))) (set! jc4b92@jc2e94@gen-top-level-label jc2e94@gen-top-level-label) (set! jc2e96@gen-define-label+loc (lambda (jc3236@id jc3237@rib) (let ((jc323a@t (jc31fd@top-level-context))) (if jc323a@t ((lambda (jc323c@env) (let ((jc323e@label (jc2e94@gen-top-level-label jc3236@id jc3237@rib)) (jc323f@locs (jc31b5@interaction-env-locs jc323c@env))) (values jc323e@label (let ((jc3242@t (assq jc323e@label jc323f@locs))) (if jc3242@t (cdr jc3242@t) (let ((jc3244@loc (jc2e8e@gen-lexical jc3236@id))) (begin (jc31b7@set-interaction-env-locs! jc323c@env (cons (cons jc323e@label jc3244@loc) jc323f@locs)) jc3244@loc))))))) jc323a@t) (values (gensym) (jc2e8e@gen-lexical jc3236@id)))))) (set! jc4b93@jc2e96@gen-define-label+loc jc2e96@gen-define-label+loc) (set! jc2e98@gen-define-label (lambda (jc3246@id jc3247@rib) (if (jc31fd@top-level-context) (jc2e94@gen-top-level-label jc3246@id jc3247@rib) (gensym)))) (set! jc4b94@jc2e98@gen-define-label jc2e98@gen-define-label) (set! jc2ea2@rib? (lambda (jc324a@x) (and (simple-struct? jc324a@x) (eq? (simple-struct-name jc324a@x) 'rib)))) (set! jc4b95@jc2ea2@rib? jc2ea2@rib?) (set! jc2ea4@rib-sym* (lambda (jc324c@x) (simple-struct-ref jc324c@x '0))) (set! jc4b96@jc2ea4@rib-sym* jc2ea4@rib-sym*) (set! jc2ea6@set-rib-sym*! (lambda (jc324e@x jc324f@val) (simple-struct-set! jc324e@x '0 jc324f@val))) (set! jc4b97@jc2ea6@set-rib-sym*! jc2ea6@set-rib-sym*!) (set! jc2ea8@rib-mark** (lambda (jc3252@x) (simple-struct-ref jc3252@x '1))) (set! jc4b98@jc2ea8@rib-mark** jc2ea8@rib-mark**) (set! jc2eaa@set-rib-mark**! (lambda (jc3254@x jc3255@val) (simple-struct-set! jc3254@x '1 jc3255@val))) (set! jc4b99@jc2eaa@set-rib-mark**! jc2eaa@set-rib-mark**!) (set! jc2eac@rib-label* (lambda (jc3258@x) (simple-struct-ref jc3258@x '2))) (set! jc4b9a@jc2eac@rib-label* jc2eac@rib-label*) (set! jc2eae@set-rib-label*! (lambda (jc325a@x jc325b@val) (simple-struct-set! jc325a@x '2 jc325b@val))) (set! jc4b9b@jc2eae@set-rib-label*! jc2eae@set-rib-label*!) (set! jc2eb0@rib-sealed/freq (lambda (jc325e@x) (simple-struct-ref jc325e@x '3))) (set! jc4b9c@jc2eb0@rib-sealed/freq jc2eb0@rib-sealed/freq) (set! jc2eb2@set-rib-sealed/freq! (lambda (jc3260@x jc3261@val) (simple-struct-set! jc3260@x '3 jc3261@val))) (set! jc4b9d@jc2eb2@set-rib-sealed/freq! jc2eb2@set-rib-sealed/freq!) (set! jc2eb4@rib-cache (lambda (jc3264@x) (simple-struct-ref jc3264@x '4))) (set! jc4b9e@jc2eb4@rib-cache jc2eb4@rib-cache) (set! jc2eb6@set-rib-cache! (lambda (jc3266@x jc3267@val) (simple-struct-set! jc3266@x '4 jc3267@val))) (set! jc4b9f@jc2eb6@set-rib-cache! jc2eb6@set-rib-cache!) (set! jc2eb8@dummy '3) (set! jc4ba0@jc2eb8@dummy jc2eb8@dummy) (set! jc2eba@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! jc4ba1@jc2eba@make-empty-rib jc2eba@make-empty-rib) (set! jc2ebc@extend-rib! (lambda (jc326a@rib jc326b@id jc326c@label) (letrec* ((jc3271@find (lambda (jc327e@sym jc327f@mark* jc3280@sym* jc3281@mark** jc3282@label*) (and (pair? jc3280@sym*) (if (and (eq? jc327e@sym (car jc3280@sym*)) (same-marks? jc327f@mark* (car jc3281@mark**))) jc3282@label* (jc3271@find jc327e@sym jc327f@mark* (cdr jc3280@sym*) (cdr jc3281@mark**) (cdr jc3282@label*))))))) (begin (if (jc2eb0@rib-sealed/freq jc326a@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" jc326a@rib) (void)) (let ((jc3272@sym (jc2f08@id->sym jc326b@id)) (jc3273@mark* (jc2ed8@stx-mark* jc326b@id))) (let ((jc3276@sym* (jc2ea4@rib-sym* jc326a@rib))) (let ((jc3278@t (and (memq jc3272@sym (jc2ea4@rib-sym* jc326a@rib)) (jc3271@find jc3272@sym jc3273@mark* jc3276@sym* (jc2ea8@rib-mark** jc326a@rib) (jc2eac@rib-label* jc326a@rib))))) (if jc3278@t ((lambda (jc327a@p) (if (not (eq? jc326c@label (car jc327a@p))) (if (jc31fd@top-level-context) (set-car! jc327a@p jc326c@label) (jc31ed@syntax-violation '#f '"multiple definitions of identifier" jc326b@id)) (void))) jc3278@t) (begin (if (jc2eb4@rib-cache jc326a@rib) (hashtable-update! (jc2eb4@rib-cache jc326a@rib) jc3272@sym (lambda (jc327c@e) (cons (cons jc3273@mark* jc326c@label) jc327c@e)) '()) (void)) (jc2ea6@set-rib-sym*! jc326a@rib (cons jc3272@sym jc3276@sym*)) (jc2eaa@set-rib-mark**! jc326a@rib (cons jc3273@mark* (jc2ea8@rib-mark** jc326a@rib))) (jc2eae@set-rib-label*! jc326a@rib (cons jc326c@label (jc2eac@rib-label* jc326a@rib)))))))))))) (set! jc4ba2@jc2ebc@extend-rib! jc2ebc@extend-rib!) (set! jc2ebe@extend-rib/nc! (lambda (jc3288@rib jc3289@id jc328a@label) (let ((jc328e@sym (jc2f08@id->sym jc3289@id)) (jc328f@mark* (jc2ed8@stx-mark* jc3289@id))) (let ((jc3292@sym* (jc2ea4@rib-sym* jc3288@rib))) (begin (if (jc2eb4@rib-cache jc3288@rib) (hashtable-update! (jc2eb4@rib-cache jc3288@rib) jc328e@sym (lambda (jc3294@e) (cons (cons jc328f@mark* jc328a@label) jc3294@e)) '()) (void)) (jc2ea6@set-rib-sym*! jc3288@rib (cons jc328e@sym jc3292@sym*)) (jc2eaa@set-rib-mark**! jc3288@rib (cons jc328f@mark* (jc2ea8@rib-mark** jc3288@rib))) (jc2eae@set-rib-label*! jc3288@rib (cons jc328a@label (jc2eac@rib-label* jc3288@rib)))))))) (set! jc4ba3@jc2ebe@extend-rib/nc! jc2ebe@extend-rib/nc!) (set! jc2ec0@make-rib-map (lambda (jc3296@sym*) (let ((jc3298@ht (make-eq-hashtable))) (let jc329e@f ((jc329a@i '0) (jc329b@sym* jc3296@sym*)) (if (null? jc329b@sym*) jc3298@ht (begin (hashtable-update! jc3298@ht (car jc329b@sym*) (lambda (jc32a0@x) (cons jc329a@i jc32a0@x)) '()) (jc329e@f (+ jc329a@i '1) (cdr jc329b@sym*)))))))) (set! jc4ba4@jc2ec0@make-rib-map jc2ec0@make-rib-map) (set! jc2ec2@seal-rib! (lambda (jc32a2@rib) (let ((jc32a4@sym* (jc2ea4@rib-sym* jc32a2@rib))) (if (not (null? jc32a4@sym*)) (begin (jc2ea6@set-rib-sym*! jc32a2@rib (list->vector jc32a4@sym*)) (jc2eaa@set-rib-mark**! jc32a2@rib (list->vector (jc2ea8@rib-mark** jc32a2@rib))) (jc2eae@set-rib-label*! jc32a2@rib (list->vector (jc2eac@rib-label* jc32a2@rib))) (jc2eb2@set-rib-sealed/freq! jc32a2@rib (jc2ec0@make-rib-map jc32a4@sym*))) (void))))) (set! jc4ba5@jc2ec2@seal-rib! jc2ec2@seal-rib!) (set! jc2ec4@unseal-rib! (lambda (jc32a6@rib) (if (jc2eb0@rib-sealed/freq jc32a6@rib) (begin (jc2eb2@set-rib-sealed/freq! jc32a6@rib '#f) (jc2ea6@set-rib-sym*! jc32a6@rib (vector->list (jc2ea4@rib-sym* jc32a6@rib))) (jc2eaa@set-rib-mark**! jc32a6@rib (vector->list (jc2ea8@rib-mark** jc32a6@rib))) (jc2eae@set-rib-label*! jc32a6@rib (vector->list (jc2eac@rib-label* jc32a6@rib)))) (void)))) (set! jc4ba6@jc2ec4@unseal-rib! jc2ec4@unseal-rib!) (set! jc2ec6@make-full-rib (lambda (jc32a8@id* jc32a9@label*) (let ((jc32ac@r (make-simple-struct 'rib '6 (list (map jc2f08@id->sym jc32a8@id*) (map jc2ed8@stx-mark* jc32a8@id*) jc32a9@label* '#f '#f)))) (begin (jc2ec2@seal-rib! jc32ac@r) jc32ac@r)))) (set! jc4ba7@jc2ec6@make-full-rib jc2ec6@make-full-rib) (set! jc2ec8@rp (jc2a53@jc292e@make-record-printer 'stx (lambda (jc32ae@x jc32af@p jc32b0@wr) (begin (display '"#<syntax " jc32af@p) (write (jc2f1a@stx->datum jc32ae@x) jc32af@p) (let ((jc32b4@expr (jc2ed4@stx-expr jc32ae@x))) (if (jc2a4a@jc291c@annotation? jc32b4@expr) (let ((jc32b6@src (jc2a4b@jc291e@annotation-source jc32b4@expr))) (if (pair? jc32b6@src) (begin (display '" [" jc32af@p) (display (cdr jc32b6@src) jc32af@p) (display '" of " jc32af@p) (display (car jc32b6@src) jc32af@p) (display '"]" jc32af@p)) (void))) (void))) (display '">" jc32af@p))))) (set! jc4ba8@jc2ec8@rp jc2ec8@rp) (set! jc2ed2@stx? (lambda (jc32b8@x) (and (simple-struct? jc32b8@x) (eq? (simple-struct-name jc32b8@x) 'stx)))) (set! jc4ba9@jc2ed2@stx? jc2ed2@stx?) (set! jc2ed4@stx-expr (lambda (jc32ba@x) (simple-struct-ref jc32ba@x '0))) (set! jc4baa@jc2ed4@stx-expr jc2ed4@stx-expr) (set! jc2ed6@set-stx-expr! (lambda (jc32bc@x jc32bd@val) (simple-struct-set! jc32bc@x '0 jc32bd@val))) (set! jc4bab@jc2ed6@set-stx-expr! jc2ed6@set-stx-expr!) (set! jc2ed8@stx-mark* (lambda (jc32c0@x) (simple-struct-ref jc32c0@x '1))) (set! jc4bac@jc2ed8@stx-mark* jc2ed8@stx-mark*) (set! jc2eda@set-stx-mark*! (lambda (jc32c2@x jc32c3@val) (simple-struct-set! jc32c2@x '1 jc32c3@val))) (set! jc4bad@jc2eda@set-stx-mark*! jc2eda@set-stx-mark*!) (set! jc2edc@stx-subst* (lambda (jc32c6@x) (simple-struct-ref jc32c6@x '2))) (set! jc4bae@jc2edc@stx-subst* jc2edc@stx-subst*) (set! jc2ede@set-stx-subst*! (lambda (jc32c8@x jc32c9@val) (simple-struct-set! jc32c8@x '2 jc32c9@val))) (set! jc4baf@jc2ede@set-stx-subst*! jc2ede@set-stx-subst*!) (set! jc2ee0@stx-ae* (lambda (jc32cc@x) (simple-struct-ref jc32cc@x '3))) (set! jc4bb0@jc2ee0@stx-ae* jc2ee0@stx-ae*) (set! jc2ee2@set-stx-ae*! (lambda (jc32ce@x jc32cf@val) (simple-struct-set! jc32ce@x '3 jc32cf@val))) (set! jc4bb1@jc2ee2@set-stx-ae*! jc2ee2@set-stx-ae*!) (set! jc2ee4@dummy '3) (set! jc4bb2@jc2ee4@dummy jc2ee4@dummy) (set! jc2ee6@datum->stx (lambda (jc32d2@id jc32d3@datum) (make-simple-struct 'stx '5 (list jc32d3@datum (jc2ed8@stx-mark* jc32d2@id) (jc2edc@stx-subst* jc32d2@id) (jc2ee0@stx-ae* jc32d2@id))))) (set! jc4bb3@jc2ee6@datum->stx jc2ee6@datum->stx) (set! jc2ee8@gen-mark (lambda () (string '#\m))) (set! jc4bb4@jc2ee8@gen-mark jc2ee8@gen-mark) (set! jc2eea@anti-mark '#f) (set! jc4bb5@jc2eea@anti-mark jc2eea@anti-mark) (set! jc2eec@anti-mark? not) (set! jc4bb6@jc2eec@anti-mark? jc2eec@anti-mark?) (set! jc2eee@mkstx (lambda (jc32d6@e jc32d7@m* jc32d8@s* jc32d9@ae*) (if (and (jc2ed2@stx? jc32d6@e) (not (jc2e8c@top-marked? jc32d7@m*))) (call-with-values (lambda () (join-wraps jc32d7@m* jc32d8@s* jc32d9@ae* jc32d6@e)) (lambda (jc32e4@jc32df jc32e5@jc32e1 jc32e6@jc32e3) (let ((jc32ea@ae* jc32e6@jc32e3) (jc32eb@s* jc32e5@jc32e1) (jc32ec@m* jc32e4@jc32df)) (make-simple-struct 'stx '5 (list (jc2ed4@stx-expr jc32d6@e) jc32ec@m* jc32eb@s* jc32ea@ae*))))) (make-simple-struct 'stx '5 (list jc32d6@e jc32d7@m* jc32d8@s* jc32d9@ae*))))) (set! jc4bb7@jc2eee@mkstx jc2eee@mkstx) (set! jc2ef0@add-subst (lambda (jc32f0@subst jc32f1@e) (jc2eee@mkstx jc32f1@e '() (list jc32f0@subst) '()))) (set! jc4bb8@jc2ef0@add-subst jc2ef0@add-subst) (set! jc2ef2@add-mark (lambda (jc32f4@mark jc32f5@subst jc32f6@expr jc32f7@ae) (letrec* ((jc32fd@merge-ae* (lambda (jc3324@ls1 jc3325@ls2) (if (and (pair? jc3324@ls1) (pair? jc3325@ls2) (not (car jc3325@ls2))) (jc32ff@cancel jc3324@ls1 jc3325@ls2) (append jc3324@ls1 jc3325@ls2)))) (jc32ff@cancel (lambda (jc331a@ls1 jc331b@ls2) (let jc3322@f ((jc331e@x (car jc331a@ls1)) (jc331f@ls1 (cdr jc331a@ls1))) (if (null? jc331f@ls1) (cdr jc331b@ls2) (cons jc331e@x (jc3322@f (car jc331f@ls1) (cdr jc331f@ls1))))))) (jc3301@f (lambda (jc3302@e jc3303@m jc3304@s1* jc3305@ae*) (if (pair? jc3302@e) (let ((jc330a@a (jc3301@f (car jc3302@e) jc3303@m jc3304@s1* jc3305@ae*)) (jc330b@d (jc3301@f (cdr jc3302@e) jc3303@m jc3304@s1* jc3305@ae*))) (if (eq? jc330a@a jc330b@d) jc3302@e (cons jc330a@a jc330b@d))) (if (vector? jc3302@e) (let ((jc330e@ls1 (vector->list jc3302@e))) (let ((jc3310@ls2 (map (lambda (jc3312@x) (jc3301@f jc3312@x jc3303@m jc3304@s1* jc3305@ae*)) jc330e@ls1))) (if (for-all eq? jc330e@ls1 jc3310@ls2) jc3302@e (list->vector jc3310@ls2)))) (if (jc2ed2@stx? jc3302@e) (let ((jc3314@m* (jc2ed8@stx-mark* jc3302@e)) (jc3315@s2* (jc2edc@stx-subst* jc3302@e))) (if (null? jc3314@m*) (jc3301@f (jc2ed4@stx-expr jc3302@e) jc3303@m (append jc3304@s1* jc3315@s2*) (jc32fd@merge-ae* jc3305@ae* (jc2ee0@stx-ae* jc3302@e))) (if (eq? (car jc3314@m*) jc2eea@anti-mark) (make-simple-struct 'stx '5 (list (jc2ed4@stx-expr jc3302@e) (cdr jc3314@m*) (cdr (append jc3304@s1* jc3315@s2*)) (jc32fd@merge-ae* jc3305@ae* (jc2ee0@stx-ae* jc3302@e)))) (make-simple-struct 'stx '5 (list (jc2ed4@stx-expr jc3302@e) (cons jc3303@m jc3314@m*) (let ((jc3318@s* (cons 'shift (append jc3304@s1* jc3315@s2*)))) (if jc32f5@subst (cons jc32f5@subst jc3318@s*) jc3318@s*)) (jc32fd@merge-ae* jc3305@ae* (jc2ee0@stx-ae* jc3302@e))))))) (if (symbol? jc3302@e) (jc31ed@syntax-violation '#f '"raw symbol encountered in output of macro" jc32f6@expr jc3302@e) (make-simple-struct 'stx '5 (list jc3302@e (list jc3303@m) jc3304@s1* jc3305@ae*))))))))) (jc2eee@mkstx (jc3301@f jc32f6@expr jc32f4@mark '() '()) '() '() (list jc32f7@ae))))) (set! jc4bb9@jc2ef2@add-mark jc2ef2@add-mark) (set! jc2ef4@syntax-kind? (lambda (jc3328@x jc3329@p?) (if (jc2ed2@stx? jc3328@x) (jc2ef4@syntax-kind? (jc2ed4@stx-expr jc3328@x) jc3329@p?) (if (jc2a4a@jc291c@annotation? jc3328@x) (jc2ef4@syntax-kind? (jc2a4c@jc2920@annotation-expression jc3328@x) jc3329@p?) (jc3329@p? jc3328@x))))) (set! jc4bba@jc2ef4@syntax-kind? jc2ef4@syntax-kind?) (set! jc2ef6@syntax-vector->list (lambda (jc332c@x) (if (jc2ed2@stx? jc332c@x) (let ((jc332e@ls (jc2ef6@syntax-vector->list (jc2ed4@stx-expr jc332c@x))) (jc332f@m* (jc2ed8@stx-mark* jc332c@x)) (jc3330@s* (jc2edc@stx-subst* jc332c@x)) (jc3331@ae* (jc2ee0@stx-ae* jc332c@x))) (map (lambda (jc3336@x) (jc2eee@mkstx jc3336@x jc332f@m* jc3330@s* jc3331@ae*)) jc332e@ls)) (if (jc2a4a@jc291c@annotation? jc332c@x) (jc2ef6@syntax-vector->list (jc2a4c@jc2920@annotation-expression jc332c@x)) (if (vector? jc332c@x) (vector->list jc332c@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" jc332c@x)))))) (set! jc4bbb@jc2ef6@syntax-vector->list jc2ef6@syntax-vector->list) (set! jc2ef8@syntax-pair? (lambda (jc3338@x) (jc2ef4@syntax-kind? jc3338@x pair?))) (set! jc4bbc@jc2ef8@syntax-pair? jc2ef8@syntax-pair?) (set! jc2efa@syntax-vector? (lambda (jc333a@x) (jc2ef4@syntax-kind? jc333a@x vector?))) (set! jc4bbd@jc2efa@syntax-vector? jc2efa@syntax-vector?) (set! jc2efc@syntax-null? (lambda (jc333c@x) (jc2ef4@syntax-kind? jc333c@x null?))) (set! jc4bbe@jc2efc@syntax-null? jc2efc@syntax-null?) (set! jc2efe@syntax-list? (lambda (jc333e@x) (or (jc2efc@syntax-null? jc333e@x) (and (jc2ef8@syntax-pair? jc333e@x) (jc2efe@syntax-list? (jc2f02@syntax-cdr jc333e@x)))))) (set! jc4bbf@jc2efe@syntax-list? jc2efe@syntax-list?) (set! jc2f00@syntax-car (lambda (jc3340@x) (if (jc2ed2@stx? jc3340@x) (jc2eee@mkstx (jc2f00@syntax-car (jc2ed4@stx-expr jc3340@x)) (jc2ed8@stx-mark* jc3340@x) (jc2edc@stx-subst* jc3340@x) (jc2ee0@stx-ae* jc3340@x)) (if (jc2a4a@jc291c@annotation? jc3340@x) (jc2f00@syntax-car (jc2a4c@jc2920@annotation-expression jc3340@x)) (if (pair? jc3340@x) (car jc3340@x) (assertion-violation 'syntax-car '"BUG: not a pair" jc3340@x)))))) (set! jc4bc0@jc2f00@syntax-car jc2f00@syntax-car) (set! jc2f02@syntax-cdr (lambda (jc3342@x) (if (jc2ed2@stx? jc3342@x) (jc2eee@mkstx (jc2f02@syntax-cdr (jc2ed4@stx-expr jc3342@x)) (jc2ed8@stx-mark* jc3342@x) (jc2edc@stx-subst* jc3342@x) (jc2ee0@stx-ae* jc3342@x)) (if (jc2a4a@jc291c@annotation? jc3342@x) (jc2f02@syntax-cdr (jc2a4c@jc2920@annotation-expression jc3342@x)) (if (pair? jc3342@x) (cdr jc3342@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" jc3342@x)))))) (set! jc4bc1@jc2f02@syntax-cdr jc2f02@syntax-cdr) (set! jc2f04@syntax->list (lambda (jc3344@x) (if (jc2ef8@syntax-pair? jc3344@x) (cons (jc2f00@syntax-car jc3344@x) (jc2f04@syntax->list (jc2f02@syntax-cdr jc3344@x))) (if (jc2efc@syntax-null? jc3344@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" jc3344@x))))) (set! jc4bc2@jc2f04@syntax->list jc2f04@syntax->list) (set! jc2f06@id? (lambda (jc3346@x) (and (jc2ed2@stx? jc3346@x) (symbol? (jc2ed4@stx-expr jc3346@x))))) (set! jc4bc3@jc2f06@id? jc2f06@id?) (set! jc2f08@id->sym (lambda (jc3348@x) (jc2ed4@stx-expr jc3348@x))) (set! jc4bc4@jc2f08@id->sym jc2f08@id->sym) (set! jc2f0a@bound-id=? (lambda (jc334a@x jc334b@y) (and (eq? (jc2f08@id->sym jc334a@x) (jc2f08@id->sym jc334b@y)) (same-marks? (jc2ed8@stx-mark* jc334a@x) (jc2ed8@stx-mark* jc334b@y))))) (set! jc4bc5@jc2f0a@bound-id=? jc2f0a@bound-id=?) (set! jc2f0c@free-id=? (lambda (jc334e@i jc334f@j) (let ((jc3352@t0 (id->real-label jc334e@i)) (jc3353@t1 (id->real-label jc334f@j))) (if (or jc3352@t0 jc3353@t1) (eq? jc3352@t0 jc3353@t1) (eq? (jc2f08@id->sym jc334e@i) (jc2f08@id->sym jc334f@j)))))) (set! jc4bc6@jc2f0c@free-id=? jc2f0c@free-id=?) (set! jc2f0e@valid-bound-ids? (lambda (jc3356@id*) (and (for-all jc2f06@id? jc3356@id*) (jc2f10@distinct-bound-ids? jc3356@id*)))) (set! jc4bc7@jc2f0e@valid-bound-ids? jc2f0e@valid-bound-ids?) (set! jc2f10@distinct-bound-ids? (lambda (jc3358@id*) (or (null? jc3358@id*) (and (not (jc2f12@bound-id-member? (car jc3358@id*) (cdr jc3358@id*))) (jc2f10@distinct-bound-ids? (cdr jc3358@id*)))))) (set! jc4bc8@jc2f10@distinct-bound-ids? jc2f10@distinct-bound-ids?) (set! jc2f12@bound-id-member? (lambda (jc335a@id jc335b@id*) (and (pair? jc335b@id*) (or (jc2f0a@bound-id=? jc335a@id (car jc335b@id*)) (jc2f12@bound-id-member? jc335a@id (cdr jc335b@id*)))))) (set! jc4bc9@jc2f12@bound-id-member? jc2f12@bound-id-member?) (set! jc2f14@self-evaluating? (lambda (jc335e@x) (or (number? jc335e@x) (string? jc335e@x) (char? jc335e@x) (boolean? jc335e@x) (regexp? jc335e@x) (bytevector? jc335e@x)))) (set! jc4bca@jc2f14@self-evaluating? jc2f14@self-evaluating?) (set! jc2f16@strip-annotations (lambda (jc3360@x) (if (pair? jc3360@x) (cons (jc2f16@strip-annotations (car jc3360@x)) (jc2f16@strip-annotations (cdr jc3360@x))) (if (vector? jc3360@x) (vector-map jc2f16@strip-annotations jc3360@x) (if (jc2a4a@jc291c@annotation? jc3360@x) (jc2a49@jc291a@annotation-stripped jc3360@x) jc3360@x))))) (set! jc4bcb@jc2f16@strip-annotations jc2f16@strip-annotations) (set! jc2f18@strip (lambda (jc3362@x jc3363@m*) (if (jc2e8c@top-marked? jc3363@m*) (if (or (jc2a4a@jc291c@annotation? jc3362@x) (and (pair? jc3362@x) (jc2a4a@jc291c@annotation? (car jc3362@x))) (and (vector? jc3362@x) (> (vector-length jc3362@x) '0) (jc2a4a@jc291c@annotation? (vector-ref jc3362@x '0)))) (jc2f16@strip-annotations jc3362@x) jc3362@x) (let jc3368@f ((jc3366@x jc3362@x)) (if (jc2ed2@stx? jc3366@x) (begin (if (pair? (jc2ed4@stx-expr jc3366@x)) (begin (set-source-info! (jc2ed4@stx-expr jc3366@x) '#f) (set-source-info! (cdr (jc2ed4@stx-expr jc3366@x)) '#f) (set-source-info! (car (jc2ed4@stx-expr jc3366@x)) '#f)) (void)) (jc2f18@strip (jc2ed4@stx-expr jc3366@x) (jc2ed8@stx-mark* jc3366@x))) (if (jc2a4a@jc291c@annotation? jc3366@x) (jc2a49@jc291a@annotation-stripped jc3366@x) (if (pair? jc3366@x) (let ((jc336a@a (jc3368@f (car jc3366@x))) (jc336b@d (jc3368@f (cdr jc3366@x)))) (if (and (eq? jc336a@a (car jc3366@x)) (eq? jc336b@d (cdr jc3366@x))) jc3366@x (cons jc336a@a jc336b@d))) (if (vector? jc3366@x) (let ((jc336e@old (vector->list jc3366@x))) (let ((jc3370@new (map jc3368@f jc336e@old))) (if (for-all eq? jc336e@old jc3370@new) jc3366@x (list->vector jc3370@new)))) jc3366@x)))))))) (set! jc4bcc@jc2f18@strip jc2f18@strip) (set! jc2f1a@stx->datum (lambda (jc3372@x) (jc2f18@strip jc3372@x '()))) (set! jc4bcd@jc2f1a@stx->datum jc2f1a@stx->datum) (set! jc2f1c@id->label (lambda (jc3374@id) (or (id->real-label jc3374@id) (let ((jc3376@t (jc31fd@top-level-context))) (if jc3376@t ((lambda (jc3378@env) (let ((jc337a@rib (jc31ad@interaction-env-rib jc3378@env))) (call-with-values (lambda () (jc2e96@gen-define-label+loc jc3374@id jc337a@rib)) (lambda (jc3380@jc337d jc3381@jc337f) (let ((jc3384@loc_ jc3381@jc337f) (jc3385@lab jc3380@jc337d)) (begin (jc2ebc@extend-rib! jc337a@rib jc3374@id jc3385@lab) jc3385@lab)))))) jc3376@t) '#f))))) (set! jc4bce@jc2f1c@id->label jc2f1c@id->label) (set! jc2f1e@label->binding (lambda (jc3388@x jc3389@r) (let ((jc338c@t (jc2d21@jc2b6e@imported-label->binding jc3388@x))) (if jc338c@t ((lambda (jc338e@b) (if (and (pair? jc338e@b) (eq? (car jc338e@b) '$core-rtd)) (cons '$rtd (map jc30c3@bless (cdr jc338e@b))) (if (and (pair? jc338e@b) (eq? (car jc338e@b) 'global-rtd)) (let ((jc3390@lib (cadr jc338e@b)) (jc3391@loc (cddr jc338e@b))) (cons '$rtd (symbol-value jc3391@loc))) jc338e@b))) jc338c@t) (let ((jc3394@t (assq jc3388@x jc3389@r))) (if jc3394@t (cdr jc3394@t) (let ((jc3396@t (jc31fd@top-level-context))) (if jc3396@t ((lambda (jc3398@env) (let ((jc339a@t (assq jc3388@x (jc31b5@interaction-env-locs jc3398@env)))) (if jc339a@t ((lambda (jc339c@p) (cons* 'lexical (cdr jc339c@p) '#f)) jc339a@t) '(displaced-lexical . #f)))) jc3396@t) '(displaced-lexical . #f))))))))) (set! jc4bcf@jc2f1e@label->binding jc2f1e@label->binding) (set! jc2f20@make-binding cons) (set! jc4bd0@jc2f20@make-binding jc2f20@make-binding) (set! jc2f22@binding-type car) (set! jc4bd1@jc2f22@binding-type jc2f22@binding-type) (set! jc2f24@binding-value cdr) (set! jc4bd2@jc2f24@binding-value jc2f24@binding-value) (set! jc2f26@raise-unbound-error (lambda (jc339e@id) (jc31eb@syntax-violation* '#f '"unbound identifier" jc339e@id (make-undefined-violation)))) (set! jc4bd3@jc2f26@raise-unbound-error jc2f26@raise-unbound-error) (set! jc2f28@syntax-type (lambda (jc33a0@e jc33a1@r) (if (jc2f06@id? jc33a0@e) (let ((jc33a4@id jc33a0@e)) (let ((jc33a6@label (jc2f1c@id->label jc33a4@id))) (let ((jc33a8@b (jc2f1e@label->binding jc33a6@label jc33a1@r))) (let ((jc33aa@type (jc2f22@binding-type jc33a8@b))) (begin (if (not jc33a6@label) (jc2f26@raise-unbound-error jc33a4@id) (void)) (let ((jc33ac@t jc33aa@type)) (if (memv jc33ac@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values jc33aa@type (jc2f24@binding-value jc33a8@b) jc33a4@id) (values 'other '#f '#f)))))))) (if (jc2ef8@syntax-pair? jc33a0@e) (let ((jc33ae@id (jc2f00@syntax-car jc33a0@e))) (if (jc2f06@id? jc33ae@id) (let ((jc33b0@label (jc2f1c@id->label jc33ae@id))) (let ((jc33b2@b (jc2f1e@label->binding jc33b0@label jc33a1@r))) (let ((jc33b4@type (jc2f22@binding-type jc33b2@b))) (begin (if (not jc33b0@label) (jc2f26@raise-unbound-error jc33ae@id) (void)) (let ((jc33b6@t jc33b4@type)) (if (memv jc33b6@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values jc33b4@type (jc2f24@binding-value jc33b2@b) jc33ae@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((jc33b8@d (jc2f1a@stx->datum jc33a0@e))) (if (jc2f14@self-evaluating? jc33b8@d) (values 'constant jc33b8@d '#f) (values 'other '#f '#f))))))) (set! jc4bd4@jc2f28@syntax-type jc2f28@syntax-type) (set! jc2f36@sanitize-binding (lambda (jc33ba@x jc33bb@src) (if (procedure? jc33ba@x) (cons* 'local-macro jc33ba@x jc33bb@src) (if (and (pair? jc33ba@x) (eq? (car jc33ba@x) 'macro!) (procedure? (cdr jc33ba@x))) (cons* 'local-macro! (cdr jc33ba@x) jc33bb@src) (if (and (pair? jc33ba@x) (eq? (car jc33ba@x) '$rtd)) jc33ba@x (assertion-violation 'expand '"invalid transformer" jc33ba@x)))))) (set! jc4bd5@jc2f36@sanitize-binding jc2f36@sanitize-binding) (set! jc2f38@make-variable-transformer (lambda (jc33be@x) (if (procedure? jc33be@x) (cons 'macro! jc33be@x) (assertion-violation 'make-variable-transformer '"not a procedure" jc33be@x)))) (set! jc4bd6@jc2f38@make-variable-transformer jc2f38@make-variable-transformer) (set! jc2f3a@variable-transformer? (lambda (jc33c0@x) (and (pair? jc33c0@x) (eq? (car jc33c0@x) 'macro!) (procedure? (cdr jc33c0@x))))) (set! jc4bd7@jc2f3a@variable-transformer? jc2f3a@variable-transformer?) (set! jc2f3c@variable-transformer-procedure (lambda (jc33c2@x) (if (jc2f3a@variable-transformer? jc33c2@x) (cdr jc33c2@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" jc33c2@x)))) (set! jc4bd8@jc2f3c@variable-transformer-procedure jc2f3c@variable-transformer-procedure) (set! jc2f3e@make-eval-transformer (lambda (jc33c4@x) (jc2f36@sanitize-binding (eval-core (jc2aac@jc2a64@expanded->core jc33c4@x)) jc33c4@x))) (set! jc4bd9@jc2f3e@make-eval-transformer jc2f3e@make-eval-transformer) (set! jc308f@parse-define (lambda (jc33c6@x) (let ((jc33c8@t jc33c6@x)) (let ((jc33ca@ls/false (jc310d@syntax-dispatch jc33c8@t '(_ (any . any) any . each-any)))) (if (and jc33ca@ls/false (apply (lambda (jc33cc@id jc33cd@fmls jc33ce@b jc33cf@b*) (jc2f06@id? jc33cc@id)) jc33ca@ls/false)) (apply (lambda (jc33d4@id jc33d5@fmls jc33d6@b jc33d7@b*) (begin (jc3133@verify-formals jc33d5@fmls jc33c6@x) (values jc33d4@id (cons 'defun (cons jc33d5@fmls (cons jc33d6@b jc33d7@b*)))))) jc33ca@ls/false) (let ((jc33dc@t jc33c8@t)) (let ((jc33de@ls/false (jc310d@syntax-dispatch jc33dc@t '(_ any any)))) (if (and jc33de@ls/false (apply (lambda (jc33e0@id jc33e1@val) (jc2f06@id? jc33e0@id)) jc33de@ls/false)) (apply (lambda (jc33e4@id jc33e5@val) (values jc33e4@id (cons 'expr jc33e5@val))) jc33de@ls/false) (let ((jc33e8@t jc33dc@t)) (let ((jc33ea@ls/false (jc310d@syntax-dispatch jc33e8@t '(_ any)))) (if (and jc33ea@ls/false (apply (lambda (jc33ec@id) (jc2f06@id? jc33ec@id)) jc33ea@ls/false)) (apply (lambda (jc33ee@id) (values jc33ee@id (cons 'expr (jc30c3@bless '(void))))) jc33ea@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc33e8@t)))))))))))) (set! jc4bda@jc308f@parse-define jc308f@parse-define) (set! jc3091@parse-define-syntax (lambda (jc33f0@x) (let ((jc33f2@t jc33f0@x)) (let ((jc33f4@ls/false (jc310d@syntax-dispatch jc33f2@t '(_ any any)))) (if (and jc33f4@ls/false (apply (lambda (jc33f6@id jc33f7@val) (jc2f06@id? jc33f6@id)) jc33f4@ls/false)) (apply (lambda (jc33fa@id jc33fb@val) (values jc33fa@id jc33fb@val)) jc33f4@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc33f2@t)))))) (set! jc4bdb@jc3091@parse-define-syntax jc3091@parse-define-syntax) (set! jc3093@scheme-stx-hashtable (make-eq-hashtable)) (set! jc4bdc@jc3093@scheme-stx-hashtable jc3093@scheme-stx-hashtable) (set! jc3095@scheme-stx (lambda (jc33fe@sym) (or (hashtable-ref jc3093@scheme-stx-hashtable jc33fe@sym '#f) (let ((jc3400@subst (jc2cfd@jc2b26@library-subst (jc2d1b@jc2b62@find-library-by-name '(psyntax system $all))))) (let ((jc3402@stx (make-simple-struct 'stx '5 (list jc33fe@sym jc2e8a@top-mark* '() '())))) (let ((jc3404@stx (let ((jc3406@t (assq jc33fe@sym jc3400@subst))) (if jc3406@t ((lambda (jc3408@x) (let ((jc340a@name (car jc3408@x)) (jc340b@label (cdr jc3408@x))) (jc2ef0@add-subst (make-simple-struct 'rib '6 (list (list jc340a@name) (list jc2e8a@top-mark*) (list jc340b@label) '#f '#f)) jc3402@stx))) jc3406@t) jc3402@stx)))) (begin (hashtable-set! jc3093@scheme-stx-hashtable jc33fe@sym jc3404@stx) jc3404@stx))))))) (set! jc4bdd@jc3095@scheme-stx jc3095@scheme-stx) (set! jc3097@lexical-var car) (set! jc4bde@jc3097@lexical-var jc3097@lexical-var) (set! jc3099@lexical-mutable? cdr) (set! jc4bdf@jc3099@lexical-mutable? jc3099@lexical-mutable?) (set! jc309b@set-lexical-mutable! set-cdr!) (set! jc4be0@jc309b@set-lexical-mutable! jc309b@set-lexical-mutable!) (set! jc309d@add-lexical (lambda (jc340e@lab jc340f@lex jc3410@r) (cons (cons* jc340e@lab 'lexical jc340f@lex '#f) jc3410@r))) (set! jc4be1@jc309d@add-lexical jc309d@add-lexical) (set! jc309f@add-lexicals (lambda (jc3414@lab* jc3415@lex* jc3416@r) (if (null? jc3414@lab*) jc3416@r (jc309f@add-lexicals (cdr jc3414@lab*) (cdr jc3415@lex*) (jc309d@add-lexical (car jc3414@lab*) (car jc3415@lex*) jc3416@r))))) (set! jc4be2@jc309f@add-lexicals jc309f@add-lexicals) (set! jc30a1@letrec-helper (lambda (jc341a@e jc341b@r jc341c@mr jc341d@build) (let ((jc3422@t jc341a@e)) (let ((jc3424@ls/false (jc310d@syntax-dispatch jc3422@t '(_ #(each (any any)) any . each-any)))) (if jc3424@ls/false (apply (lambda (jc3426@lhs* jc3427@rhs* jc3428@b jc3429@b*) (if (not (jc2f0e@valid-bound-ids? jc3426@lhs*)) (jc30c7@invalid-fmls-error jc341a@e jc3426@lhs*) (let ((jc342e@lex* (map jc2e8e@gen-lexical jc3426@lhs*)) (jc342f@lab* (map jc2e92@gen-label jc3426@lhs*))) (let ((jc3432@rib (jc2ec6@make-full-rib jc3426@lhs* jc342f@lab*)) (jc3433@r (jc309f@add-lexicals jc342f@lab* jc342e@lex* jc341b@r))) (let ((jc3436@body (jc3145@chi-internal (jc2ef0@add-subst jc3432@rib (cons jc3428@b jc3429@b*)) jc3433@r jc341c@mr)) (jc3437@rhs* (jc312b@chi-expr* (map (lambda (jc343a@x) (jc2ef0@add-subst jc3432@rib jc343a@x)) jc3427@rhs*) jc3433@r jc341c@mr))) (jc341d@build '#f jc342e@lex* jc3437@rhs* jc3436@body)))))) jc3424@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3422@t)))))) (set! jc4be3@jc30a1@letrec-helper jc30a1@letrec-helper) (set! jc30a3@let-transformer (lambda (jc343c@e jc343d@r jc343e@mr) (let ((jc3442@t jc343c@e)) (let ((jc3444@ls/false (jc310d@syntax-dispatch jc3442@t '(_ #(each (any any)) any . each-any)))) (if jc3444@ls/false (apply (lambda (jc3446@lhs* jc3447@rhs* jc3448@b jc3449@b*) (if (not (jc2f0e@valid-bound-ids? jc3446@lhs*)) (jc30c7@invalid-fmls-error jc343c@e jc3446@lhs*) (let ((jc344e@lex* (map jc2e8e@gen-lexical jc3446@lhs*)) (jc344f@lab* (map jc2e92@gen-label jc3446@lhs*)) (jc3450@rhs* (jc312b@chi-expr* jc3447@rhs* jc343d@r jc343e@mr))) (let ((jc3454@rib (jc2ec6@make-full-rib jc3446@lhs* jc344f@lab*)) (jc3455@r (jc309f@add-lexicals jc344f@lab* jc344e@lex* jc343d@r))) (let ((jc3458@body (jc3145@chi-internal (jc2ef0@add-subst jc3454@rib (cons jc3448@b jc3449@b*)) jc3455@r jc343e@mr))) (jc2e6e@jc2dd1@build-let '#f jc344e@lex* jc3450@rhs* jc3458@body)))))) jc3444@ls/false) (let ((jc345a@t jc3442@t)) (let ((jc345c@ls/false (jc310d@syntax-dispatch jc345a@t '(_ any #(each (any any)) any . each-any)))) (if jc345c@ls/false (apply (lambda (jc345e@loop jc345f@lhs* jc3460@rhs* jc3461@b jc3462@b*) (if (not (jc2f0e@valid-bound-ids? jc345f@lhs*)) (jc30c7@invalid-fmls-error jc343c@e jc345f@lhs*) (let ((jc3468@lex* (map jc2e8e@gen-lexical jc345f@lhs*)) (jc3469@lab* (map jc2e92@gen-label jc345f@lhs*)) (jc346a@rhs* (jc312b@chi-expr* jc3460@rhs* jc343d@r jc343e@mr)) (jc346b@loop-lex (jc2e8e@gen-lexical jc345e@loop)) (jc346c@loop-lab (jc2e92@gen-label jc345e@loop))) (let ((jc3472@loop-rib (jc2ec6@make-full-rib (list jc345e@loop) (list jc346c@loop-lab))) (jc3473@rib (jc2ec6@make-full-rib jc345f@lhs* jc3469@lab*)) (jc3474@r (jc309f@add-lexicals (cons jc346c@loop-lab jc3469@lab*) (cons jc346b@loop-lex jc3468@lex*) jc343d@r))) (let ((jc3478@body (jc3145@chi-internal (jc2ef0@add-subst jc3472@loop-rib (jc2ef0@add-subst jc3473@rib (cons jc3461@b jc3462@b*))) jc3474@r jc343e@mr))) (jc2e6f@jc2dd3@build-named-let '#f jc346b@loop-lex jc3468@lex* jc346a@rhs* jc3478@body)))))) jc345c@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc345a@t))))))))) (set! jc4be4@jc30a3@let-transformer jc30a3@let-transformer) (set! jc30a5@letrec-transformer (lambda (jc347a@e jc347b@r jc347c@mr) (jc30a1@letrec-helper jc347a@e jc347b@r jc347c@mr jc2e6d@jc2dcf@build-letrec))) (set! jc4be5@jc30a5@letrec-transformer jc30a5@letrec-transformer) (set! jc30a7@letrec*-transformer (lambda (jc3480@e jc3481@r jc3482@mr) (jc30a1@letrec-helper jc3480@e jc3481@r jc3482@mr jc2e70@jc2dd5@build-letrec*))) (set! jc4be6@jc30a7@letrec*-transformer jc30a7@letrec*-transformer) (set! jc30a9@fluid-let-syntax-transformer (lambda (jc3486@e jc3487@r jc3488@mr) (letrec* ((jc348d@lookup (lambda (jc34a0@x) (or (jc2f1c@id->label jc34a0@x) (jc31ed@syntax-violation '#f '"unbound identifier" jc3486@e jc34a0@x))))) (let ((jc348e@t jc3486@e)) (let ((jc3490@ls/false (jc310d@syntax-dispatch jc348e@t '(_ #(each (any any)) any . each-any)))) (if jc3490@ls/false (apply (lambda (jc3492@lhs* jc3493@rhs* jc3494@b jc3495@b*) (if (not (jc2f0e@valid-bound-ids? jc3492@lhs*)) (jc30c7@invalid-fmls-error jc3486@e jc3492@lhs*) (let ((jc349a@lab* (map jc348d@lookup jc3492@lhs*)) (jc349b@rhs* (map (lambda (jc349e@x) (jc2f3e@make-eval-transformer (jc3167@expand-transformer jc349e@x jc3488@mr))) jc3493@rhs*))) (jc3145@chi-internal (cons jc3494@b jc3495@b*) (append (map cons jc349a@lab* jc349b@rhs*) jc3487@r) (append (map cons jc349a@lab* jc349b@rhs*) jc3488@mr))))) jc3490@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc348e@t))))))) (set! jc4be7@jc30a9@fluid-let-syntax-transformer jc30a9@fluid-let-syntax-transformer) (set! jc30ab@type-descriptor-transformer (lambda (jc34a2@e jc34a3@r jc34a4@mr) (let ((jc34a8@t jc34a2@e)) (let ((jc34aa@ls/false (jc310d@syntax-dispatch jc34a8@t '(_ any)))) (if (and jc34aa@ls/false (apply (lambda (jc34ac@id) (jc2f06@id? jc34ac@id)) jc34aa@ls/false)) (apply (lambda (jc34ae@id) (let ((jc34b0@lab (jc2f1c@id->label jc34ae@id))) (let ((jc34b2@b (jc2f1e@label->binding jc34b0@lab jc34a3@r))) (let ((jc34b4@type (jc2f22@binding-type jc34b2@b))) (begin (if (not jc34b0@lab) (jc2f26@raise-unbound-error jc34ae@id) (void)) (if (not (and (eq? jc34b4@type '$rtd) (not (list? (jc2f24@binding-value jc34b2@b))))) (jc31ed@syntax-violation '#f '"not a record type" jc34a2@e) (void)) (list 'quote (jc2f24@binding-value jc34b2@b))))))) jc34aa@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc34a8@t)))))) (set! jc4be8@jc30ab@type-descriptor-transformer jc30ab@type-descriptor-transformer) (set! jc30ad@record-type-descriptor-transformer (lambda (jc34b6@e jc34b7@r jc34b8@mr) (let ((jc34bc@t jc34b6@e)) (let ((jc34be@ls/false (jc310d@syntax-dispatch jc34bc@t '(_ any)))) (if (and jc34be@ls/false (apply (lambda (jc34c0@id) (jc2f06@id? jc34c0@id)) jc34be@ls/false)) (apply (lambda (jc34c2@id) (let ((jc34c4@lab (jc2f1c@id->label jc34c2@id))) (let ((jc34c6@b (jc2f1e@label->binding jc34c4@lab jc34b7@r))) (let ((jc34c8@type (jc2f22@binding-type jc34c6@b))) (begin (if (not jc34c4@lab) (jc2f26@raise-unbound-error jc34c2@id) (void)) (if (not (and (eq? jc34c8@type '$rtd) (list? (jc2f24@binding-value jc34c6@b)))) (jc31ed@syntax-violation '#f '"not a record type" jc34b6@e) (void)) (jc312f@chi-expr (car (jc2f24@binding-value jc34c6@b)) jc34b7@r jc34b8@mr)))))) jc34be@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc34bc@t)))))) (set! jc4be9@jc30ad@record-type-descriptor-transformer jc30ad@record-type-descriptor-transformer) (set! jc30af@record-constructor-descriptor-transformer (lambda (jc34ca@e jc34cb@r jc34cc@mr) (let ((jc34d0@t jc34ca@e)) (let ((jc34d2@ls/false (jc310d@syntax-dispatch jc34d0@t '(_ any)))) (if (and jc34d2@ls/false (apply (lambda (jc34d4@id) (jc2f06@id? jc34d4@id)) jc34d2@ls/false)) (apply (lambda (jc34d6@id) (let ((jc34d8@lab (jc2f1c@id->label jc34d6@id))) (let ((jc34da@b (jc2f1e@label->binding jc34d8@lab jc34cb@r))) (let ((jc34dc@type (jc2f22@binding-type jc34da@b))) (begin (if (not jc34d8@lab) (jc2f26@raise-unbound-error jc34d6@id) (void)) (if (not (and (eq? jc34dc@type '$rtd) (list? (jc2f24@binding-value jc34da@b)))) (jc31ed@syntax-violation '#f '"invalid type" jc34ca@e) (void)) (jc312f@chi-expr (cadr (jc2f24@binding-value jc34da@b)) jc34cb@r jc34cc@mr)))))) jc34d2@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc34d0@t)))))) (set! jc4bea@jc30af@record-constructor-descriptor-transformer jc30af@record-constructor-descriptor-transformer) (set! jc30b1@when-macro (lambda (jc34de@e) (let ((jc34e0@t jc34de@e)) (let ((jc34e2@ls/false (jc310d@syntax-dispatch jc34e0@t '(_ any any . each-any)))) (if jc34e2@ls/false (apply (lambda (jc34e4@test jc34e5@e jc34e6@e*) (jc30c3@bless (list 'if jc34e4@test (cons 'begin (cons jc34e5@e jc34e6@e*))))) jc34e2@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc34e0@t)))))) (set! jc4beb@jc30b1@when-macro jc30b1@when-macro) (set! jc30b3@unless-macro (lambda (jc34ea@e) (let ((jc34ec@t jc34ea@e)) (let ((jc34ee@ls/false (jc310d@syntax-dispatch jc34ec@t '(_ any any . each-any)))) (if jc34ee@ls/false (apply (lambda (jc34f0@test jc34f1@e jc34f2@e*) (jc30c3@bless (list 'if (list 'not jc34f0@test) (cons 'begin (cons jc34f1@e jc34f2@e*))))) jc34ee@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc34ec@t)))))) (set! jc4bec@jc30b3@unless-macro jc30b3@unless-macro) (set! jc30b5@if-transformer (lambda (jc34f6@e jc34f7@r jc34f8@mr) (let ((jc34fc@t jc34f6@e)) (let ((jc34fe@ls/false (jc310d@syntax-dispatch jc34fc@t '(_ any any any)))) (if jc34fe@ls/false (apply (lambda (jc3500@e0 jc3501@e1 jc3502@e2) (list 'if (jc312f@chi-expr jc3500@e0 jc34f7@r jc34f8@mr) (jc312f@chi-expr jc3501@e1 jc34f7@r jc34f8@mr) (jc312f@chi-expr jc3502@e2 jc34f7@r jc34f8@mr))) jc34fe@ls/false) (let ((jc3506@t jc34fc@t)) (let ((jc3508@ls/false (jc310d@syntax-dispatch jc3506@t '(_ any any)))) (if jc3508@ls/false (apply (lambda (jc350a@e0 jc350b@e1) (list 'if (jc312f@chi-expr jc350a@e0 jc34f7@r jc34f8@mr) (jc312f@chi-expr jc350b@e1 jc34f7@r jc34f8@mr) (jc2e6c@jc2dcd@build-void))) jc3508@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3506@t))))))))) (set! jc4bed@jc30b5@if-transformer jc30b5@if-transformer) (set! jc30b7@and-transformer (lambda (jc350e@e jc350f@r jc3510@mr) (let ((jc3514@t jc350e@e)) (let ((jc3516@ls/false (jc310d@syntax-dispatch jc3514@t '(_ . each-any)))) (if jc3516@ls/false (apply (lambda (jc3518@e*) (cons 'and (jc312b@chi-expr* jc3518@e* jc350f@r jc3510@mr))) jc3516@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3514@t)))))) (set! jc4bee@jc30b7@and-transformer jc30b7@and-transformer) (set! jc30b9@or-transformer (lambda (jc351a@e jc351b@r jc351c@mr) (let ((jc3520@t jc351a@e)) (let ((jc3522@ls/false (jc310d@syntax-dispatch jc3520@t '(_ . each-any)))) (if jc3522@ls/false (apply (lambda (jc3524@e*) (cons 'or (jc312b@chi-expr* jc3524@e* jc351b@r jc351c@mr))) jc3522@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3520@t)))))) (set! jc4bef@jc30b9@or-transformer jc30b9@or-transformer) (set! jc30bb@case-macro (lambda (jc3526@e) (letrec* ((jc3529@build-last (lambda (jc3550@cls) (let ((jc3552@t jc3550@cls)) (let ((jc3554@ls/false (jc310d@syntax-dispatch jc3552@t '(#(scheme-id else) any . each-any)))) (if jc3554@ls/false (apply (lambda (jc3556@e jc3557@e*) (cons 'begin (cons jc3556@e jc3557@e*))) jc3554@ls/false) (let ((jc355a@t jc3552@t)) (let ((jc355c@ls/false (jc310d@syntax-dispatch jc355a@t '_))) (if jc355c@ls/false (apply (lambda () (jc352b@build-one jc3550@cls '(if #f #f))) jc355c@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc355a@t))))))))) (jc352b@build-one (lambda (jc3542@cls jc3543@k) (let ((jc3546@t jc3542@cls)) (let ((jc3548@ls/false (jc310d@syntax-dispatch jc3546@t '(each-any any . each-any)))) (if jc3548@ls/false (apply (lambda (jc354a@d* jc354b@e jc354c@e*) (list 'if (list 'memv 't (list 'quote jc354a@d*)) (cons 'begin (cons jc354b@e jc354c@e*)) jc3543@k)) jc3548@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3546@t))))))) (let ((jc352c@t jc3526@e)) (let ((jc352e@ls/false (jc310d@syntax-dispatch jc352c@t '(_ any)))) (if jc352e@ls/false (apply (lambda (jc3530@expr) (jc30c3@bless (cons 'let (cons (list (list 't jc3530@expr)) '((if #f #f)))))) jc352e@ls/false) (let ((jc3532@t jc352c@t)) (let ((jc3534@ls/false (jc310d@syntax-dispatch jc3532@t '(_ any any . each-any)))) (if jc3534@ls/false (apply (lambda (jc3536@expr jc3537@cls jc3538@cls*) (jc30c3@bless (list 'let (list (list 't jc3536@expr)) (let jc3540@f ((jc353c@cls jc3537@cls) (jc353d@cls* jc3538@cls*)) (if (null? jc353d@cls*) (jc3529@build-last jc353c@cls) (jc352b@build-one jc353c@cls (jc3540@f (car jc353d@cls*) (cdr jc353d@cls*)))))))) jc3534@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3532@t)))))))))) (set! jc4bf0@jc30bb@case-macro jc30bb@case-macro) (set! jc30bd@quote-transformer (lambda (jc355e@e jc355f@r jc3560@mr) (let ((jc3564@t jc355e@e)) (let ((jc3566@ls/false (jc310d@syntax-dispatch jc3564@t '(_ any)))) (if jc3566@ls/false (apply (lambda (jc3568@datum) (list 'quote (jc2f1a@stx->datum jc3568@datum))) jc3566@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3564@t)))))) (set! jc4bf1@jc30bd@quote-transformer jc30bd@quote-transformer) (set! jc30bf@case-lambda-transformer (lambda (jc356a@e jc356b@r jc356c@mr) (let ((jc3570@t jc356a@e)) (let ((jc3572@ls/false (jc310d@syntax-dispatch jc3570@t '(_ . #(each (any any . each-any)))))) (if jc3572@ls/false (apply (lambda (jc3574@fmls* jc3575@b* jc3576@b**) (call-with-values (lambda () (jc3137@chi-lambda-clause* jc356a@e jc3574@fmls* (map cons jc3575@b* jc3576@b**) jc356b@r jc356c@mr)) (lambda (jc357e@jc357b jc357f@jc357d) (let ((jc3582@body* jc357f@jc357d) (jc3583@fmls* jc357e@jc357b)) (jc2e6a@jc2d9d@build-case-lambda '#f jc3583@fmls* jc3582@body*))))) jc3572@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3570@t)))))) (set! jc4bf2@jc30bf@case-lambda-transformer jc30bf@case-lambda-transformer) (set! jc30c1@lambda-transformer (lambda (jc3586@e jc3587@r jc3588@mr) (let ((jc358c@t jc3586@e)) (let ((jc358e@ls/false (jc310d@syntax-dispatch jc358c@t '(_ any any . each-any)))) (if jc358e@ls/false (apply (lambda (jc3590@fmls jc3591@b jc3592@b*) (call-with-values (lambda () (jc3135@chi-lambda-clause jc3586@e jc3590@fmls (cons jc3591@b jc3592@b*) jc3587@r jc3588@mr)) (lambda (jc359a@jc3597 jc359b@jc3599) (let ((jc359e@body jc359b@jc3599) (jc359f@fmls jc359a@jc3597)) (jc2e69@jc2d9b@build-lambda '#f jc359f@fmls jc359e@body))))) jc358e@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc358c@t)))))) (set! jc4bf3@jc30c1@lambda-transformer jc30c1@lambda-transformer) (set! jc30c3@bless (lambda (jc35a2@x) (jc2eee@mkstx (let jc35a6@f ((jc35a4@x jc35a2@x)) (if (jc2ed2@stx? jc35a4@x) jc35a4@x (if (pair? jc35a4@x) (cons (jc35a6@f (car jc35a4@x)) (jc35a6@f (cdr jc35a4@x))) (if (symbol? jc35a4@x) (jc3095@scheme-stx jc35a4@x) (if (vector? jc35a4@x) (vector-map jc35a6@f jc35a4@x) jc35a4@x))))) '() '() '()))) (set! jc4bf4@jc30c3@bless jc30c3@bless) (set! jc30c5@with-syntax-macro (lambda (jc35a8@e) (let ((jc35aa@t jc35a8@e)) (let ((jc35ac@ls/false (jc310d@syntax-dispatch jc35aa@t '(_ #(each (any any)) any . each-any)))) (if jc35ac@ls/false (apply (lambda (jc35ae@pat* jc35af@expr* jc35b0@b jc35b1@b*) (let ((jc35b6@idn* (let jc35ba@f ((jc35b8@pat* jc35ae@pat*)) (if (null? jc35b8@pat*) '() (call-with-values (lambda () (jc310b@convert-pattern (car jc35b8@pat*) '())) (lambda (jc35c0@jc35bd jc35c1@jc35bf) (let ((jc35c4@idn* jc35c1@jc35bf) (jc35c5@pat jc35c0@jc35bd)) (append jc35c4@idn* (jc35ba@f (cdr jc35b8@pat*)))))))))) (begin (jc3133@verify-formals (map car jc35b6@idn*) jc35a8@e) (let ((jc35c8@t* (jc31db@generate-temporaries jc35af@expr*))) (jc30c3@bless (list 'let (map list jc35c8@t* jc35af@expr*) (let jc35ce@f ((jc35ca@pat* jc35ae@pat*) (jc35cb@t* jc35c8@t*)) (if (null? jc35ca@pat*) (cons 'let (cons '() (cons jc35b0@b jc35b1@b*))) (list 'syntax-case (car jc35cb@t*) '() (list (car jc35ca@pat*) (jc35ce@f (cdr jc35ca@pat*) (cdr jc35cb@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car jc35ca@pat*)) (car jc35cb@t*)))))))))))) jc35ac@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc35aa@t)))))) (set! jc4bf5@jc30c5@with-syntax-macro jc30c5@with-syntax-macro) (set! jc30c7@invalid-fmls-error (lambda (jc35d0@stx jc35d1@fmls) (let ((jc35d4@t jc35d1@fmls)) (let ((jc35d6@ls/false (jc310d@syntax-dispatch jc35d4@t '#(each+ any () any)))) (if jc35d6@ls/false (apply (lambda (jc35d8@id* jc35d9@last) (let jc35de@f ((jc35dc@id* (if (jc2f06@id? jc35d9@last) (cons jc35d9@last jc35d8@id*) (if (jc2efc@syntax-null? jc35d9@last) jc35d8@id* (jc31ed@syntax-violation '#f '"not an identifier" jc35d0@stx jc35d9@last))))) (if (null? jc35dc@id*) (values) (if (not (jc2f06@id? (car jc35dc@id*))) (jc31ed@syntax-violation '#f '"not an identifier" jc35d0@stx (car jc35dc@id*)) (begin (jc35de@f (cdr jc35dc@id*)) (if (jc2f12@bound-id-member? (car jc35dc@id*) (cdr jc35dc@id*)) (jc31ed@syntax-violation '#f '"duplicate binding" jc35d0@stx (car jc35dc@id*)) (void))))))) jc35d6@ls/false) (let ((jc35e0@t jc35d4@t)) (let ((jc35e2@ls/false (jc310d@syntax-dispatch jc35e0@t '_))) (if jc35e2@ls/false (apply (lambda () (jc31ed@syntax-violation '#f '"malformed binding form" jc35d0@stx jc35d1@fmls)) jc35e2@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc35e0@t))))))))) (set! jc4bf6@jc30c7@invalid-fmls-error jc30c7@invalid-fmls-error) (set! jc30c9@let-macro (lambda (jc35e4@stx) (let ((jc35e6@t jc35e4@stx)) (let ((jc35e8@ls/false (jc310d@syntax-dispatch jc35e6@t '(_ #(each (any any)) any . each-any)))) (if jc35e8@ls/false (apply (lambda (jc35ea@lhs* jc35eb@rhs* jc35ec@b jc35ed@b*) (if (jc2f0e@valid-bound-ids? jc35ea@lhs*) (jc30c3@bless (cons (cons 'lambda (cons jc35ea@lhs* (cons jc35ec@b jc35ed@b*))) jc35eb@rhs*)) (jc30c7@invalid-fmls-error jc35e4@stx jc35ea@lhs*))) jc35e8@ls/false) (let ((jc35f2@t jc35e6@t)) (let ((jc35f4@ls/false (jc310d@syntax-dispatch jc35f2@t '(_ any #(each (any any)) any . each-any)))) (if (and jc35f4@ls/false (apply (lambda (jc35f6@f jc35f7@lhs* jc35f8@rhs* jc35f9@b jc35fa@b*) (jc2f06@id? jc35f6@f)) jc35f4@ls/false)) (apply (lambda (jc3600@f jc3601@lhs* jc3602@rhs* jc3603@b jc3604@b*) (if (jc2f0e@valid-bound-ids? jc3601@lhs*) (jc30c3@bless (cons (list 'letrec (list (list jc3600@f (cons 'lambda (cons jc3601@lhs* (cons jc3603@b jc3604@b*))))) jc3600@f) jc3602@rhs*)) (jc30c7@invalid-fmls-error jc35e4@stx jc3601@lhs*))) jc35f4@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc35f2@t))))))))) (set! jc4bf7@jc30c9@let-macro jc30c9@let-macro) (set! jc30cb@let-values-macro (lambda (jc360a@stx) (letrec* ((jc360d@rename (lambda (jc3672@x jc3673@old* jc3674@new*) (begin (if (not (jc2f06@id? jc3672@x)) (jc31ed@syntax-violation '#f '"not an indentifier" jc360a@stx jc3672@x) (void)) (if (jc2f12@bound-id-member? jc3672@x jc3673@old*) (jc31ed@syntax-violation '#f '"duplicate binding" jc360a@stx jc3672@x) (void)) (let ((jc3678@y (gensym (jc31f3@syntax->datum jc3672@x)))) (values jc3678@y (cons jc3672@x jc3673@old*) (cons jc3678@y jc3674@new*)))))) (jc360f@rename* (lambda (jc3660@x* jc3661@old* jc3662@new*) (if (null? jc3660@x*) (values '() jc3661@old* jc3662@new*) (call-with-values (lambda () (jc360d@rename (car jc3660@x*) jc3661@old* jc3662@new*)) (lambda (jc3666@x jc3667@old* jc3668@new*) (call-with-values (lambda () (jc360f@rename* (cdr jc3660@x*) jc3667@old* jc3668@new*)) (lambda (jc366c@x* jc366d@old* jc366e@new*) (values (cons jc3666@x jc366c@x*) jc366d@old* jc366e@new*))))))))) (let ((jc3610@t jc360a@stx)) (let ((jc3612@ls/false (jc310d@syntax-dispatch jc3610@t '(_ () any . each-any)))) (if jc3612@ls/false (apply (lambda (jc3614@b jc3615@b*) (cons* (jc30c3@bless 'let) '() jc3614@b jc3615@b*)) jc3612@ls/false) (let ((jc3618@t jc3610@t)) (let ((jc361a@ls/false (jc310d@syntax-dispatch jc3618@t '(_ #(each (any any)) any . each-any)))) (if jc361a@ls/false (apply (lambda (jc361c@lhs* jc361d@rhs* jc361e@b jc361f@b*) (jc30c3@bless (let jc362c@f ((jc3624@lhs* jc361c@lhs*) (jc3625@rhs* jc361d@rhs*) (jc3626@old* '()) (jc3627@new* '())) (if (null? jc3624@lhs*) (cons 'let (cons (map list jc3626@old* jc3627@new*) (cons jc361e@b jc361f@b*))) (let ((jc362e@t (car jc3624@lhs*))) (let ((jc3630@ls/false (jc310d@syntax-dispatch jc362e@t 'each-any))) (if jc3630@ls/false (apply (lambda (jc3632@x*) (call-with-values (lambda () (jc360f@rename* jc3632@x* jc3626@old* jc3627@new*)) (lambda (jc363a@jc3635 jc363b@jc3637 jc363c@jc3639) (let ((jc3640@new* jc363c@jc3639) (jc3641@old* jc363b@jc3637) (jc3642@y* jc363a@jc3635)) (list 'call-with-values (list 'lambda '() (car jc3625@rhs*)) (list 'lambda jc3642@y* (jc362c@f (cdr jc3624@lhs*) (cdr jc3625@rhs*) jc3641@old* jc3640@new*))))))) jc3630@ls/false) (let ((jc3646@t jc362e@t)) (let ((jc3648@ls/false (jc310d@syntax-dispatch jc3646@t '#(each+ any () any)))) (if jc3648@ls/false (apply (lambda (jc364a@x* jc364b@x) (call-with-values (lambda () (jc360d@rename jc364b@x jc3626@old* jc3627@new*)) (lambda (jc364e@y jc364f@old* jc3650@new*) (call-with-values (lambda () (jc360f@rename* jc364a@x* jc364f@old* jc3650@new*)) (lambda (jc3654@y* jc3655@old* jc3656@new*) (list 'call-with-values (list 'lambda '() (car jc3625@rhs*)) (list 'lambda (append jc3654@y* jc364e@y) (jc362c@f (cdr jc3624@lhs*) (cdr jc3625@rhs*) jc3655@old* jc3656@new*)))))))) jc3648@ls/false) (let ((jc365a@t jc3646@t)) (let ((jc365c@ls/false (jc310d@syntax-dispatch jc365a@t 'any))) (if jc365c@ls/false (apply (lambda (jc365e@others) (jc31ed@syntax-violation '#f '"malformed bindings" jc360a@stx jc365e@others)) jc365c@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc365a@t)))))))))))))) jc361a@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3618@t)))))))))) (set! jc4bf8@jc30cb@let-values-macro jc30cb@let-values-macro) (set! jc30cd@let*-values-macro (lambda (jc367a@stx) (letrec* ((jc367d@check (lambda (jc36ac@x*) (if (not (null? jc36ac@x*)) (let ((jc36ae@x (car jc36ac@x*))) (begin (if (not (jc2f06@id? jc36ae@x)) (jc31ed@syntax-violation '#f '"not an identifier" jc367a@stx jc36ae@x) (void)) (jc367d@check (cdr jc36ac@x*)) (if (jc2f12@bound-id-member? jc36ae@x (cdr jc36ac@x*)) (jc31ed@syntax-violation '#f '"duplicate identifier" jc367a@stx jc36ae@x) (void)))) (void))))) (let ((jc367e@t jc367a@stx)) (let ((jc3680@ls/false (jc310d@syntax-dispatch jc367e@t '(_ () any . each-any)))) (if jc3680@ls/false (apply (lambda (jc3682@b jc3683@b*) (cons* (jc30c3@bless 'let) '() jc3682@b jc3683@b*)) jc3680@ls/false) (let ((jc3686@t jc367e@t)) (let ((jc3688@ls/false (jc310d@syntax-dispatch jc3686@t '(_ #(each (any any)) any . each-any)))) (if jc3688@ls/false (apply (lambda (jc368a@lhs* jc368b@rhs* jc368c@b jc368d@b*) (jc30c3@bless (let jc3696@f ((jc3692@lhs* jc368a@lhs*) (jc3693@rhs* jc368b@rhs*)) (if (null? jc3692@lhs*) (cons 'begin (cons jc368c@b jc368d@b*)) (let ((jc3698@t (car jc3692@lhs*))) (let ((jc369a@ls/false (jc310d@syntax-dispatch jc3698@t 'each-any))) (if jc369a@ls/false (apply (lambda (jc369c@x*) (begin (jc367d@check jc369c@x*) (list 'call-with-values (list 'lambda '() (car jc3693@rhs*)) (list 'lambda jc369c@x* (jc3696@f (cdr jc3692@lhs*) (cdr jc3693@rhs*)))))) jc369a@ls/false) (let ((jc369e@t jc3698@t)) (let ((jc36a0@ls/false (jc310d@syntax-dispatch jc369e@t '#(each+ any () any)))) (if jc36a0@ls/false (apply (lambda (jc36a2@x* jc36a3@x) (begin (jc367d@check (cons jc36a3@x jc36a2@x*)) (list 'call-with-values (list 'lambda '() (car jc3693@rhs*)) (list 'lambda (append jc36a2@x* jc36a3@x) (jc3696@f (cdr jc3692@lhs*) (cdr jc3693@rhs*)))))) jc36a0@ls/false) (let ((jc36a6@t jc369e@t)) (let ((jc36a8@ls/false (jc310d@syntax-dispatch jc36a6@t 'any))) (if jc36a8@ls/false (apply (lambda (jc36aa@others) (jc31ed@syntax-violation '#f '"malformed bindings" jc367a@stx jc36aa@others)) jc36a8@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc36a6@t)))))))))))))) jc3688@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3686@t)))))))))) (set! jc4bf9@jc30cd@let*-values-macro jc30cd@let*-values-macro) (set! jc30cf@trace-lambda-macro (lambda (jc36b0@stx) (let ((jc36b2@t jc36b0@stx)) (let ((jc36b4@ls/false (jc310d@syntax-dispatch jc36b2@t '(_ any each-any any . each-any)))) (if jc36b4@ls/false (apply (lambda (jc36b6@who jc36b7@fmls jc36b8@b jc36b9@b*) (if (jc2f0e@valid-bound-ids? jc36b7@fmls) (jc30c3@bless (list 'make-traced-procedure (list 'quote jc36b6@who) (cons 'lambda (cons jc36b7@fmls (cons jc36b8@b jc36b9@b*))))) (jc30c7@invalid-fmls-error jc36b0@stx jc36b7@fmls))) jc36b4@ls/false) (let ((jc36be@t jc36b2@t)) (let ((jc36c0@ls/false (jc310d@syntax-dispatch jc36be@t '(_ any #(each+ any () any) any . each-any)))) (if jc36c0@ls/false (apply (lambda (jc36c2@who jc36c3@fmls jc36c4@last jc36c5@b jc36c6@b*) (if (jc2f0e@valid-bound-ids? (cons jc36c4@last jc36c3@fmls)) (jc30c3@bless (list 'make-traced-procedure (list 'quote jc36c2@who) (cons 'lambda (cons (append jc36c3@fmls jc36c4@last) (cons jc36c5@b jc36c6@b*))))) (jc30c7@invalid-fmls-error jc36b0@stx (append jc36c3@fmls jc36c4@last)))) jc36c0@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc36be@t))))))))) (set! jc4bfa@jc30cf@trace-lambda-macro jc30cf@trace-lambda-macro) (set! jc30d1@trace-define-macro (lambda (jc36cc@stx) (let ((jc36ce@t jc36cc@stx)) (let ((jc36d0@ls/false (jc310d@syntax-dispatch jc36ce@t '(_ (any . each-any) any . each-any)))) (if jc36d0@ls/false (apply (lambda (jc36d2@who jc36d3@fmls jc36d4@b jc36d5@b*) (if (jc2f0e@valid-bound-ids? jc36d3@fmls) (jc30c3@bless (list 'define jc36d2@who (list 'make-traced-procedure (list 'quote jc36d2@who) (cons 'lambda (cons jc36d3@fmls (cons jc36d4@b jc36d5@b*)))))) (jc30c7@invalid-fmls-error jc36cc@stx jc36d3@fmls))) jc36d0@ls/false) (let ((jc36da@t jc36ce@t)) (let ((jc36dc@ls/false (jc310d@syntax-dispatch jc36da@t '(_ (any . #(each+ any () any)) any . each-any)))) (if jc36dc@ls/false (apply (lambda (jc36de@who jc36df@fmls jc36e0@last jc36e1@b jc36e2@b*) (if (jc2f0e@valid-bound-ids? (cons jc36e0@last jc36df@fmls)) (jc30c3@bless (list 'define jc36de@who (list 'make-traced-procedure (list 'quote jc36de@who) (cons 'lambda (cons (append jc36df@fmls jc36e0@last) (cons jc36e1@b jc36e2@b*)))))) (jc30c7@invalid-fmls-error jc36cc@stx (append jc36df@fmls jc36e0@last)))) jc36dc@ls/false) (let ((jc36e8@t jc36da@t)) (let ((jc36ea@ls/false (jc310d@syntax-dispatch jc36e8@t '(_ any any)))) (if jc36ea@ls/false (apply (lambda (jc36ec@who jc36ed@expr) (if (jc2f06@id? jc36ec@who) (jc30c3@bless (list 'define jc36ec@who (list 'let (list (list 'v jc36ed@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote jc36ec@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (jc31ed@syntax-violation '#f '"invalid name" jc36cc@stx))) jc36ea@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc36e8@t)))))))))))) (set! jc4bfb@jc30d1@trace-define-macro jc30d1@trace-define-macro) (set! jc30d3@trace-define-syntax-macro (lambda (jc36f0@stx) (let ((jc36f2@t jc36f0@stx)) (let ((jc36f4@ls/false (jc310d@syntax-dispatch jc36f2@t '(_ any any)))) (if jc36f4@ls/false (apply (lambda (jc36f6@who jc36f7@expr) (if (jc2f06@id? jc36f6@who) (jc30c3@bless (list 'define-syntax jc36f6@who (list 'make-traced-macro (list 'quote jc36f6@who) jc36f7@expr))) (jc31ed@syntax-violation '#f '"invalid name" jc36f0@stx))) jc36f4@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc36f2@t)))))) (set! jc4bfc@jc30d3@trace-define-syntax-macro jc30d3@trace-define-syntax-macro) (set! jc30d5@trace-let/rec-syntax (lambda (jc36fa@who) (lambda (jc36fc@stx) (let ((jc36fe@t jc36fc@stx)) (let ((jc3700@ls/false (jc310d@syntax-dispatch jc36fe@t '(_ #(each (any any)) any . each-any)))) (if jc3700@ls/false (apply (lambda (jc3702@lhs* jc3703@rhs* jc3704@b jc3705@b*) (if (jc2f0e@valid-bound-ids? jc3702@lhs*) (let ((jc370a@rhs* (map (lambda (jc370c@lhs jc370d@rhs) (list 'make-traced-macro (list 'quote jc370c@lhs) jc370d@rhs)) jc3702@lhs* jc3703@rhs*))) (jc30c3@bless (cons jc36fa@who (cons (map list jc3702@lhs* jc370a@rhs*) (cons jc3704@b jc3705@b*))))) (jc30c7@invalid-fmls-error jc36fc@stx jc3702@lhs*))) jc3700@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc36fe@t))))))) (set! jc4bfd@jc30d5@trace-let/rec-syntax jc30d5@trace-let/rec-syntax) (set! jc30d7@trace-let-syntax-macro (jc30d5@trace-let/rec-syntax 'let-syntax)) (set! jc4bfe@jc30d7@trace-let-syntax-macro jc30d7@trace-let-syntax-macro) (set! jc30d9@trace-letrec-syntax-macro (jc30d5@trace-let/rec-syntax 'letrec-syntax)) (set! jc4bff@jc30d9@trace-letrec-syntax-macro jc30d9@trace-letrec-syntax-macro) (set! jc30db@guard-macro (lambda (jc3710@x) (letrec* ((jc3713@gen-clauses (lambda (jc372a@con jc372b@outerk jc372c@clause*) (letrec* ((jc3731@f (lambda (jc376a@x jc376b@k) (let ((jc376e@t jc376a@x)) (let ((jc3770@ls/false (jc310d@syntax-dispatch jc376e@t '(any #(scheme-id =>) any)))) (if jc3770@ls/false (apply (lambda (jc3772@e jc3773@p) (let ((jc3776@t (gensym))) (list 'let (list (list jc3776@t jc3772@e)) (list 'if jc3776@t (list jc3773@p jc3776@t) jc376b@k)))) jc3770@ls/false) (let ((jc3778@t jc376e@t)) (let ((jc377a@ls/false (jc310d@syntax-dispatch jc3778@t '(any)))) (if jc377a@ls/false (apply (lambda (jc377c@e) (let ((jc377e@t (gensym))) (list 'let (list (list jc377e@t jc377c@e)) (list 'if jc377e@t jc377e@t jc376b@k)))) jc377a@ls/false) (let ((jc3780@t jc3778@t)) (let ((jc3782@ls/false (jc310d@syntax-dispatch jc3780@t '(any any . each-any)))) (if jc3782@ls/false (apply (lambda (jc3784@e jc3785@v jc3786@v*) (list 'if jc3784@e (cons 'begin (cons jc3785@v jc3786@v*)) jc376b@k)) jc3782@ls/false) (let ((jc378a@t jc3780@t)) (let ((jc378c@ls/false (jc310d@syntax-dispatch jc378a@t '_))) (if jc378c@ls/false (apply (lambda () (jc31ed@syntax-violation '#f '"invalid guard clause" jc376a@x)) jc378c@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc378a@t))))))))))))))) (jc3733@f* (lambda (jc3740@x*) (let ((jc3742@t jc3740@x*)) (let ((jc3744@ls/false (jc310d@syntax-dispatch jc3742@t '()))) (if jc3744@ls/false (apply (lambda () (let ((jc3746@g (gensym))) (values (list jc3746@g (list 'lambda '() (list 'raise-continuable jc372a@con))) jc3746@g))) jc3744@ls/false) (let ((jc3748@t jc3742@t)) (let ((jc374a@ls/false (jc310d@syntax-dispatch jc3748@t '((#(scheme-id else) any . each-any))))) (if jc374a@ls/false (apply (lambda (jc374c@e jc374d@e*) (values (cons 'begin (cons jc374c@e jc374d@e*)) '#f)) jc374a@ls/false) (let ((jc3750@t jc3748@t)) (let ((jc3752@ls/false (jc310d@syntax-dispatch jc3750@t '(any . any)))) (if jc3752@ls/false (apply (lambda (jc3754@cls jc3755@cls*) (call-with-values (lambda () (jc3733@f* jc3755@cls*)) (lambda (jc375c@jc3759 jc375d@jc375b) (let ((jc3760@g jc375d@jc375b) (jc3761@e jc375c@jc3759)) (values (jc3731@f jc3754@cls jc3761@e) jc3760@g))))) jc3752@ls/false) (let ((jc3764@t jc3750@t)) (let ((jc3766@ls/false (jc310d@syntax-dispatch jc3764@t 'any))) (if jc3766@ls/false (apply (lambda (jc3768@others) (jc31ed@syntax-violation '#f '"invalid guard clause" jc3768@others)) jc3766@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3764@t)))))))))))))))) (call-with-values (lambda () (jc3733@f* jc372c@clause*)) (lambda (jc3738@jc3735 jc3739@jc3737) (let ((jc373c@raisek jc3739@jc3737) (jc373d@code jc3738@jc3735)) (if jc373c@raisek (list (list 'call/cc (list 'lambda (list jc373c@raisek) (list jc372b@outerk (list 'lambda '() jc373d@code))))) (list jc372b@outerk (list 'lambda '() jc373d@code)))))))))) (let ((jc3714@t jc3710@x)) (let ((jc3716@ls/false (jc310d@syntax-dispatch jc3714@t '(_ (any . each-any) any . each-any)))) (if (and jc3716@ls/false (apply (lambda (jc3718@con jc3719@clause* jc371a@b jc371b@b*) (jc2f06@id? jc3718@con)) jc3716@ls/false)) (apply (lambda (jc3720@con jc3721@clause* jc3722@b jc3723@b*) (let ((jc3728@outerk (gensym))) (jc30c3@bless (list (list 'call/cc (list 'lambda (list jc3728@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list jc3720@con) (jc3713@gen-clauses jc3720@con jc3728@outerk jc3721@clause*)) (cons 'lambda (cons '() (cons jc3722@b jc3723@b*))))))))))) jc3716@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3714@t))))))) (set! jc4c00@jc30db@guard-macro jc30db@guard-macro) (set! jc30dd@define-enumeration-macro (lambda (jc378e@stx) (letrec* ((jc3791@set? (lambda (jc37aa@x) (or (null? jc37aa@x) (and (not (memq (car jc37aa@x) (cdr jc37aa@x))) (jc3791@set? (cdr jc37aa@x)))))) (jc3793@remove-dups (lambda (jc37a8@ls) (if (null? jc37a8@ls) '() (cons (car jc37a8@ls) (jc3793@remove-dups (remq (car jc37a8@ls) (cdr jc37a8@ls)))))))) (let ((jc3794@t jc378e@stx)) (let ((jc3796@ls/false (jc310d@syntax-dispatch jc3794@t '(_ any each-any any)))) (if (and jc3796@ls/false (apply (lambda (jc3798@name jc3799@id* jc379a@maker) (and (jc2f06@id? jc3798@name) (jc2f06@id? jc379a@maker) (for-all jc2f06@id? jc3799@id*))) jc3796@ls/false)) (apply (lambda (jc379e@name jc379f@id* jc37a0@maker) (let ((jc37a4@name* (jc3793@remove-dups (jc31f3@syntax->datum jc379f@id*))) (jc37a5@mk (gensym))) (jc30c3@bless (list 'begin (list 'define jc37a5@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote jc37a4@name*)))) (list 'define-syntax jc379e@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote jc37a4@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote jc379e@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax jc37a0@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote jc37a0@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote jc37a4@name*)) (cons 'syntax-violation (cons (list 'quote jc37a0@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons jc37a5@mk '('(n* ...))))))))))))) jc3796@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3794@t))))))) (set! jc4c01@jc30dd@define-enumeration-macro jc30dd@define-enumeration-macro) (set! jc30df@time-macro (lambda (jc37ac@stx) (let ((jc37ae@t jc37ac@stx)) (let ((jc37b0@ls/false (jc310d@syntax-dispatch jc37ae@t '(_ any)))) (if jc37b0@ls/false (apply (lambda (jc37b2@expr) (jc30c3@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() jc37b2@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) jc37b0@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc37ae@t)))))) (set! jc4c02@jc30df@time-macro jc30df@time-macro) (set! jc30e1@delay-macro (lambda (jc37b4@stx) (let ((jc37b6@t jc37b4@stx)) (let ((jc37b8@ls/false (jc310d@syntax-dispatch jc37b6@t '(_ any)))) (if jc37b8@ls/false (apply (lambda (jc37ba@expr) (jc30c3@bless (list 'make-promise (list 'lambda '() jc37ba@expr)))) jc37b8@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc37b6@t)))))) (set! jc4c03@jc30e1@delay-macro jc30e1@delay-macro) (set! jc30e3@assert-macro (lambda (jc37bc@stx) (let ((jc37be@t jc37bc@stx)) (let ((jc37c0@ls/false (jc310d@syntax-dispatch jc37be@t '(_ any)))) (if jc37c0@ls/false (apply (lambda (jc37c2@expr) (let ((jc37c4@pos (or (jc31e5@expression-position jc37bc@stx) (jc31e5@expression-position jc37c2@expr)))) (jc30c3@bless (list 'let (list (list 'x jc37c2@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote jc37c2@expr) (list 'quote jc37c4@pos))))))) jc37c0@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc37be@t)))))) (set! jc4c04@jc30e3@assert-macro jc30e3@assert-macro) (set! jc30e5@endianness-macro (lambda (jc37c6@stx) (let ((jc37c8@t jc37c6@stx)) (let ((jc37ca@ls/false (jc310d@syntax-dispatch jc37c8@t '(_ any)))) (if jc37ca@ls/false (apply (lambda (jc37cc@e) (let ((jc37ce@t (jc31f3@syntax->datum jc37cc@e))) (if (memv jc37ce@t '(little)) (jc30c3@bless ''little) (if (memv jc37ce@t '(big)) (jc30c3@bless ''big) (jc31ed@syntax-violation '#f '"endianness must be big or little" jc37c6@stx))))) jc37ca@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc37c8@t)))))) (set! jc4c05@jc30e5@endianness-macro jc30e5@endianness-macro) (set! jc30e7@identifier-syntax-macro (lambda (jc37d0@stx) (let ((jc37d2@t jc37d0@stx)) (let ((jc37d4@ls/false (jc310d@syntax-dispatch jc37d2@t '(_ any)))) (if jc37d4@ls/false (apply (lambda (jc37d6@expr) (jc30c3@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax jc37d6@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax jc37d6@expr) '((syntax (e* ...)))))))))) jc37d4@ls/false) (let ((jc37d8@t jc37d2@t)) (let ((jc37da@ls/false (jc310d@syntax-dispatch jc37d8@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and jc37da@ls/false (apply (lambda (jc37dc@id1 jc37dd@expr1 jc37de@id2 jc37df@expr2 jc37e0@expr3) (and (jc2f06@id? jc37dc@id1) (jc2f06@id? jc37de@id2) (jc2f06@id? jc37df@expr2))) jc37da@ls/false)) (apply (lambda (jc37e6@id1 jc37e7@expr1 jc37e8@id2 jc37e9@expr2 jc37ea@expr3) (jc30c3@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax jc37e7@expr1)) (list (list 'set! 'id jc37e9@expr2) (list 'syntax jc37ea@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons jc37e7@expr1 '(e* ...))))))))) jc37da@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc37d8@t))))))))) (set! jc4c06@jc30e7@identifier-syntax-macro jc30e7@identifier-syntax-macro) (set! jc30e9@do-macro (lambda (jc37f0@stx) (letrec* ((jc37f3@bind (lambda (jc380a@x) (let ((jc380c@t jc380a@x)) (let ((jc380e@ls/false (jc310d@syntax-dispatch jc380c@t '(any any)))) (if jc380e@ls/false (apply (lambda (jc3810@x jc3811@init) (list jc3810@x jc3811@init jc3810@x)) jc380e@ls/false) (let ((jc3814@t jc380c@t)) (let ((jc3816@ls/false (jc310d@syntax-dispatch jc3814@t '(any any any)))) (if jc3816@ls/false (apply (lambda (jc3818@x jc3819@init jc381a@step) (list jc3818@x jc3819@init jc381a@step)) jc3816@ls/false) (let ((jc381e@t jc3814@t)) (let ((jc3820@ls/false (jc310d@syntax-dispatch jc381e@t '_))) (if jc3820@ls/false (apply (lambda () (jc31ed@syntax-violation '#f '"invalid binding" jc37f0@stx)) jc3820@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc381e@t))))))))))))) (let ((jc37f4@t jc37f0@stx)) (let ((jc37f6@ls/false (jc310d@syntax-dispatch jc37f4@t '(_ each-any (any . each-any) . each-any)))) (if jc37f6@ls/false (apply (lambda (jc37f8@binding* jc37f9@test jc37fa@expr* jc37fb@command*) (let ((jc3800@t (map jc37f3@bind jc37f8@binding*))) (let ((jc3802@ls/false (jc310d@syntax-dispatch jc3800@t '#(each (any any any))))) (if jc3802@ls/false (apply (lambda (jc3804@x* jc3805@init* jc3806@step*) (if (jc2f0e@valid-bound-ids? jc3804@x*) (jc30c3@bless (list 'letrec (list (list 'loop (list 'lambda jc3804@x* (list 'if jc37f9@test (cons 'begin (cons '(if #f #f) jc37fa@expr*)) (cons 'begin (append jc37fb@command* (list (cons 'loop jc3806@step*)))))))) (cons 'loop jc3805@init*))) (jc31ed@syntax-violation '#f '"invalid bindings" jc37f0@stx))) jc3802@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3800@t))))) jc37f6@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc37f4@t))))))) (set! jc4c07@jc30e9@do-macro jc30e9@do-macro) (set! jc30eb@let*-macro (lambda (jc3822@stx) (let ((jc3824@t jc3822@stx)) (let ((jc3826@ls/false (jc310d@syntax-dispatch jc3824@t '(_ #(each (any any)) any . each-any)))) (if (and jc3826@ls/false (apply (lambda (jc3828@lhs* jc3829@rhs* jc382a@b jc382b@b*) (for-all jc2f06@id? jc3828@lhs*)) jc3826@ls/false)) (apply (lambda (jc3830@lhs* jc3831@rhs* jc3832@b jc3833@b*) (jc30c3@bless (let jc383a@f ((jc3838@x* (map list jc3830@lhs* jc3831@rhs*))) (if (null? jc3838@x*) (cons 'let (cons '() (cons jc3832@b jc3833@b*))) (list 'let (list (car jc3838@x*)) (jc383a@f (cdr jc3838@x*))))))) jc3826@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3824@t)))))) (set! jc4c08@jc30eb@let*-macro jc30eb@let*-macro) (set! jc30ed@or-macro (lambda (jc383c@stx) (let ((jc383e@t jc383c@stx)) (let ((jc3840@ls/false (jc310d@syntax-dispatch jc383e@t '(_)))) (if jc3840@ls/false (apply (lambda () '#f) jc3840@ls/false) (let ((jc3842@t jc383e@t)) (let ((jc3844@ls/false (jc310d@syntax-dispatch jc3842@t '(_ any . each-any)))) (if jc3844@ls/false (apply (lambda (jc3846@e jc3847@e*) (jc30c3@bless (let jc384e@f ((jc384a@e jc3846@e) (jc384b@e* jc3847@e*)) (if (null? jc384b@e*) (list 'begin '#f jc384a@e) (list 'let (list (list 't jc384a@e)) (list 'if 't 't (jc384e@f (car jc384b@e*) (cdr jc384b@e*)))))))) jc3844@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3842@t))))))))) (set! jc4c09@jc30ed@or-macro jc30ed@or-macro) (set! jc30ef@and-macro (lambda (jc3850@stx) (let ((jc3852@t jc3850@stx)) (let ((jc3854@ls/false (jc310d@syntax-dispatch jc3852@t '(_)))) (if jc3854@ls/false (apply (lambda () '#t) jc3854@ls/false) (let ((jc3856@t jc3852@t)) (let ((jc3858@ls/false (jc310d@syntax-dispatch jc3856@t '(_ any . each-any)))) (if jc3858@ls/false (apply (lambda (jc385a@e jc385b@e*) (jc30c3@bless (let jc3862@f ((jc385e@e jc385a@e) (jc385f@e* jc385b@e*)) (if (null? jc385f@e*) (list 'begin '#f jc385e@e) (cons 'if (cons jc385e@e (cons (jc3862@f (car jc385f@e*) (cdr jc385f@e*)) '(#f)))))))) jc3858@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3856@t))))))))) (set! jc4c0a@jc30ef@and-macro jc30ef@and-macro) (set! jc30f1@cond-macro (lambda (jc3864@stx) (let ((jc3866@t jc3864@stx)) (let ((jc3868@ls/false (jc310d@syntax-dispatch jc3866@t '(_ any . each-any)))) (if jc3868@ls/false (apply (lambda (jc386a@cls jc386b@cls*) (jc30c3@bless (let jc3872@f ((jc386e@cls jc386a@cls) (jc386f@cls* jc386b@cls*)) (if (null? jc386f@cls*) (let ((jc3874@t jc386e@cls)) (let ((jc3876@ls/false (jc310d@syntax-dispatch jc3874@t '(#(scheme-id else) any . each-any)))) (if jc3876@ls/false (apply (lambda (jc3878@e jc3879@e*) (cons 'begin (cons jc3878@e jc3879@e*))) jc3876@ls/false) (let ((jc387c@t jc3874@t)) (let ((jc387e@ls/false (jc310d@syntax-dispatch jc387c@t '(any #(scheme-id =>) any)))) (if jc387e@ls/false (apply (lambda (jc3880@e jc3881@p) (list 'let (list (list 't jc3880@e)) (list 'if 't (cons jc3881@p '(t))))) jc387e@ls/false) (let ((jc3884@t jc387c@t)) (let ((jc3886@ls/false (jc310d@syntax-dispatch jc3884@t '(any)))) (if jc3886@ls/false (apply (lambda (jc3888@e) (cons 'or (cons jc3888@e '((if #f #f))))) jc3886@ls/false) (let ((jc388a@t jc3884@t)) (let ((jc388c@ls/false (jc310d@syntax-dispatch jc388a@t '(any . each-any)))) (if jc388c@ls/false (apply (lambda (jc388e@e jc388f@e*) (list 'if jc388e@e (cons 'begin jc388f@e*))) jc388c@ls/false) (let ((jc3892@t jc388a@t)) (let ((jc3894@ls/false (jc310d@syntax-dispatch jc3892@t '_))) (if jc3894@ls/false (apply (lambda () (jc31ed@syntax-violation '#f '"invalid last clause" jc3864@stx)) jc3894@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3892@t)))))))))))))))) (let ((jc3896@t jc386e@cls)) (let ((jc3898@ls/false (jc310d@syntax-dispatch jc3896@t '(#(scheme-id else) any . each-any)))) (if jc3898@ls/false (apply (lambda (jc389a@e jc389b@e*) (jc31ed@syntax-violation '#f '"incorrect position of keyword else" jc3864@stx)) jc3898@ls/false) (let ((jc389e@t jc3896@t)) (let ((jc38a0@ls/false (jc310d@syntax-dispatch jc389e@t '(any #(scheme-id =>) any)))) (if jc38a0@ls/false (apply (lambda (jc38a2@e jc38a3@p) (list 'let (list (list 't jc38a2@e)) (list 'if 't (cons jc38a3@p '(t)) (jc3872@f (car jc386f@cls*) (cdr jc386f@cls*))))) jc38a0@ls/false) (let ((jc38a6@t jc389e@t)) (let ((jc38a8@ls/false (jc310d@syntax-dispatch jc38a6@t '(any)))) (if jc38a8@ls/false (apply (lambda (jc38aa@e) (list 'or jc38aa@e (jc3872@f (car jc386f@cls*) (cdr jc386f@cls*)))) jc38a8@ls/false) (let ((jc38ac@t jc38a6@t)) (let ((jc38ae@ls/false (jc310d@syntax-dispatch jc38ac@t '(any . each-any)))) (if jc38ae@ls/false (apply (lambda (jc38b0@e jc38b1@e*) (list 'if jc38b0@e (cons 'begin jc38b1@e*) (jc3872@f (car jc386f@cls*) (cdr jc386f@cls*)))) jc38ae@ls/false) (let ((jc38b4@t jc38ac@t)) (let ((jc38b6@ls/false (jc310d@syntax-dispatch jc38b4@t '_))) (if jc38b6@ls/false (apply (lambda () (jc31ed@syntax-violation '#f '"invalid last clause" jc3864@stx)) jc38b6@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc38b4@t)))))))))))))))))))) jc3868@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3866@t)))))) (set! jc4c0b@jc30f1@cond-macro jc30f1@cond-macro) (set! jc30f3@do-include (lambda (jc38b8@stx jc38b9@id jc38ba@filename) (let ((jc38be@filename (jc2f1a@stx->datum jc38ba@filename))) (begin (if (not (and (string? jc38be@filename) (jc2f06@id? jc38b9@id))) (jc31ed@syntax-violation '#f '"invalid syntax" jc38b8@stx) (void)) (cons (jc30c3@bless 'begin) (with-input-from-file jc38be@filename (lambda () (let jc38c2@f ((jc38c0@ls '())) (let ((jc38c4@x (jc2a48@jc2918@read-annotated))) (if (eof-object? jc38c4@x) (reverse jc38c0@ls) (jc38c2@f (cons (jc2ee6@datum->stx jc38b9@id jc38c4@x) jc38c0@ls)))))))))))) (set! jc4c0c@jc30f3@do-include jc30f3@do-include) (set! jc30f5@include-macro (lambda (jc38c6@e) (let ((jc38c8@t jc38c6@e)) (let ((jc38ca@ls/false (jc310d@syntax-dispatch jc38c8@t '(any any)))) (if jc38ca@ls/false (apply (lambda (jc38cc@id jc38cd@filename) (jc30f3@do-include jc38c6@e jc38cc@id jc38cd@filename)) jc38ca@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc38c8@t)))))) (set! jc4c0d@jc30f5@include-macro jc30f5@include-macro) (set! jc30f7@include-into-macro (lambda (jc38d0@e) (let ((jc38d2@t jc38d0@e)) (let ((jc38d4@ls/false (jc310d@syntax-dispatch jc38d2@t '(_ any any)))) (if jc38d4@ls/false (apply (lambda (jc38d6@id jc38d7@filename) (jc30f3@do-include jc38d0@e jc38d6@id jc38d7@filename)) jc38d4@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc38d2@t)))))) (set! jc4c0e@jc30f7@include-into-macro jc30f7@include-into-macro) (set! jc30f9@syntax-rules-macro (lambda (jc38da@e) (let ((jc38dc@t jc38da@e)) (let ((jc38de@ls/false (jc310d@syntax-dispatch jc38dc@t '(_ each-any . #(each (any any)))))) (if jc38de@ls/false (apply (lambda (jc38e0@lits jc38e1@pat* jc38e2@tmp*) (begin (jc3113@verify-literals jc38e0@lits jc38da@e) (jc30c3@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons jc38e0@lits (map (lambda (jc38e6@pat jc38e7@tmp) (let ((jc38ea@t jc38e6@pat)) (let ((jc38ec@ls/false (jc310d@syntax-dispatch jc38ea@t '(_ . any)))) (if jc38ec@ls/false (apply (lambda (jc38ee@rest) (list (cons 'g jc38ee@rest) (list 'syntax jc38e7@tmp))) jc38ec@ls/false) (let ((jc38f0@t jc38ea@t)) (let ((jc38f2@ls/false (jc310d@syntax-dispatch jc38f0@t '_))) (if jc38f2@ls/false (apply (lambda () (jc31ed@syntax-violation '#f '"invalid syntax-rules pattern" jc38da@e jc38e6@pat)) jc38f2@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc38f0@t)))))))) jc38e1@pat* jc38e2@tmp*)))))))) jc38de@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc38dc@t)))))) (set! jc4c0f@jc30f9@syntax-rules-macro jc30f9@syntax-rules-macro) (set! jc30fb@quasiquote-macro (letrec* ((jc38f5@datum (lambda (jc39f6@x) (list (jc3095@scheme-stx 'quote) (jc2eee@mkstx jc39f6@x jc2e8a@top-mark* '() '())))) (jc3911@quasicons* (lambda (jc39ee@x jc39ef@y) (let jc39f4@f ((jc39f2@x jc39ee@x)) (if (null? jc39f2@x) jc39ef@y (jc3913@quasicons (car jc39f2@x) (jc39f4@f (cdr jc39f2@x))))))) (jc3913@quasicons (lambda (jc39c8@x jc39c9@y) (let ((jc39cc@t jc39c9@y)) (let ((jc39ce@ls/false (jc310d@syntax-dispatch jc39cc@t '(#(scheme-id quote) any)))) (if jc39ce@ls/false (apply (lambda (jc39d0@dy) (let ((jc39d2@t jc39c8@x)) (let ((jc39d4@ls/false (jc310d@syntax-dispatch jc39d2@t '(#(scheme-id quote) any)))) (if jc39d4@ls/false (apply (lambda (jc39d6@dx) (list (jc3095@scheme-stx 'quote) (cons jc39d6@dx jc39d0@dy))) jc39d4@ls/false) (let ((jc39d8@t jc39d2@t)) (let ((jc39da@ls/false (jc310d@syntax-dispatch jc39d8@t '_))) (if jc39da@ls/false (apply (lambda () (let ((jc39dc@t jc39d0@dy)) (let ((jc39de@ls/false (jc310d@syntax-dispatch jc39dc@t '()))) (if jc39de@ls/false (apply (lambda () (list (jc3095@scheme-stx 'list) jc39c8@x)) jc39de@ls/false) (let ((jc39e0@t jc39dc@t)) (let ((jc39e2@ls/false (jc310d@syntax-dispatch jc39e0@t '_))) (if jc39e2@ls/false (apply (lambda () (list (jc3095@scheme-stx 'cons) jc39c8@x jc39c9@y)) jc39e2@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc39e0@t)))))))) jc39da@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc39d8@t)))))))) jc39ce@ls/false) (let ((jc39e4@t jc39cc@t)) (let ((jc39e6@ls/false (jc310d@syntax-dispatch jc39e4@t '(#(scheme-id list) . each-any)))) (if jc39e6@ls/false (apply (lambda (jc39e8@stuff) (cons* (jc3095@scheme-stx 'list) jc39c8@x jc39e8@stuff)) jc39e6@ls/false) (let ((jc39ea@t jc39e4@t)) (let ((jc39ec@ls/false (jc310d@syntax-dispatch jc39ea@t '_))) (if jc39ec@ls/false (apply (lambda () (list (jc3095@scheme-stx 'cons) jc39c8@x jc39c9@y)) jc39ec@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc39ea@t)))))))))))) (jc3915@quasiappend (lambda (jc39ae@x jc39af@y) (let ((jc39b2@ls (let jc39b6@f ((jc39b4@x jc39ae@x)) (if (null? jc39b4@x) (let ((jc39b8@t jc39af@y)) (let ((jc39ba@ls/false (jc310d@syntax-dispatch jc39b8@t '(#(scheme-id quote) ())))) (if jc39ba@ls/false (apply (lambda () '()) jc39ba@ls/false) (let ((jc39bc@t jc39b8@t)) (let ((jc39be@ls/false (jc310d@syntax-dispatch jc39bc@t '_))) (if jc39be@ls/false (apply (lambda () (list jc39af@y)) jc39be@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc39bc@t))))))) (let ((jc39c0@t (car jc39b4@x))) (let ((jc39c2@ls/false (jc310d@syntax-dispatch jc39c0@t '(#(scheme-id quote) ())))) (if jc39c2@ls/false (apply (lambda () (jc39b6@f (cdr jc39b4@x))) jc39c2@ls/false) (let ((jc39c4@t jc39c0@t)) (let ((jc39c6@ls/false (jc310d@syntax-dispatch jc39c4@t '_))) (if jc39c6@ls/false (apply (lambda () (cons (car jc39b4@x) (jc39b6@f (cdr jc39b4@x)))) jc39c6@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc39c4@t))))))))))) (if (null? jc39b2@ls) (list (jc3095@scheme-stx 'quote) '()) (if (null? (cdr jc39b2@ls)) (car jc39b2@ls) (cons* (jc3095@scheme-stx 'append) jc39b2@ls)))))) (jc3917@quasivector (lambda (jc397c@x) (let ((jc397e@pat-x jc397c@x)) (let ((jc3980@t jc397e@pat-x)) (let ((jc3982@ls/false (jc310d@syntax-dispatch jc3980@t '(#(scheme-id quote) each-any)))) (if jc3982@ls/false (apply (lambda (jc3984@x*) (list (jc3095@scheme-stx 'quote) (list->vector jc3984@x*))) jc3982@ls/false) (let ((jc3986@t jc3980@t)) (let ((jc3988@ls/false (jc310d@syntax-dispatch jc3986@t '_))) (if jc3988@ls/false (apply (lambda () (let jc3990@f ((jc398a@x jc397c@x) (jc398b@k (lambda (jc398e@ls) (cons* (jc3095@scheme-stx 'vector) jc398e@ls)))) (let ((jc3992@t jc398a@x)) (let ((jc3994@ls/false (jc310d@syntax-dispatch jc3992@t '(#(scheme-id quote) each-any)))) (if jc3994@ls/false (apply (lambda (jc3996@x*) (jc398b@k (map (lambda (jc3998@x) (list (jc3095@scheme-stx 'quote) jc3998@x)) jc3996@x*))) jc3994@ls/false) (let ((jc399a@t jc3992@t)) (let ((jc399c@ls/false (jc310d@syntax-dispatch jc399a@t '(#(scheme-id list) . each-any)))) (if jc399c@ls/false (apply (lambda (jc399e@x*) (jc398b@k jc399e@x*)) jc399c@ls/false) (let ((jc39a0@t jc399a@t)) (let ((jc39a2@ls/false (jc310d@syntax-dispatch jc39a0@t '(#(scheme-id cons) any any)))) (if jc39a2@ls/false (apply (lambda (jc39a4@x jc39a5@y) (jc3990@f jc39a5@y (lambda (jc39a8@ls) (jc398b@k (cons jc39a4@x jc39a8@ls))))) jc39a2@ls/false) (let ((jc39aa@t jc39a0@t)) (let ((jc39ac@ls/false (jc310d@syntax-dispatch jc39aa@t '_))) (if jc39ac@ls/false (apply (lambda () (list (jc3095@scheme-stx 'list->vector) jc397e@pat-x)) jc39ac@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc39aa@t))))))))))))))) jc3988@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3986@t)))))))))) (jc3919@vquasi (lambda (jc395a@p jc395b@lev) (let ((jc395e@t jc395a@p)) (let ((jc3960@ls/false (jc310d@syntax-dispatch jc395e@t '(any . any)))) (if jc3960@ls/false (apply (lambda (jc3962@p jc3963@q) (let ((jc3966@t jc3962@p)) (let ((jc3968@ls/false (jc310d@syntax-dispatch jc3966@t '(#(scheme-id unquote) . each-any)))) (if jc3968@ls/false (apply (lambda (jc396a@p) (if (= jc395b@lev '0) (jc3911@quasicons* jc396a@p (jc3919@vquasi jc3963@q jc395b@lev)) (jc3913@quasicons (jc3913@quasicons (jc38f5@datum 'unquote) (jc391b@quasi jc396a@p (- jc395b@lev '1))) (jc3919@vquasi jc3963@q jc395b@lev)))) jc3968@ls/false) (let ((jc396c@t jc3966@t)) (let ((jc396e@ls/false (jc310d@syntax-dispatch jc396c@t '(#(scheme-id unquote-splicing) . each-any)))) (if jc396e@ls/false (apply (lambda (jc3970@p) (if (= jc395b@lev '0) (jc3915@quasiappend jc3970@p (jc3919@vquasi jc3963@q jc395b@lev)) (jc3913@quasicons (jc3913@quasicons (jc38f5@datum 'unquote-splicing) (jc391b@quasi jc3970@p (- jc395b@lev '1))) (jc3919@vquasi jc3963@q jc395b@lev)))) jc396e@ls/false) (let ((jc3972@t jc396c@t)) (let ((jc3974@ls/false (jc310d@syntax-dispatch jc3972@t 'any))) (if jc3974@ls/false (apply (lambda (jc3976@p) (jc3913@quasicons (jc391b@quasi jc3976@p jc395b@lev) (jc3919@vquasi jc3963@q jc395b@lev))) jc3974@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3972@t))))))))))) jc3960@ls/false) (let ((jc3978@t jc395e@t)) (let ((jc397a@ls/false (jc310d@syntax-dispatch jc3978@t '()))) (if jc397a@ls/false (apply (lambda () (list (jc3095@scheme-stx 'quote) '())) jc397a@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3978@t))))))))) (jc391b@quasi (lambda (jc3924@p jc3925@lev) (let ((jc3928@t jc3924@p)) (let ((jc392a@ls/false (jc310d@syntax-dispatch jc3928@t '(#(scheme-id unquote) any)))) (if jc392a@ls/false (apply (lambda (jc392c@p) (if (= jc3925@lev '0) jc392c@p (jc3913@quasicons (jc38f5@datum 'unquote) (jc391b@quasi (list jc392c@p) (- jc3925@lev '1))))) jc392a@ls/false) (let ((jc392e@t jc3928@t)) (let ((jc3930@ls/false (jc310d@syntax-dispatch jc392e@t '((#(scheme-id unquote) . each-any) . any)))) (if jc3930@ls/false (apply (lambda (jc3932@p jc3933@q) (if (= jc3925@lev '0) (jc3911@quasicons* jc3932@p (jc391b@quasi jc3933@q jc3925@lev)) (jc3913@quasicons (jc3913@quasicons (jc38f5@datum 'unquote) (jc391b@quasi jc3932@p (- jc3925@lev '1))) (jc391b@quasi jc3933@q jc3925@lev)))) jc3930@ls/false) (let ((jc3936@t jc392e@t)) (let ((jc3938@ls/false (jc310d@syntax-dispatch jc3936@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if jc3938@ls/false (apply (lambda (jc393a@p jc393b@q) (if (= jc3925@lev '0) (jc3915@quasiappend jc393a@p (jc391b@quasi jc393b@q jc3925@lev)) (jc3913@quasicons (jc3913@quasicons (jc38f5@datum 'unquote-splicing) (jc391b@quasi jc393a@p (- jc3925@lev '1))) (jc391b@quasi jc393b@q jc3925@lev)))) jc3938@ls/false) (let ((jc393e@t jc3936@t)) (let ((jc3940@ls/false (jc310d@syntax-dispatch jc393e@t '(#(scheme-id quasiquote) any)))) (if jc3940@ls/false (apply (lambda (jc3942@p) (jc3913@quasicons (jc38f5@datum 'quasiquote) (jc391b@quasi (list jc3942@p) (+ jc3925@lev '1)))) jc3940@ls/false) (let ((jc3944@t jc393e@t)) (let ((jc3946@ls/false (jc310d@syntax-dispatch jc3944@t '(any . any)))) (if jc3946@ls/false (apply (lambda (jc3948@p jc3949@q) (jc3913@quasicons (jc391b@quasi jc3948@p jc3925@lev) (jc391b@quasi jc3949@q jc3925@lev))) jc3946@ls/false) (let ((jc394c@t jc3944@t)) (let ((jc394e@ls/false (jc310d@syntax-dispatch jc394c@t '#(vector each-any)))) (if (and jc394e@ls/false (apply (lambda (jc3950@x) (not (jc2ed2@stx? jc3950@x))) jc394e@ls/false)) (apply (lambda (jc3952@x) (jc3917@quasivector (jc3919@vquasi jc3952@x jc3925@lev))) jc394e@ls/false) (let ((jc3954@t jc394c@t)) (let ((jc3956@ls/false (jc310d@syntax-dispatch jc3954@t 'any))) (if jc3956@ls/false (apply (lambda (jc3958@p) (list (jc3095@scheme-stx 'quote) jc3958@p)) jc3956@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3954@t))))))))))))))))))))))))) (lambda (jc391c@x) (let ((jc391e@t jc391c@x)) (let ((jc3920@ls/false (jc310d@syntax-dispatch jc391e@t '(_ any)))) (if jc3920@ls/false (apply (lambda (jc3922@e) (jc391b@quasi jc3922@e '0)) jc3920@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc391e@t))))))) (set! jc4c10@jc30fb@quasiquote-macro jc30fb@quasiquote-macro) (set! jc30fd@quasisyntax-macro (letrec* ((jc39f9@quasi (lambda (jc3a14@p jc3a15@lev) (let ((jc3a18@t jc3a14@p)) (let ((jc3a1a@ls/false (jc310d@syntax-dispatch jc3a18@t '(#(scheme-id unsyntax) any)))) (if jc3a1a@ls/false (apply (lambda (jc3a1c@p) (if (= jc3a15@lev '0) (let ((jc3a1e@g (gensym))) (values (list jc3a1e@g) (list jc3a1c@p) jc3a1e@g)) (call-with-values (lambda () (jc39f9@quasi jc3a1c@p (- jc3a15@lev '1))) (lambda (jc3a26@jc3a21 jc3a27@jc3a23 jc3a28@jc3a25) (let ((jc3a2c@p jc3a28@jc3a25) (jc3a2d@rhs* jc3a27@jc3a23) (jc3a2e@lhs* jc3a26@jc3a21)) (values jc3a2e@lhs* jc3a2d@rhs* (list 'unsyntax jc3a2c@p))))))) jc3a1a@ls/false) (let ((jc3a32@t jc3a18@t)) (let ((jc3a34@ls/false (jc310d@syntax-dispatch jc3a32@t '#(scheme-id unsyntax)))) (if (and jc3a34@ls/false (apply (lambda () (= jc3a15@lev '0)) jc3a34@ls/false)) (apply (lambda () (jc31ed@syntax-violation '#f '"incorrect use of unsyntax" jc3a14@p)) jc3a34@ls/false) (let ((jc3a36@t jc3a32@t)) (let ((jc3a38@ls/false (jc310d@syntax-dispatch jc3a36@t '((#(scheme-id unsyntax) . each-any) . any)))) (if jc3a38@ls/false (apply (lambda (jc3a3a@p* jc3a3b@q) (call-with-values (lambda () (jc39f9@quasi jc3a3b@q jc3a15@lev)) (lambda (jc3a44@jc3a3f jc3a45@jc3a41 jc3a46@jc3a43) (let ((jc3a4a@q jc3a46@jc3a43) (jc3a4b@rhs* jc3a45@jc3a41) (jc3a4c@lhs* jc3a44@jc3a3f)) (if (= jc3a15@lev '0) (let ((jc3a50@g* (map (lambda (jc3a52@x) (gensym)) jc3a3a@p*))) (values (append jc3a50@g* jc3a4c@lhs*) (append jc3a3a@p* jc3a4b@rhs*) (append jc3a50@g* jc3a4a@q))) (call-with-values (lambda () (jc39f9@quasi jc3a3a@p* (- jc3a15@lev '1))) (lambda (jc3a5a@jc3a55 jc3a5b@jc3a57 jc3a5c@jc3a59) (let ((jc3a60@p* jc3a5c@jc3a59) (jc3a61@rhs2* jc3a5b@jc3a57) (jc3a62@lhs2* jc3a5a@jc3a55)) (values (append jc3a62@lhs2* jc3a4c@lhs*) (append jc3a61@rhs2* jc3a4b@rhs*) (cons (cons 'unsyntax jc3a60@p*) jc3a4a@q)))))))))) jc3a38@ls/false) (let ((jc3a66@t jc3a36@t)) (let ((jc3a68@ls/false (jc310d@syntax-dispatch jc3a66@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if jc3a68@ls/false (apply (lambda (jc3a6a@p* jc3a6b@q) (call-with-values (lambda () (jc39f9@quasi jc3a6b@q jc3a15@lev)) (lambda (jc3a74@jc3a6f jc3a75@jc3a71 jc3a76@jc3a73) (let ((jc3a7a@q jc3a76@jc3a73) (jc3a7b@rhs* jc3a75@jc3a71) (jc3a7c@lhs* jc3a74@jc3a6f)) (if (= jc3a15@lev '0) (let ((jc3a80@g* (map (lambda (jc3a82@x) (gensym)) jc3a6a@p*))) (values (append (map (lambda (jc3a84@g) (cons jc3a84@g '(...))) jc3a80@g*) jc3a7c@lhs*) (append jc3a6a@p* jc3a7b@rhs*) (append (apply append (map (lambda (jc3a86@g) (cons jc3a86@g '(...))) jc3a80@g*)) jc3a7a@q))) (call-with-values (lambda () (jc39f9@quasi jc3a6a@p* (- jc3a15@lev '1))) (lambda (jc3a8e@jc3a89 jc3a8f@jc3a8b jc3a90@jc3a8d) (let ((jc3a94@p* jc3a90@jc3a8d) (jc3a95@rhs2* jc3a8f@jc3a8b) (jc3a96@lhs2* jc3a8e@jc3a89)) (values (append jc3a96@lhs2* jc3a7c@lhs*) (append jc3a95@rhs2* jc3a7b@rhs*) (cons (cons 'unsyntax-splicing jc3a94@p*) jc3a7a@q)))))))))) jc3a68@ls/false) (let ((jc3a9a@t jc3a66@t)) (let ((jc3a9c@ls/false (jc310d@syntax-dispatch jc3a9a@t '#(scheme-id unsyntax-splicing)))) (if (and jc3a9c@ls/false (apply (lambda () (= jc3a15@lev '0)) jc3a9c@ls/false)) (apply (lambda () (jc31ed@syntax-violation '#f '"incorrect use of unsyntax-splicing" jc3a14@p)) jc3a9c@ls/false) (let ((jc3a9e@t jc3a9a@t)) (let ((jc3aa0@ls/false (jc310d@syntax-dispatch jc3a9e@t '(#(scheme-id quasisyntax) any)))) (if jc3aa0@ls/false (apply (lambda (jc3aa2@p) (call-with-values (lambda () (jc39f9@quasi jc3aa2@p (+ jc3a15@lev '1))) (lambda (jc3aaa@jc3aa5 jc3aab@jc3aa7 jc3aac@jc3aa9) (let ((jc3ab0@p jc3aac@jc3aa9) (jc3ab1@rhs* jc3aab@jc3aa7) (jc3ab2@lhs* jc3aaa@jc3aa5)) (values jc3ab2@lhs* jc3ab1@rhs* (list 'quasisyntax jc3ab0@p)))))) jc3aa0@ls/false) (let ((jc3ab6@t jc3a9e@t)) (let ((jc3ab8@ls/false (jc310d@syntax-dispatch jc3ab6@t '(any . any)))) (if jc3ab8@ls/false (apply (lambda (jc3aba@p jc3abb@q) (call-with-values (lambda () (jc39f9@quasi jc3aba@p jc3a15@lev)) (lambda (jc3aca@jc3abf jc3acb@jc3ac1 jc3acc@jc3ac3) (call-with-values (lambda () (jc39f9@quasi jc3abb@q jc3a15@lev)) (lambda (jc3ad0@jc3ac5 jc3ad1@jc3ac7 jc3ad2@jc3ac9) (let ((jc3ad6@q jc3ad2@jc3ac9) (jc3ad7@rhs2* jc3ad1@jc3ac7) (jc3ad8@lhs2* jc3ad0@jc3ac5) (jc3ad9@p jc3acc@jc3ac3) (jc3ada@rhs* jc3acb@jc3ac1) (jc3adb@lhs* jc3aca@jc3abf)) (values (append jc3ad8@lhs2* jc3adb@lhs*) (append jc3ad7@rhs2* jc3ada@rhs*) (cons jc3ad9@p jc3ad6@q)))))))) jc3ab8@ls/false) (let ((jc3ae2@t jc3ab6@t)) (let ((jc3ae4@ls/false (jc310d@syntax-dispatch jc3ae2@t '#(vector each-any)))) (if jc3ae4@ls/false (apply (lambda (jc3ae6@x*) (call-with-values (lambda () (jc39f9@quasi jc3ae6@x* jc3a15@lev)) (lambda (jc3aee@jc3ae9 jc3aef@jc3aeb jc3af0@jc3aed) (let ((jc3af4@x* jc3af0@jc3aed) (jc3af5@rhs* jc3aef@jc3aeb) (jc3af6@lhs* jc3aee@jc3ae9)) (values jc3af6@lhs* jc3af5@rhs* (list->vector jc3af4@x*)))))) jc3ae4@ls/false) (let ((jc3afa@t jc3ae2@t)) (let ((jc3afc@ls/false (jc310d@syntax-dispatch jc3afa@t '_))) (if jc3afc@ls/false (apply (lambda () (values '() '() jc3a14@p)) jc3afc@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3afa@t))))))))))))))))))))))))))))))) (lambda (jc39fa@x) (let ((jc39fc@t jc39fa@x)) (let ((jc39fe@ls/false (jc310d@syntax-dispatch jc39fc@t '(_ any)))) (if jc39fe@ls/false (apply (lambda (jc3a00@e) (call-with-values (lambda () (jc39f9@quasi jc3a00@e '0)) (lambda (jc3a08@jc3a03 jc3a09@jc3a05 jc3a0a@jc3a07) (let ((jc3a0e@v jc3a0a@jc3a07) (jc3a0f@rhs* jc3a09@jc3a05) (jc3a10@lhs* jc3a08@jc3a03)) (jc30c3@bless (list 'syntax-case (cons 'list jc3a0f@rhs*) '() (list jc3a10@lhs* (list 'syntax jc3a0e@v)))))))) jc39fe@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc39fc@t))))))) (set! jc4c11@jc30fd@quasisyntax-macro jc30fd@quasisyntax-macro) (set! jc30ff@define-struct-macro (lambda (jc3afe@stx) (jc31ed@syntax-violation '#f '"define-struct not supported" jc3afe@stx))) (set! jc4c12@jc30ff@define-struct-macro jc30ff@define-struct-macro) (set! jc3101@define-record-type-macro (lambda (jc3b00@x) (letrec* ((jc3b03@id (lambda (jc3cf6@ctxt . jc3cf8@str*) (jc31f1@datum->syntax jc3cf6@ctxt (string->symbol (apply string-append (map (lambda (jc3cfa@x) (if (symbol? jc3cfa@x) (symbol->string jc3cfa@x) (if (string? jc3cfa@x) jc3cfa@x (assertion-violation 'define-record-type '"BUG")))) jc3cf8@str*)))))) (jc3b05@get-record-name (lambda (jc3ce4@spec) (let ((jc3ce6@t jc3ce4@spec)) (let ((jc3ce8@ls/false (jc310d@syntax-dispatch jc3ce6@t '(any any any)))) (if jc3ce8@ls/false (apply (lambda (jc3cea@foo jc3ceb@make-foo jc3cec@foo?) jc3cea@foo) jc3ce8@ls/false) (let ((jc3cf0@t jc3ce6@t)) (let ((jc3cf2@ls/false (jc310d@syntax-dispatch jc3cf0@t 'any))) (if jc3cf2@ls/false (apply (lambda (jc3cf4@foo) jc3cf4@foo) jc3cf2@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3cf0@t))))))))) (jc3b07@get-record-constructor-name (lambda (jc3cd0@spec) (let ((jc3cd2@t jc3cd0@spec)) (let ((jc3cd4@ls/false (jc310d@syntax-dispatch jc3cd2@t '(any any any)))) (if jc3cd4@ls/false (apply (lambda (jc3cd6@foo jc3cd7@make-foo jc3cd8@foo?) jc3cd7@make-foo) jc3cd4@ls/false) (let ((jc3cdc@t jc3cd2@t)) (let ((jc3cde@ls/false (jc310d@syntax-dispatch jc3cdc@t 'any))) (if (and jc3cde@ls/false (apply (lambda (jc3ce0@foo) (jc2f06@id? jc3ce0@foo)) jc3cde@ls/false)) (apply (lambda (jc3ce2@foo) (jc3b03@id jc3ce2@foo '"make-" (jc2f1a@stx->datum jc3ce2@foo))) jc3cde@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3cdc@t))))))))) (jc3b09@get-record-predicate-name (lambda (jc3cbc@spec) (let ((jc3cbe@t jc3cbc@spec)) (let ((jc3cc0@ls/false (jc310d@syntax-dispatch jc3cbe@t '(any any any)))) (if jc3cc0@ls/false (apply (lambda (jc3cc2@foo jc3cc3@make-foo jc3cc4@foo?) jc3cc4@foo?) jc3cc0@ls/false) (let ((jc3cc8@t jc3cbe@t)) (let ((jc3cca@ls/false (jc310d@syntax-dispatch jc3cc8@t 'any))) (if (and jc3cca@ls/false (apply (lambda (jc3ccc@foo) (jc2f06@id? jc3ccc@foo)) jc3cca@ls/false)) (apply (lambda (jc3cce@foo) (jc3b03@id jc3cce@foo (jc2f1a@stx->datum jc3cce@foo) '"?")) jc3cca@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3cc8@t))))))))) (jc3b0b@get-clause (lambda (jc3caa@id jc3cab@ls) (let ((jc3cae@t jc3cab@ls)) (let ((jc3cb0@ls/false (jc310d@syntax-dispatch jc3cae@t '()))) (if jc3cb0@ls/false (apply (lambda () '#f) jc3cb0@ls/false) (let ((jc3cb2@t jc3cae@t)) (let ((jc3cb4@ls/false (jc310d@syntax-dispatch jc3cb2@t '((any . any) . any)))) (if jc3cb4@ls/false (apply (lambda (jc3cb6@x jc3cb7@rest jc3cb8@ls) (if (jc2f0c@free-id=? (jc30c3@bless jc3caa@id) jc3cb6@x) (cons jc3cb6@x jc3cb7@rest) (jc3b0b@get-clause jc3caa@id jc3cb8@ls))) jc3cb4@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3cb2@t))))))))) (jc3b0d@foo-rtd-code (lambda (jc3c58@name jc3c59@clause* jc3c5a@parent-rtd-code) (letrec* ((jc3c5f@convert-field-spec* (lambda (jc3c90@ls) (list->vector (map (lambda (jc3c92@x) (let ((jc3c94@t jc3c92@x)) (let ((jc3c96@ls/false (jc310d@syntax-dispatch jc3c94@t '(#(scheme-id mutable) any . any)))) (if jc3c96@ls/false (apply (lambda (jc3c98@name jc3c99@rest) (list 'mutable jc3c98@name)) jc3c96@ls/false) (let ((jc3c9c@t jc3c94@t)) (let ((jc3c9e@ls/false (jc310d@syntax-dispatch jc3c9c@t '(#(scheme-id immutable) any . any)))) (if jc3c9e@ls/false (apply (lambda (jc3ca0@name jc3ca1@rest) (list 'immutable jc3ca0@name)) jc3c9e@ls/false) (let ((jc3ca4@t jc3c9c@t)) (let ((jc3ca6@ls/false (jc310d@syntax-dispatch jc3ca4@t 'any))) (if jc3ca6@ls/false (apply (lambda (jc3ca8@name) (list 'immutable jc3ca8@name)) jc3ca6@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3ca4@t))))))))))) jc3c90@ls))))) (let ((jc3c60@uid-code (let ((jc3c68@t (jc3b0b@get-clause 'nongenerative jc3c59@clause*))) (let ((jc3c6a@ls/false (jc310d@syntax-dispatch jc3c68@t '(_)))) (if jc3c6a@ls/false (apply (lambda () (list 'quote (gensym))) jc3c6a@ls/false) (let ((jc3c6c@t jc3c68@t)) (let ((jc3c6e@ls/false (jc310d@syntax-dispatch jc3c6c@t '(_ any)))) (if jc3c6e@ls/false (apply (lambda (jc3c70@uid) (list 'quote jc3c70@uid)) jc3c6e@ls/false) (let ((jc3c72@t jc3c6c@t)) (let ((jc3c74@ls/false (jc310d@syntax-dispatch jc3c72@t '_))) (if jc3c74@ls/false (apply (lambda () '#f) jc3c74@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3c72@t))))))))))) (jc3c61@sealed? (let ((jc3c76@t (jc3b0b@get-clause 'sealed jc3c59@clause*))) (let ((jc3c78@ls/false (jc310d@syntax-dispatch jc3c76@t '(_ #(atom #t))))) (if jc3c78@ls/false (apply (lambda () '#t) jc3c78@ls/false) (let ((jc3c7a@t jc3c76@t)) (let ((jc3c7c@ls/false (jc310d@syntax-dispatch jc3c7a@t '_))) (if jc3c7c@ls/false (apply (lambda () '#f) jc3c7c@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3c7a@t)))))))) (jc3c62@opaque? (let ((jc3c7e@t (jc3b0b@get-clause 'opaque jc3c59@clause*))) (let ((jc3c80@ls/false (jc310d@syntax-dispatch jc3c7e@t '(_ #(atom #t))))) (if jc3c80@ls/false (apply (lambda () '#t) jc3c80@ls/false) (let ((jc3c82@t jc3c7e@t)) (let ((jc3c84@ls/false (jc310d@syntax-dispatch jc3c82@t '_))) (if jc3c84@ls/false (apply (lambda () '#f) jc3c84@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3c82@t)))))))) (jc3c63@fields (let ((jc3c86@t (jc3b0b@get-clause 'fields jc3c59@clause*))) (let ((jc3c88@ls/false (jc310d@syntax-dispatch jc3c86@t '(_ . each-any)))) (if jc3c88@ls/false (apply (lambda (jc3c8a@field-spec*) (list 'quote (jc3c5f@convert-field-spec* jc3c8a@field-spec*))) jc3c88@ls/false) (let ((jc3c8c@t jc3c86@t)) (let ((jc3c8e@ls/false (jc310d@syntax-dispatch jc3c8c@t '_))) (if jc3c8e@ls/false (apply (lambda () ''#()) jc3c8e@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3c8c@t))))))))) (jc30c3@bless (list 'make-record-type-descriptor (list 'quote jc3c58@name) jc3c5a@parent-rtd-code jc3c60@uid-code jc3c61@sealed? jc3c62@opaque? jc3c63@fields)))))) (jc3b0f@parent-rtd-code (lambda (jc3c40@clause*) (let ((jc3c42@t (jc3b0b@get-clause 'parent jc3c40@clause*))) (let ((jc3c44@ls/false (jc310d@syntax-dispatch jc3c42@t '(_ any)))) (if jc3c44@ls/false (apply (lambda (jc3c46@name) (list 'record-type-descriptor jc3c46@name)) jc3c44@ls/false) (let ((jc3c48@t jc3c42@t)) (let ((jc3c4a@ls/false (jc310d@syntax-dispatch jc3c48@t '#(atom #f)))) (if jc3c4a@ls/false (apply (lambda () (let ((jc3c4c@t (jc3b0b@get-clause 'parent-rtd jc3c40@clause*))) (let ((jc3c4e@ls/false (jc310d@syntax-dispatch jc3c4c@t '(_ any any)))) (if jc3c4e@ls/false (apply (lambda (jc3c50@rtd jc3c51@rcd) jc3c50@rtd) jc3c4e@ls/false) (let ((jc3c54@t jc3c4c@t)) (let ((jc3c56@ls/false (jc310d@syntax-dispatch jc3c54@t '#(atom #f)))) (if jc3c56@ls/false (apply (lambda () '#f) jc3c56@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3c54@t)))))))) jc3c4a@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3c48@t))))))))) (jc3b11@parent-rcd-code (lambda (jc3c28@clause*) (let ((jc3c2a@t (jc3b0b@get-clause 'parent jc3c28@clause*))) (let ((jc3c2c@ls/false (jc310d@syntax-dispatch jc3c2a@t '(_ any)))) (if jc3c2c@ls/false (apply (lambda (jc3c2e@name) (list 'record-constructor-descriptor jc3c2e@name)) jc3c2c@ls/false) (let ((jc3c30@t jc3c2a@t)) (let ((jc3c32@ls/false (jc310d@syntax-dispatch jc3c30@t '#(atom #f)))) (if jc3c32@ls/false (apply (lambda () (let ((jc3c34@t (jc3b0b@get-clause 'parent-rtd jc3c28@clause*))) (let ((jc3c36@ls/false (jc310d@syntax-dispatch jc3c34@t '(_ any any)))) (if jc3c36@ls/false (apply (lambda (jc3c38@rtd jc3c39@rcd) jc3c39@rcd) jc3c36@ls/false) (let ((jc3c3c@t jc3c34@t)) (let ((jc3c3e@ls/false (jc310d@syntax-dispatch jc3c3c@t '#(atom #f)))) (if jc3c3e@ls/false (apply (lambda () '#f) jc3c3e@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3c3c@t)))))))) jc3c32@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3c30@t))))))))) (jc3b13@foo-rcd-code (lambda (jc3c20@clause* jc3c21@foo-rtd jc3c22@protocol jc3c23@parent-rcd-code) (list 'make-record-constructor-descriptor jc3c21@foo-rtd jc3c23@parent-rcd-code jc3c22@protocol))) (jc3b15@get-protocol-code (lambda (jc3c14@clause*) (let ((jc3c16@t (jc3b0b@get-clause 'protocol jc3c14@clause*))) (let ((jc3c18@ls/false (jc310d@syntax-dispatch jc3c16@t '(_ any)))) (if jc3c18@ls/false (apply (lambda (jc3c1a@expr) jc3c1a@expr) jc3c18@ls/false) (let ((jc3c1c@t jc3c16@t)) (let ((jc3c1e@ls/false (jc310d@syntax-dispatch jc3c1c@t '_))) (if jc3c1e@ls/false (apply (lambda () '#f) jc3c1e@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3c1c@t))))))))) (jc3b17@get-fields (lambda (jc3c02@clause*) (let ((jc3c04@t jc3c02@clause*)) (let ((jc3c06@ls/false (jc310d@syntax-dispatch jc3c04@t '()))) (if jc3c06@ls/false (apply (lambda () '()) jc3c06@ls/false) (let ((jc3c08@t jc3c04@t)) (let ((jc3c0a@ls/false (jc310d@syntax-dispatch jc3c08@t '((#(scheme-id fields) . each-any) . _)))) (if jc3c0a@ls/false (apply (lambda (jc3c0c@f*) jc3c0c@f*) jc3c0a@ls/false) (let ((jc3c0e@t jc3c08@t)) (let ((jc3c10@ls/false (jc310d@syntax-dispatch jc3c0e@t '(_ . any)))) (if jc3c10@ls/false (apply (lambda (jc3c12@rest) (jc3b17@get-fields jc3c12@rest)) jc3c10@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3c0e@t)))))))))))) (jc3b19@get-mutator-indices (lambda (jc3bea@fields) (let jc3bf0@f ((jc3bec@fields jc3bea@fields) (jc3bed@i '0)) (let ((jc3bf2@t jc3bec@fields)) (let ((jc3bf4@ls/false (jc310d@syntax-dispatch jc3bf2@t '()))) (if jc3bf4@ls/false (apply (lambda () '()) jc3bf4@ls/false) (let ((jc3bf6@t jc3bf2@t)) (let ((jc3bf8@ls/false (jc310d@syntax-dispatch jc3bf6@t '((#(scheme-id mutable) . _) . any)))) (if jc3bf8@ls/false (apply (lambda (jc3bfa@rest) (cons jc3bed@i (jc3bf0@f jc3bfa@rest (+ jc3bed@i '1)))) jc3bf8@ls/false) (let ((jc3bfc@t jc3bf6@t)) (let ((jc3bfe@ls/false (jc310d@syntax-dispatch jc3bfc@t '(_ . any)))) (if jc3bfe@ls/false (apply (lambda (jc3c00@rest) (jc3bf0@f jc3c00@rest (+ jc3bed@i '1))) jc3bfe@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3bfc@t))))))))))))) (jc3b1b@get-mutators (lambda (jc3bc0@foo jc3bc1@fields) (letrec* ((jc3bc5@gen-name (lambda (jc3be8@x) (jc31f1@datum->syntax jc3bc0@foo (string->symbol (string-append (symbol->string (jc31f3@syntax->datum jc3bc0@foo)) '"-" (symbol->string (jc31f3@syntax->datum jc3be8@x)) '"-set!")))))) (let jc3bc8@f ((jc3bc6@fields jc3bc1@fields)) (let ((jc3bca@t jc3bc6@fields)) (let ((jc3bcc@ls/false (jc310d@syntax-dispatch jc3bca@t '()))) (if jc3bcc@ls/false (apply (lambda () '()) jc3bcc@ls/false) (let ((jc3bce@t jc3bca@t)) (let ((jc3bd0@ls/false (jc310d@syntax-dispatch jc3bce@t '((#(scheme-id mutable) any any any) . any)))) (if jc3bd0@ls/false (apply (lambda (jc3bd2@name jc3bd3@accessor jc3bd4@mutator jc3bd5@rest) (cons jc3bd4@mutator (jc3bc8@f jc3bd5@rest))) jc3bd0@ls/false) (let ((jc3bda@t jc3bce@t)) (let ((jc3bdc@ls/false (jc310d@syntax-dispatch jc3bda@t '((#(scheme-id mutable) any) . any)))) (if jc3bdc@ls/false (apply (lambda (jc3bde@name jc3bdf@rest) (cons (jc3bc5@gen-name jc3bde@name) (jc3bc8@f jc3bdf@rest))) jc3bdc@ls/false) (let ((jc3be2@t jc3bda@t)) (let ((jc3be4@ls/false (jc310d@syntax-dispatch jc3be2@t '(_ . any)))) (if jc3be4@ls/false (apply (lambda (jc3be6@rest) (jc3bc8@f jc3be6@rest)) jc3be4@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3be2@t))))))))))))))))) (jc3b1d@get-accessors (lambda (jc3b7c@foo jc3b7d@fields) (letrec* ((jc3b81@gen-name (lambda (jc3bbe@x) (jc31f1@datum->syntax jc3b7c@foo (string->symbol (string-append (symbol->string (jc31f3@syntax->datum jc3b7c@foo)) '"-" (symbol->string (jc31f3@syntax->datum jc3bbe@x)))))))) (map (lambda (jc3b82@field) (let ((jc3b84@t jc3b82@field)) (let ((jc3b86@ls/false (jc310d@syntax-dispatch jc3b84@t '(#(scheme-id mutable) any any any)))) (if (and jc3b86@ls/false (apply (lambda (jc3b88@name jc3b89@accessor jc3b8a@mutator) (jc2f06@id? jc3b89@accessor)) jc3b86@ls/false)) (apply (lambda (jc3b8e@name jc3b8f@accessor jc3b90@mutator) jc3b8f@accessor) jc3b86@ls/false) (let ((jc3b94@t jc3b84@t)) (let ((jc3b96@ls/false (jc310d@syntax-dispatch jc3b94@t '(#(scheme-id immutable) any any)))) (if (and jc3b96@ls/false (apply (lambda (jc3b98@name jc3b99@accessor) (jc2f06@id? jc3b99@accessor)) jc3b96@ls/false)) (apply (lambda (jc3b9c@name jc3b9d@accessor) jc3b9d@accessor) jc3b96@ls/false) (let ((jc3ba0@t jc3b94@t)) (let ((jc3ba2@ls/false (jc310d@syntax-dispatch jc3ba0@t '(#(scheme-id mutable) any)))) (if (and jc3ba2@ls/false (apply (lambda (jc3ba4@name) (jc2f06@id? jc3ba4@name)) jc3ba2@ls/false)) (apply (lambda (jc3ba6@name) (jc3b81@gen-name jc3ba6@name)) jc3ba2@ls/false) (let ((jc3ba8@t jc3ba0@t)) (let ((jc3baa@ls/false (jc310d@syntax-dispatch jc3ba8@t '(#(scheme-id immutable) any)))) (if (and jc3baa@ls/false (apply (lambda (jc3bac@name) (jc2f06@id? jc3bac@name)) jc3baa@ls/false)) (apply (lambda (jc3bae@name) (jc3b81@gen-name jc3bae@name)) jc3baa@ls/false) (let ((jc3bb0@t jc3ba8@t)) (let ((jc3bb2@ls/false (jc310d@syntax-dispatch jc3bb0@t 'any))) (if (and jc3bb2@ls/false (apply (lambda (jc3bb4@name) (jc2f06@id? jc3bb4@name)) jc3bb2@ls/false)) (apply (lambda (jc3bb6@name) (jc3b81@gen-name jc3bb6@name)) jc3bb2@ls/false) (let ((jc3bb8@t jc3bb0@t)) (let ((jc3bba@ls/false (jc310d@syntax-dispatch jc3bb8@t 'any))) (if jc3bba@ls/false (apply (lambda (jc3bbc@others) (jc31ed@syntax-violation '#f '"invalid field spec" jc3b82@field)) jc3bba@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3bb8@t)))))))))))))))))))) jc3b7d@fields)))) (jc3b1f@enumerate (lambda (jc3b74@ls) (let jc3b7a@f ((jc3b76@ls jc3b74@ls) (jc3b77@i '0)) (if (null? jc3b76@ls) '() (cons jc3b77@i (jc3b7a@f (cdr jc3b76@ls) (+ jc3b77@i '1))))))) (jc3b21@do-define-record (lambda (jc3b4c@namespec jc3b4d@clause*) (let ((jc3b50@foo (jc3b05@get-record-name jc3b4c@namespec))) (let ((jc3b52@foo-rtd (gensym))) (let ((jc3b54@foo-rcd (gensym))) (let ((jc3b56@protocol (gensym))) (let ((jc3b58@make-foo (jc3b07@get-record-constructor-name jc3b4c@namespec))) (let ((jc3b5a@fields (jc3b17@get-fields jc3b4d@clause*))) (let ((jc3b5c@idx* (jc3b1f@enumerate jc3b5a@fields))) (let ((jc3b5e@foo-x* (jc3b1d@get-accessors jc3b50@foo jc3b5a@fields))) (let ((jc3b60@set-foo-x!* (jc3b1b@get-mutators jc3b50@foo jc3b5a@fields))) (let ((jc3b62@set-foo-idx* (jc3b19@get-mutator-indices jc3b5a@fields))) (let ((jc3b64@foo? (jc3b09@get-record-predicate-name jc3b4c@namespec))) (let ((jc3b66@foo-rtd-code (jc3b0d@foo-rtd-code jc3b50@foo jc3b4d@clause* (jc3b0f@parent-rtd-code jc3b4d@clause*)))) (let ((jc3b68@foo-rcd-code (jc3b13@foo-rcd-code jc3b4d@clause* jc3b52@foo-rtd jc3b56@protocol (jc3b11@parent-rcd-code jc3b4d@clause*)))) (let ((jc3b6a@protocol-code (jc3b15@get-protocol-code jc3b4d@clause*))) (jc30c3@bless (cons 'begin (cons (list 'define jc3b52@foo-rtd jc3b66@foo-rtd-code) (cons (list 'define jc3b56@protocol jc3b6a@protocol-code) (cons (list 'define jc3b54@foo-rcd jc3b68@foo-rcd-code) (cons (list 'define-syntax jc3b50@foo (list 'list ''$rtd (list 'syntax jc3b52@foo-rtd) (list 'syntax jc3b54@foo-rcd))) (cons (list 'define jc3b64@foo? (list 'record-predicate jc3b52@foo-rtd)) (cons (list 'define jc3b58@make-foo (list 'record-constructor jc3b54@foo-rcd)) (append (map (lambda (jc3b6c@foo-x jc3b6d@idx) (list 'define jc3b6c@foo-x (list 'record-accessor jc3b52@foo-rtd jc3b6d@idx))) jc3b5e@foo-x* jc3b5c@idx*) (map (lambda (jc3b70@set-foo-x! jc3b71@idx) (list 'define jc3b70@set-foo-x! (list 'record-mutator jc3b52@foo-rtd jc3b71@idx))) jc3b60@set-foo-x!* jc3b62@set-foo-idx*)))))))))))))))))))))))))) (jc3b23@verify-clauses (lambda (jc3b2c@x jc3b2d@cls*) (letrec* ((jc3b31@valid-kwds (map jc30c3@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (jc3b33@free-id-member? (lambda (jc3b48@x jc3b49@ls) (and (pair? jc3b49@ls) (or (jc2f0c@free-id=? jc3b48@x (car jc3b49@ls)) (jc3b33@free-id-member? jc3b48@x (cdr jc3b49@ls))))))) (let jc3b38@f ((jc3b34@cls* jc3b2d@cls*) (jc3b35@seen* '())) (if (not (null? jc3b34@cls*)) (let ((jc3b3a@t (car jc3b34@cls*))) (let ((jc3b3c@ls/false (jc310d@syntax-dispatch jc3b3a@t '(any . any)))) (if jc3b3c@ls/false (apply (lambda (jc3b3e@kwd jc3b3f@rest) (if (or (not (jc2f06@id? jc3b3e@kwd)) (not (jc3b33@free-id-member? jc3b3e@kwd jc3b31@valid-kwds))) (jc31ed@syntax-violation '#f '"not a valid define-record-type keyword" jc3b3e@kwd) (if (jc2f12@bound-id-member? jc3b3e@kwd jc3b35@seen*) (jc31ed@syntax-violation '#f '"duplicate use of keyword " jc3b2c@x jc3b3e@kwd) (jc3b38@f (cdr jc3b34@cls*) (cons jc3b3e@kwd jc3b35@seen*))))) jc3b3c@ls/false) (let ((jc3b42@t jc3b3a@t)) (let ((jc3b44@ls/false (jc310d@syntax-dispatch jc3b42@t 'any))) (if jc3b44@ls/false (apply (lambda (jc3b46@cls) (jc31ed@syntax-violation '#f '"malformed define-record-type clause" jc3b46@cls)) jc3b44@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3b42@t))))))) (void))))))) (let ((jc3b24@t jc3b00@x)) (let ((jc3b26@ls/false (jc310d@syntax-dispatch jc3b24@t '(_ any . each-any)))) (if jc3b26@ls/false (apply (lambda (jc3b28@namespec jc3b29@clause*) (begin (jc3b23@verify-clauses jc3b00@x jc3b29@clause*) (jc3b21@do-define-record jc3b28@namespec jc3b29@clause*))) jc3b26@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3b24@t))))))) (set! jc4c13@jc3101@define-record-type-macro jc3101@define-record-type-macro) (set! jc3103@define-condition-type-macro (lambda (jc3cfc@x) (letrec* ((jc3cff@mkname (lambda (jc3d2c@name jc3d2d@suffix) (jc31f1@datum->syntax jc3d2c@name (string->symbol (string-append (symbol->string (jc31f3@syntax->datum jc3d2c@name)) jc3d2d@suffix)))))) (let ((jc3d00@t jc3cfc@x)) (let ((jc3d02@ls/false (jc310d@syntax-dispatch jc3d00@t '(any any any any any . #(each (any any)))))) (if (and jc3d02@ls/false (apply (lambda (jc3d04@ctxt jc3d05@name jc3d06@super jc3d07@constructor jc3d08@predicate jc3d09@field* jc3d0a@accessor*) (and (jc2f06@id? jc3d05@name) (jc2f06@id? jc3d06@super) (jc2f06@id? jc3d07@constructor) (jc2f06@id? jc3d08@predicate) (for-all jc2f06@id? jc3d09@field*) (for-all jc2f06@id? jc3d0a@accessor*))) jc3d02@ls/false)) (apply (lambda (jc3d12@ctxt jc3d13@name jc3d14@super jc3d15@constructor jc3d16@predicate jc3d17@field* jc3d18@accessor*) (let ((jc3d20@aux-accessor* (map (lambda (jc3d22@x) (gensym)) jc3d18@accessor*))) (jc30c3@bless (cons 'begin (cons (cons 'define-record-type (cons (list jc3d13@name jc3d15@constructor (gensym)) (cons (list 'parent jc3d14@super) (cons (cons 'fields (map (lambda (jc3d24@field jc3d25@aux) (list 'immutable jc3d24@field jc3d25@aux)) jc3d17@field* jc3d20@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define jc3d16@predicate (list 'condition-predicate (list 'record-type-descriptor jc3d13@name))) (map (lambda (jc3d28@accessor jc3d29@aux) (list 'define jc3d28@accessor (list 'condition-accessor (list 'record-type-descriptor jc3d13@name) jc3d29@aux))) jc3d18@accessor* jc3d20@aux-accessor*))))))) jc3d02@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3d00@t))))))) (set! jc4c14@jc3103@define-condition-type-macro jc3103@define-condition-type-macro) (set! jc3105@incorrect-usage-macro (lambda (jc3d30@e) (jc31ed@syntax-violation '#f '"incorrect usage of auxiliary keyword" jc3d30@e))) (set! jc4c15@jc3105@incorrect-usage-macro jc3105@incorrect-usage-macro) (set! jc3107@parameterize-macro (lambda (jc3d32@e) (let ((jc3d34@t jc3d32@e)) (let ((jc3d36@ls/false (jc310d@syntax-dispatch jc3d34@t '(_ () any . each-any)))) (if jc3d36@ls/false (apply (lambda (jc3d38@b jc3d39@b*) (jc30c3@bless (cons 'let (cons '() (cons jc3d38@b jc3d39@b*))))) jc3d36@ls/false) (let ((jc3d3c@t jc3d34@t)) (let ((jc3d3e@ls/false (jc310d@syntax-dispatch jc3d3c@t '(_ #(each (any any)) any . each-any)))) (if jc3d3e@ls/false (apply (lambda (jc3d40@olhs* jc3d41@orhs* jc3d42@b jc3d43@b*) (let ((jc3d48@lhs* (jc31db@generate-temporaries jc3d40@olhs*)) (jc3d49@rhs* (jc31db@generate-temporaries jc3d41@orhs*))) (jc30c3@bless (cons (list 'lambda (append jc3d48@lhs* jc3d49@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (jc3d4c@lhs jc3d4d@rhs) (list 'let (list (list 't (list jc3d4c@lhs))) (list jc3d4c@lhs jc3d4d@rhs) (cons 'set! (cons jc3d4d@rhs '(t))))) jc3d48@lhs* jc3d49@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons jc3d42@b jc3d43@b*))) '(swap)))))) (append jc3d40@olhs* jc3d41@orhs*))))) jc3d3e@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3d3c@t))))))))) (set! jc4c16@jc3107@parameterize-macro jc3107@parameterize-macro) (set! jc3109@foreign-call-transformer (lambda (jc3d50@e jc3d51@r jc3d52@mr) (let ((jc3d56@t jc3d50@e)) (let ((jc3d58@ls/false (jc310d@syntax-dispatch jc3d56@t '(_ any . each-any)))) (if jc3d58@ls/false (apply (lambda (jc3d5a@name jc3d5b@arg*) (cons 'foreign-call (cons (jc312f@chi-expr jc3d5a@name jc3d51@r jc3d52@mr) (jc312b@chi-expr* jc3d5b@arg* jc3d51@r jc3d52@mr)))) jc3d58@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3d56@t)))))) (set! jc4c17@jc3109@foreign-call-transformer jc3109@foreign-call-transformer) (set! jc310b@convert-pattern (lambda (jc3d5e@pattern jc3d5f@keys) (letrec* ((jc3d63@cvt* (lambda (jc3e02@p* jc3e03@n jc3e04@ids) (if (null? jc3e02@p*) (values '() jc3e04@ids) (call-with-values (lambda () (jc3d63@cvt* (cdr jc3e02@p*) jc3e03@n jc3e04@ids)) (lambda (jc3e0c@jc3e09 jc3e0d@jc3e0b) (let ((jc3e10@ids jc3e0d@jc3e0b) (jc3e11@y jc3e0c@jc3e09)) (call-with-values (lambda () (jc3d65@cvt (car jc3e02@p*) jc3e03@n jc3e10@ids)) (lambda (jc3e18@jc3e15 jc3e19@jc3e17) (let ((jc3e1c@ids jc3e19@jc3e17) (jc3e1d@x jc3e18@jc3e15)) (values (cons jc3e1d@x jc3e11@y) jc3e1c@ids)))))))))) (jc3d65@cvt (lambda (jc3d66@p jc3d67@n jc3d68@ids) (let ((jc3d6c@t jc3d66@p)) (let ((jc3d6e@ls/false (jc310d@syntax-dispatch jc3d6c@t 'any))) (if (and jc3d6e@ls/false (apply (lambda (jc3d70@id) (jc2f06@id? jc3d70@id)) jc3d6e@ls/false)) (apply (lambda (jc3d72@id) (if (jc2f12@bound-id-member? jc3d66@p jc3d5f@keys) (values (vector 'free-id jc3d66@p) jc3d68@ids) (if (jc2f0c@free-id=? jc3d66@p (jc3095@scheme-stx '_)) (values '_ jc3d68@ids) (values 'any (cons (cons jc3d66@p jc3d67@n) jc3d68@ids))))) jc3d6e@ls/false) (let ((jc3d74@t jc3d6c@t)) (let ((jc3d76@ls/false (jc310d@syntax-dispatch jc3d74@t '(any any)))) (if (and jc3d76@ls/false (apply (lambda (jc3d78@p jc3d79@dots) (jc310f@ellipsis? jc3d79@dots)) jc3d76@ls/false)) (apply (lambda (jc3d7c@p jc3d7d@dots) (call-with-values (lambda () (jc3d65@cvt jc3d7c@p (+ jc3d67@n '1) jc3d68@ids)) (lambda (jc3d84@jc3d81 jc3d85@jc3d83) (let ((jc3d88@ids jc3d85@jc3d83) (jc3d89@p jc3d84@jc3d81)) (values (if (eq? jc3d89@p 'any) 'each-any (vector 'each jc3d89@p)) jc3d88@ids))))) jc3d76@ls/false) (let ((jc3d8c@t jc3d74@t)) (let ((jc3d8e@ls/false (jc310d@syntax-dispatch jc3d8c@t '(any any . #(each+ any () any))))) (if (and jc3d8e@ls/false (apply (lambda (jc3d90@x jc3d91@dots jc3d92@ys jc3d93@z) (jc310f@ellipsis? jc3d91@dots)) jc3d8e@ls/false)) (apply (lambda (jc3d98@x jc3d99@dots jc3d9a@ys jc3d9b@z) (call-with-values (lambda () (jc3d65@cvt jc3d9b@z jc3d67@n jc3d68@ids)) (lambda (jc3da4@jc3da1 jc3da5@jc3da3) (let ((jc3da8@ids jc3da5@jc3da3) (jc3da9@z jc3da4@jc3da1)) (call-with-values (lambda () (jc3d63@cvt* jc3d9a@ys jc3d67@n jc3da8@ids)) (lambda (jc3db0@jc3dad jc3db1@jc3daf) (let ((jc3db4@ids jc3db1@jc3daf) (jc3db5@ys jc3db0@jc3dad)) (call-with-values (lambda () (jc3d65@cvt jc3d98@x (+ jc3d67@n '1) jc3db4@ids)) (lambda (jc3dbc@jc3db9 jc3dbd@jc3dbb) (let ((jc3dc0@ids jc3dbd@jc3dbb) (jc3dc1@x jc3dbc@jc3db9)) (values (vector 'each+ jc3dc1@x (reverse jc3db5@ys) jc3da9@z) jc3dc0@ids))))))))))) jc3d8e@ls/false) (let ((jc3dc4@t jc3d8c@t)) (let ((jc3dc6@ls/false (jc310d@syntax-dispatch jc3dc4@t '(any . any)))) (if jc3dc6@ls/false (apply (lambda (jc3dc8@x jc3dc9@y) (call-with-values (lambda () (jc3d65@cvt jc3dc9@y jc3d67@n jc3d68@ids)) (lambda (jc3dd0@jc3dcd jc3dd1@jc3dcf) (let ((jc3dd4@ids jc3dd1@jc3dcf) (jc3dd5@y jc3dd0@jc3dcd)) (call-with-values (lambda () (jc3d65@cvt jc3dc8@x jc3d67@n jc3dd4@ids)) (lambda (jc3ddc@jc3dd9 jc3ddd@jc3ddb) (let ((jc3de0@ids jc3ddd@jc3ddb) (jc3de1@x jc3ddc@jc3dd9)) (values (cons jc3de1@x jc3dd5@y) jc3de0@ids)))))))) jc3dc6@ls/false) (let ((jc3de4@t jc3dc4@t)) (let ((jc3de6@ls/false (jc310d@syntax-dispatch jc3de4@t '()))) (if jc3de6@ls/false (apply (lambda () (values '() jc3d68@ids)) jc3de6@ls/false) (let ((jc3de8@t jc3de4@t)) (let ((jc3dea@ls/false (jc310d@syntax-dispatch jc3de8@t '#(vector each-any)))) (if (and jc3dea@ls/false (apply (lambda (jc3dec@p) (not (jc2ed2@stx? jc3dec@p))) jc3dea@ls/false)) (apply (lambda (jc3dee@p) (call-with-values (lambda () (jc3d65@cvt jc3dee@p jc3d67@n jc3d68@ids)) (lambda (jc3df4@jc3df1 jc3df5@jc3df3) (let ((jc3df8@ids jc3df5@jc3df3) (jc3df9@p jc3df4@jc3df1)) (values (vector 'vector jc3df9@p) jc3df8@ids))))) jc3dea@ls/false) (let ((jc3dfc@t jc3de8@t)) (let ((jc3dfe@ls/false (jc310d@syntax-dispatch jc3dfc@t 'any))) (if jc3dfe@ls/false (apply (lambda (jc3e00@datum) (values (vector 'atom (jc2f1a@stx->datum jc3e00@datum)) jc3d68@ids)) jc3dfe@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3dfc@t))))))))))))))))))))))))) (jc3d65@cvt jc3d5e@pattern '0 '())))) (set! jc4c18@jc310b@convert-pattern jc310b@convert-pattern) (set! jc310d@syntax-dispatch (letrec* ((jc3e21@stx^ (lambda (jc3efc@e jc3efd@m* jc3efe@s* jc3eff@ae*) (if (and (null? jc3efd@m*) (null? jc3efe@s*) (null? jc3eff@ae*)) jc3efc@e (jc2eee@mkstx jc3efc@e jc3efd@m* jc3efe@s* jc3eff@ae*)))) (jc3e23@match-each (lambda (jc3edc@e jc3edd@p jc3ede@m* jc3edf@s* jc3ee0@ae*) (if (pair? jc3edc@e) (let ((jc3ee6@first (jc3e2f@match (car jc3edc@e) jc3edd@p jc3ede@m* jc3edf@s* jc3ee0@ae* '()))) (and jc3ee6@first (let ((jc3ee8@rest (jc3e23@match-each (cdr jc3edc@e) jc3edd@p jc3ede@m* jc3edf@s* jc3ee0@ae*))) (and jc3ee8@rest (cons jc3ee6@first jc3ee8@rest))))) (if (null? jc3edc@e) '() (if (jc2ed2@stx? jc3edc@e) (and (not (jc2e8c@top-marked? jc3ede@m*)) (call-with-values (lambda () (join-wraps jc3ede@m* jc3edf@s* jc3ee0@ae* jc3edc@e)) (lambda (jc3ef0@jc3eeb jc3ef1@jc3eed jc3ef2@jc3eef) (let ((jc3ef6@ae* jc3ef2@jc3eef) (jc3ef7@s* jc3ef1@jc3eed) (jc3ef8@m* jc3ef0@jc3eeb)) (jc3e23@match-each (jc2ed4@stx-expr jc3edc@e) jc3edd@p jc3ef8@m* jc3ef7@s* jc3ef6@ae*))))) (if (jc2a4a@jc291c@annotation? jc3edc@e) (jc3e23@match-each (jc2a4c@jc2920@annotation-expression jc3edc@e) jc3edd@p jc3ede@m* jc3edf@s* jc3ee0@ae*) '#f)))))) (jc3e25@match-each+ (lambda (jc3e9c@e jc3e9d@x-pat jc3e9e@y-pat jc3e9f@z-pat jc3ea0@m* jc3ea1@s* jc3ea2@ae* jc3ea3@r) (let jc3eb4@f ((jc3eac@e jc3e9c@e) (jc3ead@m* jc3ea0@m*) (jc3eae@s* jc3ea1@s*) (jc3eaf@ae* jc3ea2@ae*)) (if (pair? jc3eac@e) (call-with-values (lambda () (jc3eb4@f (cdr jc3eac@e) jc3ead@m* jc3eae@s* jc3eaf@ae*)) (lambda (jc3ebc@jc3eb7 jc3ebd@jc3eb9 jc3ebe@jc3ebb) (let ((jc3ec2@r jc3ebe@jc3ebb) (jc3ec3@y-pat jc3ebd@jc3eb9) (jc3ec4@xr* jc3ebc@jc3eb7)) (if jc3ec2@r (if (null? jc3ec3@y-pat) (let ((jc3ec8@xr (jc3e2f@match (car jc3eac@e) jc3e9d@x-pat jc3ead@m* jc3eae@s* jc3eaf@ae* '()))) (if jc3ec8@xr (values (cons jc3ec8@xr jc3ec4@xr*) jc3ec3@y-pat jc3ec2@r) (values '#f '#f '#f))) (values '() (cdr jc3ec3@y-pat) (jc3e2f@match (car jc3eac@e) (car jc3ec3@y-pat) jc3ead@m* jc3eae@s* jc3eaf@ae* jc3ec2@r))) (values '#f '#f '#f))))) (if (jc2ed2@stx? jc3eac@e) (if (jc2e8c@top-marked? jc3ead@m*) (values '() jc3e9e@y-pat (jc3e2f@match jc3eac@e jc3e9f@z-pat jc3ead@m* jc3eae@s* jc3eaf@ae* jc3ea3@r)) (call-with-values (lambda () (join-wraps jc3ead@m* jc3eae@s* jc3eaf@ae* jc3eac@e)) (lambda (jc3ed0@jc3ecb jc3ed1@jc3ecd jc3ed2@jc3ecf) (let ((jc3ed6@ae* jc3ed2@jc3ecf) (jc3ed7@s* jc3ed1@jc3ecd) (jc3ed8@m* jc3ed0@jc3ecb)) (jc3eb4@f (jc2ed4@stx-expr jc3eac@e) jc3ed8@m* jc3ed7@s* jc3ed6@ae*))))) (if (jc2a4a@jc291c@annotation? jc3eac@e) (jc3eb4@f (jc2a4c@jc2920@annotation-expression jc3eac@e) jc3ead@m* jc3eae@s* jc3eaf@ae*) (values '() jc3e9e@y-pat (jc3e2f@match jc3eac@e jc3e9f@z-pat jc3ead@m* jc3eae@s* jc3eaf@ae* jc3ea3@r)))))))) (jc3e27@match-each-any (lambda (jc3e80@e jc3e81@m* jc3e82@s* jc3e83@ae*) (if (pair? jc3e80@e) (let ((jc3e88@l (jc3e27@match-each-any (cdr jc3e80@e) jc3e81@m* jc3e82@s* jc3e83@ae*))) (and jc3e88@l (cons (jc3e21@stx^ (car jc3e80@e) jc3e81@m* jc3e82@s* jc3e83@ae*) jc3e88@l))) (if (null? jc3e80@e) '() (if (jc2ed2@stx? jc3e80@e) (and (not (jc2e8c@top-marked? jc3e81@m*)) (call-with-values (lambda () (join-wraps jc3e81@m* jc3e82@s* jc3e83@ae* jc3e80@e)) (lambda (jc3e90@jc3e8b jc3e91@jc3e8d jc3e92@jc3e8f) (let ((jc3e96@ae* jc3e92@jc3e8f) (jc3e97@s* jc3e91@jc3e8d) (jc3e98@m* jc3e90@jc3e8b)) (jc3e27@match-each-any (jc2ed4@stx-expr jc3e80@e) jc3e98@m* jc3e97@s* jc3e96@ae*))))) (if (jc2a4a@jc291c@annotation? jc3e80@e) (jc3e27@match-each-any (jc2a4c@jc2920@annotation-expression jc3e80@e) jc3e81@m* jc3e82@s* jc3e83@ae*) '#f)))))) (jc3e29@match-empty (lambda (jc3e7a@p jc3e7b@r) (if (null? jc3e7a@p) jc3e7b@r (if (eq? jc3e7a@p '_) jc3e7b@r (if (eq? jc3e7a@p 'any) (cons '() jc3e7b@r) (if (pair? jc3e7a@p) (jc3e29@match-empty (car jc3e7a@p) (jc3e29@match-empty (cdr jc3e7a@p) jc3e7b@r)) (if (eq? jc3e7a@p 'each-any) (cons '() jc3e7b@r) (let ((jc3e7e@t (vector-ref jc3e7a@p '0))) (if (memv jc3e7e@t '(each)) (jc3e29@match-empty (vector-ref jc3e7a@p '1) jc3e7b@r) (if (memv jc3e7e@t '(each+)) (jc3e29@match-empty (vector-ref jc3e7a@p '1) (jc3e29@match-empty (reverse (vector-ref jc3e7a@p '2)) (jc3e29@match-empty (vector-ref jc3e7a@p '3) jc3e7b@r))) (if (memv jc3e7e@t '(free-id atom)) jc3e7b@r (if (memv jc3e7e@t '(scheme-id atom)) jc3e7b@r (if (memv jc3e7e@t '(vector)) (jc3e29@match-empty (vector-ref jc3e7a@p '1) jc3e7b@r) (assertion-violation 'syntax-dispatch '"invalid pattern" jc3e7a@p)))))))))))))) (jc3e2b@combine (lambda (jc3e76@r* jc3e77@r) (if (null? (car jc3e76@r*)) jc3e77@r (cons (map car jc3e76@r*) (jc3e2b@combine (map cdr jc3e76@r*) jc3e77@r))))) (jc3e2d@match* (lambda (jc3e52@e jc3e53@p jc3e54@m* jc3e55@s* jc3e56@ae* jc3e57@r) (if (null? jc3e53@p) (and (null? jc3e52@e) jc3e57@r) (if (pair? jc3e53@p) (and (pair? jc3e52@e) (jc3e2f@match (car jc3e52@e) (car jc3e53@p) jc3e54@m* jc3e55@s* jc3e56@ae* (jc3e2f@match (cdr jc3e52@e) (cdr jc3e53@p) jc3e54@m* jc3e55@s* jc3e56@ae* jc3e57@r))) (if (eq? jc3e53@p 'each-any) (let ((jc3e5e@l (jc3e27@match-each-any jc3e52@e jc3e54@m* jc3e55@s* jc3e56@ae*))) (and jc3e5e@l (cons jc3e5e@l jc3e57@r))) (let ((jc3e60@t (vector-ref jc3e53@p '0))) (if (memv jc3e60@t '(each)) (if (null? jc3e52@e) (jc3e29@match-empty (vector-ref jc3e53@p '1) jc3e57@r) (let ((jc3e62@r* (jc3e23@match-each jc3e52@e (vector-ref jc3e53@p '1) jc3e54@m* jc3e55@s* jc3e56@ae*))) (and jc3e62@r* (jc3e2b@combine jc3e62@r* jc3e57@r)))) (if (memv jc3e60@t '(free-id)) (and (symbol? jc3e52@e) (jc2e8c@top-marked? jc3e54@m*) (jc2f0c@free-id=? (jc3e21@stx^ jc3e52@e jc3e54@m* jc3e55@s* jc3e56@ae*) (vector-ref jc3e53@p '1)) jc3e57@r) (if (memv jc3e60@t '(scheme-id)) (and (symbol? jc3e52@e) (jc2e8c@top-marked? jc3e54@m*) (jc2f0c@free-id=? (jc3e21@stx^ jc3e52@e jc3e54@m* jc3e55@s* jc3e56@ae*) (jc3095@scheme-stx (vector-ref jc3e53@p '1))) jc3e57@r) (if (memv jc3e60@t '(each+)) (call-with-values (lambda () (jc3e25@match-each+ jc3e52@e (vector-ref jc3e53@p '1) (vector-ref jc3e53@p '2) (vector-ref jc3e53@p '3) jc3e54@m* jc3e55@s* jc3e56@ae* jc3e57@r)) (lambda (jc3e6a@jc3e65 jc3e6b@jc3e67 jc3e6c@jc3e69) (let ((jc3e70@r jc3e6c@jc3e69) (jc3e71@y-pat jc3e6b@jc3e67) (jc3e72@xr* jc3e6a@jc3e65)) (and jc3e70@r (null? jc3e71@y-pat) (if (null? jc3e72@xr*) (jc3e29@match-empty (vector-ref jc3e53@p '1) jc3e70@r) (jc3e2b@combine jc3e72@xr* jc3e70@r)))))) (if (memv jc3e60@t '(atom)) (and (fast-equal? (vector-ref jc3e53@p '1) (jc2f18@strip jc3e52@e jc3e54@m*)) jc3e57@r) (if (memv jc3e60@t '(vector)) (and (vector? jc3e52@e) (jc3e2f@match (vector->list jc3e52@e) (vector-ref jc3e53@p '1) jc3e54@m* jc3e55@s* jc3e56@ae* jc3e57@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" jc3e53@p))))))))))))) (jc3e2f@match (lambda (jc3e34@e jc3e35@p jc3e36@m* jc3e37@s* jc3e38@ae* jc3e39@r) (if (not jc3e39@r) '#f (if (eq? jc3e35@p '_) jc3e39@r (if (eq? jc3e35@p 'any) (cons (jc3e21@stx^ jc3e34@e jc3e36@m* jc3e37@s* jc3e38@ae*) jc3e39@r) (if (jc2ed2@stx? jc3e34@e) (and (not (jc2e8c@top-marked? jc3e36@m*)) (call-with-values (lambda () (join-wraps jc3e36@m* jc3e37@s* jc3e38@ae* jc3e34@e)) (lambda (jc3e46@jc3e41 jc3e47@jc3e43 jc3e48@jc3e45) (let ((jc3e4c@ae* jc3e48@jc3e45) (jc3e4d@s* jc3e47@jc3e43) (jc3e4e@m* jc3e46@jc3e41)) (jc3e2f@match (jc2ed4@stx-expr jc3e34@e) jc3e35@p jc3e4e@m* jc3e4d@s* jc3e4c@ae* jc3e39@r))))) (if (jc2a4a@jc291c@annotation? jc3e34@e) (jc3e2f@match (jc2a4c@jc2920@annotation-expression jc3e34@e) jc3e35@p jc3e36@m* jc3e37@s* jc3e38@ae* jc3e39@r) (jc3e2d@match* jc3e34@e jc3e35@p jc3e36@m* jc3e37@s* jc3e38@ae* jc3e39@r))))))))) (lambda (jc3e30@e jc3e31@p) (jc3e2f@match jc3e30@e jc3e31@p '() '() '() '())))) (set! jc4c19@jc310d@syntax-dispatch jc310d@syntax-dispatch) (set! jc310f@ellipsis? (lambda (jc3f04@x) (and (jc2f06@id? jc3f04@x) (jc2f0c@free-id=? jc3f04@x (jc3095@scheme-stx '...))))) (set! jc4c1a@jc310f@ellipsis? jc310f@ellipsis?) (set! jc3111@underscore? (lambda (jc3f06@x) (and (jc2f06@id? jc3f06@x) (jc2f0c@free-id=? jc3f06@x (jc3095@scheme-stx '_))))) (set! jc4c1b@jc3111@underscore? jc3111@underscore?) (set! jc3113@verify-literals (lambda (jc3f08@lits jc3f09@expr) (for-each (lambda (jc3f0c@x) (if (or (not (jc2f06@id? jc3f0c@x)) (jc310f@ellipsis? jc3f0c@x) (jc3111@underscore? jc3f0c@x)) (jc31ed@syntax-violation '#f '"invalid literal" jc3f09@expr jc3f0c@x) (void))) jc3f08@lits))) (set! jc4c1c@jc3113@verify-literals jc3113@verify-literals) (set! jc3115@syntax-case-transformer (letrec* ((jc3f0f@build-dispatch-call (lambda (jc3f80@pvars jc3f81@expr jc3f82@y jc3f83@r jc3f84@mr) (let ((jc3f8a@ids (map car jc3f80@pvars)) (jc3f8b@levels (map cdr jc3f80@pvars))) (let ((jc3f8e@labels (map jc2e92@gen-label jc3f8a@ids)) (jc3f8f@new-vars (map jc2e8e@gen-lexical jc3f8a@ids))) (let ((jc3f92@body (jc312f@chi-expr (jc2ef0@add-subst (jc2ec6@make-full-rib jc3f8a@ids jc3f8e@labels) jc3f81@expr) (append (map (lambda (jc3f94@label jc3f95@var jc3f96@level) (cons jc3f94@label (jc2f20@make-binding 'syntax (cons jc3f95@var jc3f96@level)))) jc3f8e@labels jc3f8f@new-vars (map cdr jc3f80@pvars)) jc3f83@r) jc3f84@mr))) (list '(primitive apply) (jc2e69@jc2d9b@build-lambda '#f jc3f8f@new-vars jc3f92@body) jc3f82@y)))))) (jc3f11@invalid-ids-error (lambda (jc3f74@id* jc3f75@e jc3f76@class) (let jc3f7e@find ((jc3f7a@id* jc3f74@id*) (jc3f7b@ok* '())) (if (null? jc3f7a@id*) (jc31ed@syntax-violation '#f '"invalid syntax" jc3f75@e) (if (jc2f06@id? (car jc3f7a@id*)) (if (jc2f12@bound-id-member? (car jc3f7a@id*) jc3f7b@ok*) (jc31e9@syntax-error (car jc3f7a@id*) '"duplicate " jc3f76@class) (jc3f7e@find (cdr jc3f7a@id*) (cons (car jc3f7a@id*) jc3f7b@ok*))) (jc31e9@syntax-error (car jc3f7a@id*) '"invalid " jc3f76@class)))))) (jc3f13@gen-clause (lambda (jc3f4c@x jc3f4d@keys jc3f4e@clauses jc3f4f@r jc3f50@mr jc3f51@pat jc3f52@fender jc3f53@expr) (call-with-values (lambda () (jc310b@convert-pattern jc3f51@pat jc3f4d@keys)) (lambda (jc3f60@jc3f5d jc3f61@jc3f5f) (let ((jc3f64@pvars jc3f61@jc3f5f) (jc3f65@p jc3f60@jc3f5d)) (if (not (jc2f10@distinct-bound-ids? (map car jc3f64@pvars))) (jc3f11@invalid-ids-error (map car jc3f64@pvars) jc3f51@pat '"pattern variable") (if (not (for-all (lambda (jc3f68@x) (not (jc310f@ellipsis? (car jc3f68@x)))) jc3f64@pvars)) (jc31ed@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" jc3f51@pat) (let ((jc3f6a@y (jc2e8e@gen-lexical 'tmp))) (let ((jc3f6c@test (if (eq? jc3f52@fender '#t) jc3f6a@y (let ((jc3f6e@call (jc3f0f@build-dispatch-call jc3f64@pvars jc3f52@fender jc3f6a@y jc3f4f@r jc3f50@mr))) (list 'if jc3f6a@y jc3f6e@call (list 'quote '#f)))))) (let ((jc3f70@conseq (jc3f0f@build-dispatch-call jc3f64@pvars jc3f53@expr jc3f6a@y jc3f4f@r jc3f50@mr))) (let ((jc3f72@altern (jc3f15@gen-syntax-case jc3f4c@x jc3f4d@keys jc3f4e@clauses jc3f4f@r jc3f50@mr))) (list (jc2e69@jc2d9b@build-lambda '#f (list jc3f6a@y) (list 'if jc3f6c@test jc3f70@conseq jc3f72@altern)) (list '(primitive syntax-dispatch) jc3f4c@x (list 'quote jc3f65@p)))))))))))))) (jc3f15@gen-syntax-case (lambda (jc3f2a@x jc3f2b@keys jc3f2c@clauses jc3f2d@r jc3f2e@mr) (if (null? jc3f2c@clauses) (list '(primitive syntax-error) jc3f2a@x) (let ((jc3f34@t (car jc3f2c@clauses))) (let ((jc3f36@ls/false (jc310d@syntax-dispatch jc3f34@t '(any any)))) (if jc3f36@ls/false (apply (lambda (jc3f38@pat jc3f39@expr) (if (and (jc2f06@id? jc3f38@pat) (not (jc2f12@bound-id-member? jc3f38@pat jc3f2b@keys)) (not (jc310f@ellipsis? jc3f38@pat))) (if (jc2f0c@free-id=? jc3f38@pat (jc3095@scheme-stx '_)) (jc312f@chi-expr jc3f39@expr jc3f2d@r jc3f2e@mr) (let ((jc3f3c@lab (jc2e92@gen-label jc3f38@pat)) (jc3f3d@lex (jc2e8e@gen-lexical jc3f38@pat))) (let ((jc3f40@body (jc312f@chi-expr (jc2ef0@add-subst (jc2ec6@make-full-rib (list jc3f38@pat) (list jc3f3c@lab)) jc3f39@expr) (cons (cons jc3f3c@lab (jc2f20@make-binding 'syntax (cons jc3f3d@lex '0))) jc3f2d@r) jc3f2e@mr))) (list (jc2e69@jc2d9b@build-lambda '#f (list jc3f3d@lex) jc3f40@body) jc3f2a@x)))) (jc3f13@gen-clause jc3f2a@x jc3f2b@keys (cdr jc3f2c@clauses) jc3f2d@r jc3f2e@mr jc3f38@pat '#t jc3f39@expr))) jc3f36@ls/false) (let ((jc3f42@t jc3f34@t)) (let ((jc3f44@ls/false (jc310d@syntax-dispatch jc3f42@t '(any any any)))) (if jc3f44@ls/false (apply (lambda (jc3f46@pat jc3f47@fender jc3f48@expr) (jc3f13@gen-clause jc3f2a@x jc3f2b@keys (cdr jc3f2c@clauses) jc3f2d@r jc3f2e@mr jc3f46@pat jc3f47@fender jc3f48@expr)) jc3f44@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3f42@t))))))))))) (lambda (jc3f16@e jc3f17@r jc3f18@mr) (let ((jc3f1c@t jc3f16@e)) (let ((jc3f1e@ls/false (jc310d@syntax-dispatch jc3f1c@t '(_ any each-any . each-any)))) (if jc3f1e@ls/false (apply (lambda (jc3f20@expr jc3f21@keys jc3f22@clauses) (begin (jc3113@verify-literals jc3f21@keys jc3f16@e) (let ((jc3f26@x (jc2e8e@gen-lexical 'tmp))) (let ((jc3f28@body (jc3f15@gen-syntax-case jc3f26@x jc3f21@keys jc3f22@clauses jc3f17@r jc3f18@mr))) (list (jc2e69@jc2d9b@build-lambda '#f (list jc3f26@x) jc3f28@body) (jc312f@chi-expr jc3f20@expr jc3f17@r jc3f18@mr)))))) jc3f1e@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3f1c@t))))))) (set! jc4c1d@jc3115@syntax-case-transformer jc3115@syntax-case-transformer) (set! jc3117@ellipsis-map (lambda (jc3f9a@proc jc3f9b@ls . jc3f9e@ls*) (letrec* ((jc3fa1@who '...)) (begin (if (not (list? jc3f9b@ls)) (assertion-violation jc3fa1@who '"not a list" jc3f9b@ls) (void)) (if (not (null? jc3f9e@ls*)) (let ((jc3fa2@n (length jc3f9b@ls))) (for-each (lambda (jc3fa4@x) (begin (if (not (list? jc3fa4@x)) (assertion-violation jc3fa1@who '"not a list" jc3fa4@x) (void)) (if (not (= (length jc3fa4@x) jc3fa2@n)) (assertion-violation jc3fa1@who '"length mismatch" jc3f9b@ls jc3fa4@x) (void)))) jc3f9e@ls*)) (void)) (apply map jc3f9a@proc jc3f9b@ls jc3f9e@ls*))))) (set! jc4c1e@jc3117@ellipsis-map jc3117@ellipsis-map) (set! jc3119@syntax-transformer (letrec* ((jc3fa7@gen-syntax (lambda (jc401e@src jc401f@e jc4020@r jc4021@maps jc4022@ellipsis? jc4023@vec?) (let ((jc402a@t jc401f@e)) (let ((jc402c@ls/false (jc310d@syntax-dispatch jc402a@t 'any))) (if (and jc402c@ls/false (apply (lambda (jc402e@dots) (jc4022@ellipsis? jc402e@dots)) jc402c@ls/false)) (apply (lambda (jc4030@dots) (jc31ed@syntax-violation '#f '"misplaced ellipsis in syntax form" jc401e@src)) jc402c@ls/false) (let ((jc4032@t jc402a@t)) (let ((jc4034@ls/false (jc310d@syntax-dispatch jc4032@t 'any))) (if (and jc4034@ls/false (apply (lambda (jc4036@id) (jc2f06@id? jc4036@id)) jc4034@ls/false)) (apply (lambda (jc4038@id) (let ((jc403a@label (jc2f1c@id->label jc401f@e))) (let ((jc403c@b (jc2f1e@label->binding jc403a@label jc4020@r))) (if (eq? (jc2f22@binding-type jc403c@b) 'syntax) (call-with-values (lambda () (let ((jc4042@var.lev (jc2f24@binding-value jc403c@b))) (jc3fa9@gen-ref jc401e@src (car jc4042@var.lev) (cdr jc4042@var.lev) jc4021@maps))) (lambda (jc4044@jc403f jc4045@jc4041) (let ((jc4048@maps jc4045@jc4041) (jc4049@var jc4044@jc403f)) (values (list 'ref jc4049@var) jc4048@maps)))) (values (list 'quote jc401f@e) jc4021@maps))))) jc4034@ls/false) (let ((jc404c@t jc4032@t)) (let ((jc404e@ls/false (jc310d@syntax-dispatch jc404c@t '(any any)))) (if (and jc404e@ls/false (apply (lambda (jc4050@dots jc4051@e) (jc4022@ellipsis? jc4050@dots)) jc404e@ls/false)) (apply (lambda (jc4054@dots jc4055@e) (if jc4023@vec? (jc31ed@syntax-violation '#f '"misplaced ellipsis in syntax form" jc401e@src) (jc3fa7@gen-syntax jc401e@src jc4055@e jc4020@r jc4021@maps (lambda (jc4058@x) '#f) '#f))) jc404e@ls/false) (let ((jc405a@t jc404c@t)) (let ((jc405c@ls/false (jc310d@syntax-dispatch jc405a@t '(any any . any)))) (if (and jc405c@ls/false (apply (lambda (jc405e@x jc405f@dots jc4060@y) (jc4022@ellipsis? jc405f@dots)) jc405c@ls/false)) (apply (lambda (jc4064@x jc4065@dots jc4066@y) (let jc407c@f ((jc406a@y jc4066@y) (jc406b@k (lambda (jc406e@maps) (call-with-values (lambda () (jc3fa7@gen-syntax jc401e@src jc4064@x jc4020@r (cons '() jc406e@maps) jc4022@ellipsis? '#f)) (lambda (jc4074@jc4071 jc4075@jc4073) (let ((jc4078@maps jc4075@jc4073) (jc4079@x jc4074@jc4071)) (if (null? (car jc4078@maps)) (jc31ed@syntax-violation '#f '"extra ellipsis in syntax form" jc401e@src) (values (jc3faf@gen-map jc4079@x (car jc4078@maps)) (cdr jc4078@maps))))))))) (let ((jc407e@t jc406a@y)) (let ((jc4080@ls/false (jc310d@syntax-dispatch jc407e@t '()))) (if jc4080@ls/false (apply (lambda () (jc406b@k jc4021@maps)) jc4080@ls/false) (let ((jc4082@t jc407e@t)) (let ((jc4084@ls/false (jc310d@syntax-dispatch jc4082@t '(any . any)))) (if (and jc4084@ls/false (apply (lambda (jc4086@dots jc4087@y) (jc4022@ellipsis? jc4086@dots)) jc4084@ls/false)) (apply (lambda (jc408a@dots jc408b@y) (jc407c@f jc408b@y (lambda (jc408e@maps) (call-with-values (lambda () (jc406b@k (cons '() jc408e@maps))) (lambda (jc4094@jc4091 jc4095@jc4093) (let ((jc4098@maps jc4095@jc4093) (jc4099@x jc4094@jc4091)) (if (null? (car jc4098@maps)) (jc31ed@syntax-violation '#f '"extra ellipsis in syntax form" jc401e@src) (values (jc3fad@gen-mappend jc4099@x (car jc4098@maps)) (cdr jc4098@maps))))))))) jc4084@ls/false) (let ((jc409c@t jc4082@t)) (let ((jc409e@ls/false (jc310d@syntax-dispatch jc409c@t '_))) (if jc409e@ls/false (apply (lambda () (call-with-values (lambda () (jc3fa7@gen-syntax jc401e@src jc406a@y jc4020@r jc4021@maps jc4022@ellipsis? jc4023@vec?)) (lambda (jc40a4@jc40a1 jc40a5@jc40a3) (let ((jc40a8@maps jc40a5@jc40a3) (jc40a9@y jc40a4@jc40a1)) (call-with-values (lambda () (jc406b@k jc40a8@maps)) (lambda (jc40b0@jc40ad jc40b1@jc40af) (let ((jc40b4@maps jc40b1@jc40af) (jc40b5@x jc40b0@jc40ad)) (values (jc3fab@gen-append jc40b5@x jc40a9@y) jc40b4@maps)))))))) jc409e@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc409c@t)))))))))))) jc405c@ls/false) (let ((jc40b8@t jc405a@t)) (let ((jc40ba@ls/false (jc310d@syntax-dispatch jc40b8@t '(any . any)))) (if jc40ba@ls/false (apply (lambda (jc40bc@x jc40bd@y) (call-with-values (lambda () (jc3fa7@gen-syntax jc401e@src jc40bc@x jc4020@r jc4021@maps jc4022@ellipsis? '#f)) (lambda (jc40c4@jc40c1 jc40c5@jc40c3) (let ((jc40c8@maps jc40c5@jc40c3) (jc40c9@xnew jc40c4@jc40c1)) (call-with-values (lambda () (jc3fa7@gen-syntax jc401e@src jc40bd@y jc4020@r jc40c8@maps jc4022@ellipsis? jc4023@vec?)) (lambda (jc40d0@jc40cd jc40d1@jc40cf) (let ((jc40d4@maps jc40d1@jc40cf) (jc40d5@ynew jc40d0@jc40cd)) (values (jc3fb1@gen-cons jc401f@e jc40bc@x jc40bd@y jc40c9@xnew jc40d5@ynew) jc40d4@maps)))))))) jc40ba@ls/false) (let ((jc40d8@t jc40b8@t)) (let ((jc40da@ls/false (jc310d@syntax-dispatch jc40d8@t '#(vector each-any)))) (if jc40da@ls/false (apply (lambda (jc40dc@ls) (call-with-values (lambda () (jc3fa7@gen-syntax jc401e@src jc40dc@ls jc4020@r jc4021@maps jc4022@ellipsis? '#t)) (lambda (jc40e2@jc40df jc40e3@jc40e1) (let ((jc40e6@maps jc40e3@jc40e1) (jc40e7@lsnew jc40e2@jc40df)) (values (jc3fb3@gen-vector jc401f@e jc40dc@ls jc40e7@lsnew) jc40e6@maps))))) jc40da@ls/false) (let ((jc40ea@t jc40d8@t)) (let ((jc40ec@ls/false (jc310d@syntax-dispatch jc40ea@t '_))) (if jc40ec@ls/false (apply (lambda () (values (list 'quote jc401f@e) jc4021@maps)) jc40ec@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc40ea@t)))))))))))))))))))))))) (jc3fa9@gen-ref (lambda (jc4004@src jc4005@var jc4006@level jc4007@maps) (if (= jc4006@level '0) (values jc4005@var jc4007@maps) (if (null? jc4007@maps) (jc31ed@syntax-violation '#f '"missing ellipsis in syntax form" jc4004@src) (call-with-values (lambda () (jc3fa9@gen-ref jc4004@src jc4005@var (- jc4006@level '1) (cdr jc4007@maps))) (lambda (jc4010@jc400d jc4011@jc400f) (let ((jc4014@outer-maps jc4011@jc400f) (jc4015@outer-var jc4010@jc400d)) (let ((jc4018@t (assq jc4015@outer-var (car jc4007@maps)))) (if jc4018@t ((lambda (jc401a@b) (values (cdr jc401a@b) jc4007@maps)) jc4018@t) (let ((jc401c@inner-var (jc2e8e@gen-lexical 'tmp))) (values jc401c@inner-var (cons (cons (cons jc4015@outer-var jc401c@inner-var) (car jc4007@maps)) jc4014@outer-maps)))))))))))) (jc3fab@gen-append (lambda (jc4000@x jc4001@y) (if (fast-equal? jc4001@y ''()) jc4000@x (list 'append jc4000@x jc4001@y)))) (jc3fad@gen-mappend (lambda (jc3ffc@e jc3ffd@map-env) (list 'apply '(primitive append) (jc3faf@gen-map jc3ffc@e jc3ffd@map-env)))) (jc3faf@gen-map (lambda (jc3fea@e jc3feb@map-env) (let ((jc3fee@formals (map cdr jc3feb@map-env)) (jc3fef@actuals (map (lambda (jc3ff2@x) (list 'ref (car jc3ff2@x))) jc3feb@map-env))) (if (eq? (car jc3fea@e) 'ref) (car jc3fef@actuals) (if (for-all (lambda (jc3ff4@x) (and (eq? (car jc3ff4@x) 'ref) (memq (cadr jc3ff4@x) jc3fee@formals))) (cdr jc3fea@e)) (let ((jc3ff6@args (map (let ((jc3ff8@r (map cons jc3fee@formals jc3fef@actuals))) (lambda (jc3ffa@x) (cdr (assq (cadr jc3ffa@x) jc3ff8@r)))) (cdr jc3fea@e)))) (cons 'map (cons (list 'primitive (car jc3fea@e)) jc3ff6@args))) (cons* 'map (list 'lambda jc3fee@formals jc3fea@e) jc3fef@actuals)))))) (jc3fb1@gen-cons (lambda (jc3fda@e jc3fdb@x jc3fdc@y jc3fdd@xnew jc3fde@ynew) (let ((jc3fe4@t (car jc3fde@ynew))) (if (memv jc3fe4@t '(quote)) (if (eq? (car jc3fdd@xnew) 'quote) (let ((jc3fe6@xnew (cadr jc3fdd@xnew)) (jc3fe7@ynew (cadr jc3fde@ynew))) (if (and (eq? jc3fe6@xnew jc3fdb@x) (eq? jc3fe7@ynew jc3fdc@y)) (list 'quote jc3fda@e) (list 'quote (cons jc3fe6@xnew jc3fe7@ynew)))) (if (null? (cadr jc3fde@ynew)) (list 'list jc3fdd@xnew) (list 'cons jc3fdd@xnew jc3fde@ynew))) (if (memv jc3fe4@t '(list)) (cons 'list (cons jc3fdd@xnew (cdr jc3fde@ynew))) (list 'cons jc3fdd@xnew jc3fde@ynew)))))) (jc3fb3@gen-vector (lambda (jc3fd4@e jc3fd5@ls jc3fd6@lsnew) (if (eq? (car jc3fd6@lsnew) 'quote) (if (eq? (cadr jc3fd6@lsnew) jc3fd5@ls) (list 'quote jc3fd4@e) (list 'quote (list->vector (cadr jc3fd6@lsnew)))) (if (eq? (car jc3fd6@lsnew) 'list) (cons 'vector (cdr jc3fd6@lsnew)) (list 'list->vector jc3fd6@lsnew))))) (jc3fb5@regen (lambda (jc3fce@x) (let ((jc3fd0@t (car jc3fce@x))) (if (memv jc3fd0@t '(ref)) (cadr jc3fce@x) (if (memv jc3fd0@t '(primitive)) (list 'primitive (cadr jc3fce@x)) (if (memv jc3fd0@t '(quote)) (list 'quote (cadr jc3fce@x)) (if (memv jc3fd0@t '(lambda)) (jc2e69@jc2d9b@build-lambda '#f (cadr jc3fce@x) (jc3fb5@regen (caddr jc3fce@x))) (if (memv jc3fd0@t '(map)) (let ((jc3fd2@ls (map jc3fb5@regen (cdr jc3fce@x)))) (cons '(primitive ellipsis-map) jc3fd2@ls)) (cons (list 'primitive (car jc3fce@x)) (map jc3fb5@regen (cdr jc3fce@x)))))))))))) (lambda (jc3fb6@e jc3fb7@r jc3fb8@mr) (let ((jc3fbc@t jc3fb6@e)) (let ((jc3fbe@ls/false (jc310d@syntax-dispatch jc3fbc@t '(_ any)))) (if jc3fbe@ls/false (apply (lambda (jc3fc0@x) (call-with-values (lambda () (jc3fa7@gen-syntax jc3fb6@e jc3fc0@x jc3fb7@r '() jc310f@ellipsis? '#f)) (lambda (jc3fc6@jc3fc3 jc3fc7@jc3fc5) (let ((jc3fca@maps jc3fc7@jc3fc5) (jc3fcb@e jc3fc6@jc3fc3)) (jc3fb5@regen jc3fcb@e))))) jc3fbe@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc3fbc@t))))))) (set! jc4c1f@jc3119@syntax-transformer jc3119@syntax-transformer) (set! jc311b@core-macro-transformer (lambda (jc40ee@name) (let ((jc40f0@t jc40ee@name)) (if (memv jc40f0@t '(quote)) jc30bd@quote-transformer (if (memv jc40f0@t '(lambda)) jc30c1@lambda-transformer (if (memv jc40f0@t '(case-lambda)) jc30bf@case-lambda-transformer (if (memv jc40f0@t '(letrec)) jc30a5@letrec-transformer (if (memv jc40f0@t '(letrec*)) jc30a7@letrec*-transformer (if (memv jc40f0@t '(let)) jc30a3@let-transformer (if (memv jc40f0@t '(if)) jc30b5@if-transformer (if (memv jc40f0@t '(and)) jc30b7@and-transformer (if (memv jc40f0@t '(or)) jc30b9@or-transformer (if (memv jc40f0@t '(foreign-call)) jc3109@foreign-call-transformer (if (memv jc40f0@t '(syntax-case)) jc3115@syntax-case-transformer (if (memv jc40f0@t '(syntax)) jc3119@syntax-transformer (if (memv jc40f0@t '(type-descriptor)) jc30ab@type-descriptor-transformer (if (memv jc40f0@t '(record-type-descriptor)) jc30ad@record-type-descriptor-transformer (if (memv jc40f0@t '(record-constructor-descriptor)) jc30af@record-constructor-descriptor-transformer (if (memv jc40f0@t '(fluid-let-syntax)) jc30a9@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" jc40ee@name)))))))))))))))))))) (set! jc4c20@jc311b@core-macro-transformer jc311b@core-macro-transformer) (set! jc311d@symbol-macro (lambda (jc40f2@x jc40f3@set) (let ((jc40f6@t jc40f2@x)) (let ((jc40f8@ls/false (jc310d@syntax-dispatch jc40f6@t '(_ any)))) (if (and jc40f8@ls/false (apply (lambda (jc40fa@name) (and (jc2f06@id? jc40fa@name) (memq (jc2f08@id->sym jc40fa@name) jc40f3@set))) jc40f8@ls/false)) (apply (lambda (jc40fc@name) (jc30c3@bless (list 'quote jc40fc@name))) jc40f8@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc40f6@t)))))) (set! jc4c21@jc311d@symbol-macro jc311d@symbol-macro) (set! jc311f@macro-transformer (lambda (jc40fe@x) (if (procedure? jc40fe@x) jc40fe@x (if (symbol? jc40fe@x) (let ((jc4100@t jc40fe@x)) (if (memv jc4100@t '(define-record-type)) jc3101@define-record-type-macro (if (memv jc4100@t '(define-struct)) jc30ff@define-struct-macro (if (memv jc4100@t '(include)) jc30f5@include-macro (if (memv jc4100@t '(cond)) jc30f1@cond-macro (if (memv jc4100@t '(let)) jc30c9@let-macro (if (memv jc4100@t '(do)) jc30e9@do-macro (if (memv jc4100@t '(or)) jc30ed@or-macro (if (memv jc4100@t '(and)) jc30ef@and-macro (if (memv jc4100@t '(let*)) jc30eb@let*-macro (if (memv jc4100@t '(let-values)) jc30cb@let-values-macro (if (memv jc4100@t '(let*-values)) jc30cd@let*-values-macro (if (memv jc4100@t '(syntax-rules)) jc30f9@syntax-rules-macro (if (memv jc4100@t '(quasiquote)) jc30fb@quasiquote-macro (if (memv jc4100@t '(quasisyntax)) jc30fd@quasisyntax-macro (if (memv jc4100@t '(with-syntax)) jc30c5@with-syntax-macro (if (memv jc4100@t '(when)) jc30b1@when-macro (if (memv jc4100@t '(unless)) jc30b3@unless-macro (if (memv jc4100@t '(case)) jc30bb@case-macro (if (memv jc4100@t '(identifier-syntax)) jc30e7@identifier-syntax-macro (if (memv jc4100@t '(time)) jc30df@time-macro (if (memv jc4100@t '(delay)) jc30e1@delay-macro (if (memv jc4100@t '(assert)) jc30e3@assert-macro (if (memv jc4100@t '(endianness)) jc30e5@endianness-macro (if (memv jc4100@t '(guard)) jc30db@guard-macro (if (memv jc4100@t '(define-enumeration)) jc30dd@define-enumeration-macro (if (memv jc4100@t '(trace-lambda)) jc30cf@trace-lambda-macro (if (memv jc4100@t '(trace-define)) jc30d1@trace-define-macro (if (memv jc4100@t '(trace-define-syntax)) jc30d3@trace-define-syntax-macro (if (memv jc4100@t '(trace-let-syntax)) jc30d7@trace-let-syntax-macro (if (memv jc4100@t '(trace-letrec-syntax)) jc30d9@trace-letrec-syntax-macro (if (memv jc4100@t '(define-condition-type)) jc3103@define-condition-type-macro (if (memv jc4100@t '(parameterize)) jc3107@parameterize-macro (if (memv jc4100@t '(include-into)) jc30f7@include-into-macro (if (memv jc4100@t '(eol-style)) (lambda (jc4102@x) (jc311d@symbol-macro jc4102@x '(none lf cr crlf nel crnel ls))) (if (memv jc4100@t '(error-handling-mode)) (lambda (jc4104@x) (jc311d@symbol-macro jc4104@x '(ignore raise replace))) (if (memv jc4100@t '(buffer-mode)) (lambda (jc4106@x) (jc311d@symbol-macro jc4106@x '(none line block))) (if (memv jc4100@t '(file-options)) jc2e81@file-options-macro (if (memv jc4100@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) jc3105@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" jc40fe@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" jc40fe@x))))) (set! jc4c22@jc311f@macro-transformer jc311f@macro-transformer) (set! jc3121@local-macro-transformer (lambda (jc4108@x) (car jc4108@x))) (set! jc4c23@jc3121@local-macro-transformer jc3121@local-macro-transformer) (set! jc3123@do-macro-call (lambda (jc410a@transformer jc410b@expr jc410c@rib) (let ((jc4110@out (jc410a@transformer (jc2ef2@add-mark jc2eea@anti-mark '#f jc410b@expr '#f)))) (begin (let jc4114@f ((jc4112@x jc4110@out)) (if (not (jc2ed2@stx? jc4112@x)) (if (pair? jc4112@x) (begin (jc4114@f (car jc4112@x)) (jc4114@f (cdr jc4112@x))) (if (vector? jc4112@x) (vector-for-each jc4114@f jc4112@x) (if (symbol? jc4112@x) (jc31ed@syntax-violation '#f '"raw symbol encountered in output of macro" jc410b@expr jc4112@x) (void)))) (void))) (jc2ef2@add-mark (jc2ee8@gen-mark) jc410c@rib jc4110@out jc410b@expr))))) (set! jc4c24@jc3123@do-macro-call jc3123@do-macro-call) (set! jc3125@chi-macro (lambda (jc4116@p jc4117@e jc4118@rib) (jc3123@do-macro-call (jc311f@macro-transformer jc4116@p) jc4117@e jc4118@rib))) (set! jc4c25@jc3125@chi-macro jc3125@chi-macro) (set! jc3127@chi-local-macro (lambda (jc411c@p jc411d@e jc411e@rib) (jc3123@do-macro-call (jc3121@local-macro-transformer jc411c@p) jc411d@e jc411e@rib))) (set! jc4c26@jc3127@chi-local-macro jc3127@chi-local-macro) (set! jc3129@chi-global-macro (lambda (jc4122@p jc4123@e jc4124@rib) (let ((jc4128@lib (car jc4122@p)) (jc4129@loc (cdr jc4122@p))) (begin (jc2d23@jc2b72@visit-library jc4128@lib) (let ((jc412c@x (symbol-value jc4129@loc))) (let ((jc412e@transformer (if (procedure? jc412c@x) jc412c@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" jc412c@x)))) (jc3123@do-macro-call jc412e@transformer jc4123@e jc4124@rib))))))) (set! jc4c27@jc3129@chi-global-macro jc3129@chi-global-macro) (set! jc312b@chi-expr* (lambda (jc4130@e* jc4131@r jc4132@mr) (if (null? jc4130@e*) '() (let ((jc4136@e (jc312f@chi-expr (car jc4130@e*) jc4131@r jc4132@mr))) (cons jc4136@e (jc312b@chi-expr* (cdr jc4130@e*) jc4131@r jc4132@mr)))))) (set! jc4c28@jc312b@chi-expr* jc312b@chi-expr*) (set! jc312d@chi-application (lambda (jc4138@e jc4139@r jc413a@mr) (let ((jc413e@t jc4138@e)) (let ((jc4140@ls/false (jc310d@syntax-dispatch jc413e@t '(any . each-any)))) (if jc4140@ls/false (apply (lambda (jc4142@rator jc4143@rands) (let ((jc4146@rator (jc312f@chi-expr jc4142@rator jc4139@r jc413a@mr))) (cons jc4146@rator (jc312b@chi-expr* jc4143@rands jc4139@r jc413a@mr)))) jc4140@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc413e@t)))))) (set! jc4c29@jc312d@chi-application jc312d@chi-application) (set! jc312f@chi-expr (lambda (jc4148@e jc4149@r jc414a@mr) (call-with-values (lambda () (jc2f28@syntax-type jc4148@e jc4149@r)) (lambda (jc4154@jc414f jc4155@jc4151 jc4156@jc4153) (let ((jc415a@kwd jc4156@jc4153) (jc415b@value jc4155@jc4151) (jc415c@type jc4154@jc414f)) (let ((jc4160@t jc415c@type)) (if (memv jc4160@t '(core-macro)) (let ((jc4162@transformer (jc311b@core-macro-transformer jc415b@value))) (jc4162@transformer jc4148@e jc4149@r jc414a@mr)) (if (memv jc4160@t '(global)) (let ((jc4164@lib (car jc415b@value))) (let ((jc4166@loc (cdr jc415b@value))) (begin ((jc3175@inv-collector) jc4164@lib) jc4166@loc))) (if (memv jc4160@t '(core-prim)) (let ((jc4168@name jc415b@value)) (list 'primitive jc4168@name)) (if (memv jc4160@t '(call)) (jc312d@chi-application jc4148@e jc4149@r jc414a@mr) (if (memv jc4160@t '(lexical)) (let ((jc416a@lex (jc3097@lexical-var jc415b@value))) jc416a@lex) (if (memv jc4160@t '(global-macro global-macro!)) (jc312f@chi-expr (jc3129@chi-global-macro jc415b@value jc4148@e '#f) jc4149@r jc414a@mr) (if (memv jc4160@t '(local-macro local-macro!)) (jc312f@chi-expr (jc3127@chi-local-macro jc415b@value jc4148@e '#f) jc4149@r jc414a@mr) (if (memv jc4160@t '(macro macro!)) (jc312f@chi-expr (jc3125@chi-macro jc415b@value jc4148@e '#f) jc4149@r jc414a@mr) (if (memv jc4160@t '(constant)) (let ((jc416c@datum jc415b@value)) (list 'quote jc416c@datum)) (if (memv jc4160@t '(set!)) (jc3131@chi-set! jc4148@e jc4149@r jc414a@mr) (if (memv jc4160@t '(begin)) (let ((jc416e@t jc4148@e)) (let ((jc4170@ls/false (jc310d@syntax-dispatch jc416e@t '(_ any . each-any)))) (if jc4170@ls/false (apply (lambda (jc4172@x jc4173@x*) (jc2e6b@jc2dcb@build-sequence '#f (jc312b@chi-expr* (cons jc4172@x jc4173@x*) jc4149@r jc414a@mr))) jc4170@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc416e@t)))) (if (memv jc4160@t '(let-syntax letrec-syntax)) (let ((jc4176@t jc4148@e)) (let ((jc4178@ls/false (jc310d@syntax-dispatch jc4176@t '(_ #(each (any any)) any . each-any)))) (if (and jc4178@ls/false (apply (lambda (jc417a@xlhs* jc417b@xrhs* jc417c@xbody jc417d@xbody*) (if (not (jc2f0e@valid-bound-ids? jc417a@xlhs*)) (jc31ed@syntax-violation '#f '"invalid identifiers" jc4148@e) (void))) jc4178@ls/false)) (apply (lambda (jc4182@xlhs* jc4183@xrhs* jc4184@xbody jc4185@xbody*) (let ((jc418a@xlab* (map jc2e92@gen-label jc4182@xlhs*))) (let ((jc418c@xrib (jc2ec6@make-full-rib jc4182@xlhs* jc418a@xlab*))) (let ((jc418e@xb* (map (lambda (jc4190@x) (jc2f3e@make-eval-transformer (jc3167@expand-transformer (if (eq? jc415c@type 'let-syntax) jc4190@x (jc2ef0@add-subst jc418c@xrib jc4190@x)) jc414a@mr))) jc4183@xrhs*))) (jc2e6b@jc2dcb@build-sequence '#f (jc312b@chi-expr* (map (lambda (jc4192@x) (jc2ef0@add-subst jc418c@xrib jc4192@x)) (cons jc4184@xbody jc4185@xbody*)) (append (map cons jc418a@xlab* jc418e@xb*) jc4149@r) (append (map cons jc418a@xlab* jc418e@xb*) jc414a@mr))))))) jc4178@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc4176@t)))) (if (memv jc4160@t '(displaced-lexical)) (jc31ed@syntax-violation '#f '"identifier out of context" jc4148@e) (if (memv jc4160@t '(syntax)) (jc31ed@syntax-violation '#f '"reference to pattern variable outside a syntax form" jc4148@e) (if (memv jc4160@t '(define define-syntax module import library)) (jc31ed@syntax-violation '#f (string-append (let ((jc4194@t jc415c@type)) (if (memv jc4194@t '(define)) '"a definition" (if (memv jc4194@t '(define-syntax)) '"a define-syntax" (if (memv jc4194@t '(module)) '"a module definition" (if (memv jc4194@t '(library)) '"a library definition" (if (memv jc4194@t '(import)) '"an import declaration" (if (memv jc4194@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") jc4148@e) (if (memv jc4160@t '(mutable)) (jc31ed@syntax-violation '#f '"attempt to reference an unexportable variable" jc4148@e) (jc31ed@syntax-violation '#f '"invalid expression" jc4148@e))))))))))))))))))))))) (set! jc4c2a@jc312f@chi-expr jc312f@chi-expr) (set! jc3131@chi-set! (lambda (jc4196@e jc4197@r jc4198@mr) (let ((jc419c@t jc4196@e)) (let ((jc419e@ls/false (jc310d@syntax-dispatch jc419c@t '(_ any any)))) (if (and jc419e@ls/false (apply (lambda (jc41a0@x jc41a1@v) (jc2f06@id? jc41a0@x)) jc419e@ls/false)) (apply (lambda (jc41a4@x jc41a5@v) (call-with-values (lambda () (jc2f28@syntax-type jc41a4@x jc4197@r)) (lambda (jc41ae@jc41a9 jc41af@jc41ab jc41b0@jc41ad) (let ((jc41b4@kwd jc41b0@jc41ad) (jc41b5@value jc41af@jc41ab) (jc41b6@type jc41ae@jc41a9)) (let ((jc41ba@t jc41b6@type)) (if (memv jc41ba@t '(lexical)) (begin (jc309b@set-lexical-mutable! jc41b5@value '#t) (list 'set! (jc3097@lexical-var jc41b5@value) (jc312f@chi-expr jc41a5@v jc4197@r jc4198@mr))) (if (memv jc41ba@t '(core-prim)) (jc31ed@syntax-violation '#f '"cannot modify imported core primitive" jc4196@e) (if (memv jc41ba@t '(global)) (jc31ed@syntax-violation '#f '"attempt to modify imported binding" jc4196@e) (if (memv jc41ba@t '(global-macro!)) (jc312f@chi-expr (jc3129@chi-global-macro jc41b5@value jc4196@e '#f) jc4197@r jc4198@mr) (if (memv jc41ba@t '(local-macro!)) (jc312f@chi-expr (jc3127@chi-local-macro jc41b5@value jc4196@e '#f) jc4197@r jc4198@mr) (if (memv jc41ba@t '(mutable)) (jc31ed@syntax-violation '#f '"attempt to assign to an unexportable variable" jc4196@e) (jc31ed@syntax-violation '#f '"invalid syntax" jc4196@e)))))))))))) jc419e@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc419c@t)))))) (set! jc4c2b@jc3131@chi-set! jc3131@chi-set!) (set! jc3133@verify-formals (lambda (jc41bc@fmls jc41bd@stx) (let ((jc41c0@t jc41bc@fmls)) (let ((jc41c2@ls/false (jc310d@syntax-dispatch jc41c0@t 'each-any))) (if jc41c2@ls/false (apply (lambda (jc41c4@x*) (if (not (jc2f0e@valid-bound-ids? jc41c4@x*)) (jc30c7@invalid-fmls-error jc41bd@stx jc41bc@fmls) (void))) jc41c2@ls/false) (let ((jc41c6@t jc41c0@t)) (let ((jc41c8@ls/false (jc310d@syntax-dispatch jc41c6@t '#(each+ any () any)))) (if jc41c8@ls/false (apply (lambda (jc41ca@x* jc41cb@x) (if (not (jc2f0e@valid-bound-ids? (cons jc41cb@x jc41ca@x*))) (jc30c7@invalid-fmls-error jc41bd@stx jc41bc@fmls) (void))) jc41c8@ls/false) (let ((jc41ce@t jc41c6@t)) (let ((jc41d0@ls/false (jc310d@syntax-dispatch jc41ce@t '_))) (if jc41d0@ls/false (apply (lambda () (jc31ed@syntax-violation '#f '"invalid syntax" jc41bd@stx)) jc41d0@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc41ce@t)))))))))))) (set! jc4c2c@jc3133@verify-formals jc3133@verify-formals) (set! jc3135@chi-lambda-clause (lambda (jc41d2@stx jc41d3@fmls jc41d4@body* jc41d5@r jc41d6@mr) (let ((jc41dc@t jc41d3@fmls)) (let ((jc41de@ls/false (jc310d@syntax-dispatch jc41dc@t 'each-any))) (if jc41de@ls/false (apply (lambda (jc41e0@x*) (begin (jc3133@verify-formals jc41d3@fmls jc41d2@stx) (let ((jc41e2@lex* (map jc2e8e@gen-lexical jc41e0@x*)) (jc41e3@lab* (map jc2e92@gen-label jc41e0@x*))) (values jc41e2@lex* (jc3145@chi-internal (jc2ef0@add-subst (jc2ec6@make-full-rib jc41e0@x* jc41e3@lab*) jc41d4@body*) (jc309f@add-lexicals jc41e3@lab* jc41e2@lex* jc41d5@r) jc41d6@mr))))) jc41de@ls/false) (let ((jc41e6@t jc41dc@t)) (let ((jc41e8@ls/false (jc310d@syntax-dispatch jc41e6@t '#(each+ any () any)))) (if jc41e8@ls/false (apply (lambda (jc41ea@x* jc41eb@x) (begin (jc3133@verify-formals jc41d3@fmls jc41d2@stx) (let ((jc41ee@lex* (map jc2e8e@gen-lexical jc41ea@x*)) (jc41ef@lab* (map jc2e92@gen-label jc41ea@x*)) (jc41f0@lex (jc2e8e@gen-lexical jc41eb@x)) (jc41f1@lab (jc2e92@gen-label jc41eb@x))) (values (append jc41ee@lex* jc41f0@lex) (jc3145@chi-internal (jc2ef0@add-subst (jc2ec6@make-full-rib (cons jc41eb@x jc41ea@x*) (cons jc41f1@lab jc41ef@lab*)) jc41d4@body*) (jc309f@add-lexicals (cons jc41f1@lab jc41ef@lab*) (cons jc41f0@lex jc41ee@lex*) jc41d5@r) jc41d6@mr))))) jc41e8@ls/false) (let ((jc41f6@t jc41e6@t)) (let ((jc41f8@ls/false (jc310d@syntax-dispatch jc41f6@t '_))) (if jc41f8@ls/false (apply (lambda () (jc31ed@syntax-violation '#f '"invalid syntax" jc41d3@fmls)) jc41f8@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc41f6@t)))))))))))) (set! jc4c2d@jc3135@chi-lambda-clause jc3135@chi-lambda-clause) (set! jc3137@chi-lambda-clause* (lambda (jc41fa@stx jc41fb@fmls* jc41fc@body** jc41fd@r jc41fe@mr) (if (null? jc41fb@fmls*) (values '() '()) (call-with-values (lambda () (jc3135@chi-lambda-clause jc41fa@stx (car jc41fb@fmls*) (car jc41fc@body**) jc41fd@r jc41fe@mr)) (lambda (jc4208@jc4205 jc4209@jc4207) (let ((jc420c@b jc4209@jc4207) (jc420d@a jc4208@jc4205)) (call-with-values (lambda () (jc3137@chi-lambda-clause* jc41fa@stx (cdr jc41fb@fmls*) (cdr jc41fc@body**) jc41fd@r jc41fe@mr)) (lambda (jc4214@jc4211 jc4215@jc4213) (let ((jc4218@b* jc4215@jc4213) (jc4219@a* jc4214@jc4211)) (values (cons jc420d@a jc4219@a*) (cons jc420c@b jc4218@b*))))))))))) (set! jc4c2e@jc3137@chi-lambda-clause* jc3137@chi-lambda-clause*) (set! jc3139@chi-defun (lambda (jc421c@x jc421d@r jc421e@mr) (let ((jc4222@fmls (car jc421c@x)) (jc4223@body* (cdr jc421c@x))) (call-with-values (lambda () (jc3135@chi-lambda-clause jc4222@fmls jc4222@fmls jc4223@body* jc421d@r jc421e@mr)) (lambda (jc422a@jc4227 jc422b@jc4229) (let ((jc422e@body jc422b@jc4229) (jc422f@fmls jc422a@jc4227)) (jc2e69@jc2d9b@build-lambda '#f jc422f@fmls jc422e@body))))))) (set! jc4c2f@jc3139@chi-defun jc3139@chi-defun) (set! jc313b@chi-rhs (lambda (jc4232@rhs jc4233@r jc4234@mr) (let ((jc4238@t (car jc4232@rhs))) (if (memv jc4238@t '(defun)) (jc3139@chi-defun (cdr jc4232@rhs) jc4233@r jc4234@mr) (if (memv jc4238@t '(expr)) (let ((jc423a@expr (cdr jc4232@rhs))) (jc312f@chi-expr jc423a@expr jc4233@r jc4234@mr)) (if (memv jc4238@t '(top-expr)) (let ((jc423c@expr (cdr jc4232@rhs))) (jc2e6b@jc2dcb@build-sequence '#f (list (jc312f@chi-expr jc423c@expr jc4233@r jc4234@mr) (jc2e6c@jc2dcd@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" jc4232@rhs))))))) (set! jc4c30@jc313b@chi-rhs jc313b@chi-rhs) (set! jc313d@expand-interaction-rhs*/init* (lambda (jc423e@lhs* jc423f@rhs* jc4240@init* jc4241@r jc4242@mr) (let jc424c@f ((jc4248@lhs* jc423e@lhs*) (jc4249@rhs* jc423f@rhs*)) (if (null? jc4248@lhs*) (map (lambda (jc424e@x) (jc312f@chi-expr jc424e@x jc4241@r jc4242@mr)) jc4240@init*) (let ((jc4250@lhs (car jc4248@lhs*)) (jc4251@rhs (car jc4249@rhs*))) (let ((jc4254@t (car jc4251@rhs))) (if (memv jc4254@t '(defun)) (let ((jc4256@rhs (jc3139@chi-defun (cdr jc4251@rhs) jc4241@r jc4242@mr))) (cons (list 'set! jc4250@lhs jc4256@rhs) (jc424c@f (cdr jc4248@lhs*) (cdr jc4249@rhs*)))) (if (memv jc4254@t '(expr)) (let ((jc4258@rhs (jc312f@chi-expr (cdr jc4251@rhs) jc4241@r jc4242@mr))) (cons (list 'set! jc4250@lhs jc4258@rhs) (jc424c@f (cdr jc4248@lhs*) (cdr jc4249@rhs*)))) (if (memv jc4254@t '(top-expr)) (let ((jc425a@e (jc312f@chi-expr (cdr jc4251@rhs) jc4241@r jc4242@mr))) (cons jc425a@e (jc424c@f (cdr jc4248@lhs*) (cdr jc4249@rhs*)))) (error 'expand-interaction '"invallid" jc4251@rhs)))))))))) (set! jc4c31@jc313d@expand-interaction-rhs*/init* jc313d@expand-interaction-rhs*/init*) (set! jc313f@chi-rhs* (lambda (jc425c@rhs* jc425d@r jc425e@mr) (let jc4264@f ((jc4262@ls jc425c@rhs*)) (if (null? jc4262@ls) '() (let ((jc4266@a (jc313b@chi-rhs (car jc4262@ls) jc425d@r jc425e@mr))) (cons jc4266@a (jc4264@f (cdr jc4262@ls)))))))) (set! jc4c32@jc313f@chi-rhs* jc313f@chi-rhs*) (set! jc3141@find-bound=? (lambda (jc4268@x jc4269@lhs* jc426a@rhs*) (if (null? jc4269@lhs*) '#f (if (jc2f0a@bound-id=? jc4268@x (car jc4269@lhs*)) (car jc426a@rhs*) (jc3141@find-bound=? jc4268@x (cdr jc4269@lhs*) (cdr jc426a@rhs*)))))) (set! jc4c33@jc3141@find-bound=? jc3141@find-bound=?) (set! jc3143@find-dups (lambda (jc426e@ls) (let jc4274@f ((jc4270@ls jc426e@ls) (jc4271@dups '())) (if (null? jc4270@ls) jc4271@dups (let ((jc4276@t (jc3141@find-bound=? (car jc4270@ls) (cdr jc4270@ls) (cdr jc4270@ls)))) (if jc4276@t ((lambda (jc4278@x) (jc4274@f (cdr jc4270@ls) (cons (list (car jc4270@ls) jc4278@x) jc4271@dups))) jc4276@t) (jc4274@f (cdr jc4270@ls) jc4271@dups))))))) (set! jc4c34@jc3143@find-dups jc3143@find-dups) (set! jc3145@chi-internal (lambda (jc427a@e* jc427b@r jc427c@mr) (let ((jc4280@rib (jc2eba@make-empty-rib))) (call-with-values (lambda () (jc3165@chi-body* (map (lambda (jc4292@x) (jc2ef0@add-subst jc4280@rib jc4292@x)) (jc2f04@syntax->list jc427a@e*)) jc427b@r jc427c@mr '() '() '() '() '() jc4280@rib '#f)) (lambda (jc4294@jc4283 jc4295@jc4285 jc4296@jc4287 jc4297@jc4289 jc4298@jc428b jc4299@jc428d jc429a@jc428f jc429b@jc4291) (let ((jc42a4@_exp* jc429b@jc4291) (jc42a5@kwd* jc429a@jc428f) (jc42a6@mod** jc4299@jc428d) (jc42a7@rhs* jc4298@jc428b) (jc42a8@lex* jc4297@jc4289) (jc42a9@mr jc4296@jc4287) (jc42aa@r jc4295@jc4285) (jc42ab@e* jc4294@jc4283)) (begin (if (null? jc42ab@e*) (jc31ed@syntax-violation '#f '"no expression in body" jc42ab@e*) (void)) (let ((jc42b4@init* (jc312b@chi-expr* (append (apply append (reverse jc42a6@mod**)) jc42ab@e*) jc42aa@r jc42a9@mr))) (let ((jc42b6@rhs* (jc313f@chi-rhs* jc42a7@rhs* jc42aa@r jc42a9@mr))) (jc2e70@jc2dd5@build-letrec* '#f (reverse jc42a8@lex*) (reverse jc42b6@rhs*) (jc2e6b@jc2dcb@build-sequence '#f jc42b4@init*))))))))))) (set! jc4c35@jc3145@chi-internal jc3145@chi-internal) (set! jc3147@parse-module (lambda (jc42b8@e) (let ((jc42ba@t jc42b8@e)) (let ((jc42bc@ls/false (jc310d@syntax-dispatch jc42ba@t '(_ each-any . each-any)))) (if jc42bc@ls/false (apply (lambda (jc42be@export* jc42bf@b*) (begin (if (not (for-all jc2f06@id? jc42be@export*)) (jc31ed@syntax-violation '#f '"module exports must be identifiers" jc42b8@e) (void)) (values '#f (list->vector jc42be@export*) jc42bf@b*))) jc42bc@ls/false) (let ((jc42c2@t jc42ba@t)) (let ((jc42c4@ls/false (jc310d@syntax-dispatch jc42c2@t '(_ any each-any . each-any)))) (if jc42c4@ls/false (apply (lambda (jc42c6@name jc42c7@export* jc42c8@b*) (begin (if (not (jc2f06@id? jc42c6@name)) (jc31ed@syntax-violation '#f '"module name must be an identifier" jc42b8@e) (void)) (if (not (for-all jc2f06@id? jc42c7@export*)) (jc31ed@syntax-violation '#f '"module exports must be identifiers" jc42b8@e) (void)) (values jc42c6@name (list->vector jc42c7@export*) jc42c8@b*))) jc42c4@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc42c2@t))))))))) (set! jc4c36@jc3147@parse-module jc3147@parse-module) (set! jc3151@module-interface? (lambda (jc42cc@x) (and (simple-struct? jc42cc@x) (eq? (simple-struct-name jc42cc@x) 'module-interface)))) (set! jc4c37@jc3151@module-interface? jc3151@module-interface?) (set! jc3153@module-interface-first-mark (lambda (jc42ce@x) (simple-struct-ref jc42ce@x '0))) (set! jc4c38@jc3153@module-interface-first-mark jc3153@module-interface-first-mark) (set! jc3155@set-module-interface-first-mark! (lambda (jc42d0@x jc42d1@val) (simple-struct-set! jc42d0@x '0 jc42d1@val))) (set! jc4c39@jc3155@set-module-interface-first-mark! jc3155@set-module-interface-first-mark!) (set! jc3157@module-interface-exp-id-vec (lambda (jc42d4@x) (simple-struct-ref jc42d4@x '1))) (set! jc4c3a@jc3157@module-interface-exp-id-vec jc3157@module-interface-exp-id-vec) (set! jc3159@set-module-interface-exp-id-vec! (lambda (jc42d6@x jc42d7@val) (simple-struct-set! jc42d6@x '1 jc42d7@val))) (set! jc4c3b@jc3159@set-module-interface-exp-id-vec! jc3159@set-module-interface-exp-id-vec!) (set! jc315b@module-interface-exp-lab-vec (lambda (jc42da@x) (simple-struct-ref jc42da@x '2))) (set! jc4c3c@jc315b@module-interface-exp-lab-vec jc315b@module-interface-exp-lab-vec) (set! jc315d@set-module-interface-exp-lab-vec! (lambda (jc42dc@x jc42dd@val) (simple-struct-set! jc42dc@x '2 jc42dd@val))) (set! jc4c3d@jc315d@set-module-interface-exp-lab-vec! jc315d@set-module-interface-exp-lab-vec!) (set! jc315f@dummy '3) (set! jc4c3e@jc315f@dummy jc315f@dummy) (set! jc3161@module-interface-exp-id* (lambda (jc42e0@iface jc42e1@id) (letrec* ((jc42e5@diff-marks (lambda (jc42ec@ls jc42ed@x) (begin (if (null? jc42ec@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((jc42f0@a (car jc42ec@ls))) (if (eq? jc42f0@a jc42ed@x) '() (cons jc42f0@a (jc42e5@diff-marks (cdr jc42ec@ls) jc42ed@x)))))))) (let ((jc42e6@diff (jc42e5@diff-marks (jc2ed8@stx-mark* jc42e1@id) (jc3153@module-interface-first-mark jc42e0@iface))) (jc42e7@id-vec (jc3157@module-interface-exp-id-vec jc42e0@iface))) (if (null? jc42e6@diff) jc42e7@id-vec (vector-map (lambda (jc42ea@x) (make-simple-struct 'stx '5 (list (jc2ed4@stx-expr jc42ea@x) (append jc42e6@diff (jc2ed8@stx-mark* jc42ea@x)) '() '()))) jc42e7@id-vec)))))) (set! jc4c3f@jc3161@module-interface-exp-id* jc3161@module-interface-exp-id*) (set! jc3163@chi-internal-module (lambda (jc42f2@e jc42f3@r jc42f4@mr jc42f5@lex* jc42f6@rhs* jc42f7@mod** jc42f8@kwd*) (call-with-values (lambda () (jc3147@parse-module jc42f2@e)) (lambda (jc4306@jc4301 jc4307@jc4303 jc4308@jc4305) (let ((jc430c@e* jc4308@jc4305) (jc430d@exp-id* jc4307@jc4303) (jc430e@name jc4306@jc4301)) (let ((jc4312@rib (jc2eba@make-empty-rib))) (let ((jc4314@e* (map (lambda (jc4316@x) (jc2ef0@add-subst jc4312@rib jc4316@x)) (jc2f04@syntax->list jc430c@e*)))) (call-with-values (lambda () (jc3165@chi-body* jc4314@e* jc42f3@r jc42f4@mr jc42f5@lex* jc42f6@rhs* jc42f7@mod** jc42f8@kwd* '() jc4312@rib '#f)) (lambda (jc4328@jc4319 jc4329@jc431b jc432a@jc431d jc432b@jc431f jc432c@jc4321 jc432d@jc4323 jc432e@jc4325 jc432f@jc4327) (let ((jc4338@_exp* jc432f@jc4327) (jc4339@kwd* jc432e@jc4325) (jc433a@mod** jc432d@jc4323) (jc433b@rhs* jc432c@jc4321) (jc433c@lex* jc432b@jc431f) (jc433d@mr jc432a@jc431d) (jc433e@r jc4329@jc431b) (jc433f@e* jc4328@jc4319)) (let ((jc4348@exp-lab* (vector-map (lambda (jc434c@x) (or (jc2f1c@id->label (make-simple-struct 'stx '5 (list (jc2f08@id->sym jc434c@x) (jc2ed8@stx-mark* jc434c@x) (list jc4312@rib) '()))) (jc31ed@syntax-violation '#f '"cannot find module export" jc434c@x))) jc430d@exp-id*)) (jc4349@mod** (cons jc433f@e* jc433a@mod**))) (if (not jc430e@name) (values jc433c@lex* jc433b@rhs* jc430d@exp-id* jc4348@exp-lab* jc433e@r jc433d@mr jc4349@mod** jc4339@kwd*) (let ((jc434e@lab (jc2e92@gen-label 'module)) (jc434f@iface (make-simple-struct 'module-interface '4 (list (car (jc2ed8@stx-mark* jc430e@name)) (vector-map (lambda (jc4352@x) (make-simple-struct 'stx '5 (list (jc2ed4@stx-expr jc4352@x) (jc2ed8@stx-mark* jc4352@x) '() '()))) jc430d@exp-id*) jc4348@exp-lab*)))) (values jc433c@lex* jc433b@rhs* (vector jc430e@name) (vector jc434e@lab) (cons (cons jc434e@lab (cons '$module jc434f@iface)) jc433e@r) (cons (cons jc434e@lab (cons '$module jc434f@iface)) jc433d@mr) jc4349@mod** jc4339@kwd*)))))))))))))) (set! jc4c40@jc3163@chi-internal-module jc3163@chi-internal-module) (set! jc3165@chi-body* (lambda (jc4354@e* jc4355@r jc4356@mr jc4357@lex* jc4358@rhs* jc4359@mod** jc435a@kwd* jc435b@exp* jc435c@rib jc435d@top?) (if (null? jc4354@e*) (values jc4354@e* jc4355@r jc4356@mr jc4357@lex* jc4358@rhs* jc4359@mod** jc435a@kwd* jc435b@exp*) (let ((jc4368@e (car jc4354@e*))) (call-with-values (lambda () (jc2f28@syntax-type jc4368@e jc4355@r)) (lambda (jc4370@jc436b jc4371@jc436d jc4372@jc436f) (let ((jc4376@kwd jc4372@jc436f) (jc4377@value jc4371@jc436d) (jc4378@type jc4370@jc436b)) (let ((jc437c@kwd* (if (jc2f06@id? jc4376@kwd) (cons jc4376@kwd jc435a@kwd*) jc435a@kwd*))) (let ((jc437e@t jc4378@type)) (if (memv jc437e@t '(define)) (call-with-values (lambda () (jc308f@parse-define jc4368@e)) (lambda (jc4384@jc4381 jc4385@jc4383) (let ((jc4388@rhs jc4385@jc4383) (jc4389@id jc4384@jc4381)) (begin (if (jc2f12@bound-id-member? jc4389@id jc437c@kwd*) (jc31ed@syntax-violation '#f '"cannot redefine keyword" jc4368@e) (void)) (call-with-values (lambda () (jc2e96@gen-define-label+loc jc4389@id jc435c@rib)) (lambda (jc4390@jc438d jc4391@jc438f) (let ((jc4394@lex jc4391@jc438f) (jc4395@lab jc4390@jc438d)) (begin (jc2ebc@extend-rib! jc435c@rib jc4389@id jc4395@lab) (jc3165@chi-body* (cdr jc4354@e*) (jc309d@add-lexical jc4395@lab jc4394@lex jc4355@r) jc4356@mr (cons jc4394@lex jc4357@lex*) (cons jc4388@rhs jc4358@rhs*) jc4359@mod** jc437c@kwd* jc435b@exp* jc435c@rib jc435d@top?))))))))) (if (memv jc437e@t '(define-syntax)) (call-with-values (lambda () (jc3091@parse-define-syntax jc4368@e)) (lambda (jc439c@jc4399 jc439d@jc439b) (let ((jc43a0@rhs jc439d@jc439b) (jc43a1@id jc439c@jc4399)) (begin (if (jc2f12@bound-id-member? jc43a1@id jc437c@kwd*) (jc31ed@syntax-violation '#f '"cannot redefine keyword" jc4368@e) (void)) (let ((jc43a4@lab (jc2e98@gen-define-label jc43a1@id jc435c@rib)) (jc43a5@expanded-rhs (jc3167@expand-transformer jc43a0@rhs jc4356@mr))) (begin (jc2ebc@extend-rib! jc435c@rib jc43a1@id jc43a4@lab) (let ((jc43a8@b (jc2f3e@make-eval-transformer jc43a5@expanded-rhs))) (jc3165@chi-body* (cdr jc4354@e*) (cons (cons jc43a4@lab jc43a8@b) jc4355@r) (cons (cons jc43a4@lab jc43a8@b) jc4356@mr) jc4357@lex* jc4358@rhs* jc4359@mod** jc437c@kwd* jc435b@exp* jc435c@rib jc435d@top?)))))))) (if (memv jc437e@t '(let-syntax letrec-syntax)) (let ((jc43aa@t jc4368@e)) (let ((jc43ac@ls/false (jc310d@syntax-dispatch jc43aa@t '(_ #(each (any any)) . each-any)))) (if (and jc43ac@ls/false (apply (lambda (jc43ae@xlhs* jc43af@xrhs* jc43b0@xbody*) (if (not (jc2f0e@valid-bound-ids? jc43ae@xlhs*)) (jc31ed@syntax-violation '#f '"invalid identifiers" jc4368@e) (void))) jc43ac@ls/false)) (apply (lambda (jc43b4@xlhs* jc43b5@xrhs* jc43b6@xbody*) (let ((jc43ba@xlab* (map jc2e92@gen-label jc43b4@xlhs*))) (let ((jc43bc@xrib (jc2ec6@make-full-rib jc43b4@xlhs* jc43ba@xlab*))) (let ((jc43be@xb* (map (lambda (jc43c0@x) (jc2f3e@make-eval-transformer (jc3167@expand-transformer (if (eq? jc4378@type 'let-syntax) jc43c0@x (jc2ef0@add-subst jc43bc@xrib jc43c0@x)) jc4356@mr))) jc43b5@xrhs*))) (jc3165@chi-body* (append (map (lambda (jc43c2@x) (jc2ef0@add-subst jc43bc@xrib jc43c2@x)) jc43b6@xbody*) (cdr jc4354@e*)) (append (map cons jc43ba@xlab* jc43be@xb*) jc4355@r) (append (map cons jc43ba@xlab* jc43be@xb*) jc4356@mr) jc4357@lex* jc4358@rhs* jc4359@mod** jc437c@kwd* jc435b@exp* jc435c@rib jc435d@top?))))) jc43ac@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc43aa@t)))) (if (memv jc437e@t '(begin)) (let ((jc43c4@t jc4368@e)) (let ((jc43c6@ls/false (jc310d@syntax-dispatch jc43c4@t '(_ . each-any)))) (if jc43c6@ls/false (apply (lambda (jc43c8@x*) (jc3165@chi-body* (append jc43c8@x* (cdr jc4354@e*)) jc4355@r jc4356@mr jc4357@lex* jc4358@rhs* jc4359@mod** jc437c@kwd* jc435b@exp* jc435c@rib jc435d@top?)) jc43c6@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc43c4@t)))) (if (memv jc437e@t '(global-macro global-macro!)) (jc3165@chi-body* (cons (jc3129@chi-global-macro jc4377@value jc4368@e jc435c@rib) (cdr jc4354@e*)) jc4355@r jc4356@mr jc4357@lex* jc4358@rhs* jc4359@mod** jc437c@kwd* jc435b@exp* jc435c@rib jc435d@top?) (if (memv jc437e@t '(local-macro local-macro!)) (jc3165@chi-body* (cons (jc3127@chi-local-macro jc4377@value jc4368@e jc435c@rib) (cdr jc4354@e*)) jc4355@r jc4356@mr jc4357@lex* jc4358@rhs* jc4359@mod** jc437c@kwd* jc435b@exp* jc435c@rib jc435d@top?) (if (memv jc437e@t '(macro macro!)) (jc3165@chi-body* (cons (jc3125@chi-macro jc4377@value jc4368@e jc435c@rib) (cdr jc4354@e*)) jc4355@r jc4356@mr jc4357@lex* jc4358@rhs* jc4359@mod** jc437c@kwd* jc435b@exp* jc435c@rib jc435d@top?) (if (memv jc437e@t '(module)) (call-with-values (lambda () (jc3163@chi-internal-module jc4368@e jc4355@r jc4356@mr jc4357@lex* jc4358@rhs* jc4359@mod** jc437c@kwd*)) (lambda (jc43da@jc43cb jc43db@jc43cd jc43dc@jc43cf jc43dd@jc43d1 jc43de@jc43d3 jc43df@jc43d5 jc43e0@jc43d7 jc43e1@jc43d9) (let ((jc43ea@kwd* jc43e1@jc43d9) (jc43eb@mod** jc43e0@jc43d7) (jc43ec@mr jc43df@jc43d5) (jc43ed@r jc43de@jc43d3) (jc43ee@m-exp-lab* jc43dd@jc43d1) (jc43ef@m-exp-id* jc43dc@jc43cf) (jc43f0@rhs* jc43db@jc43cd) (jc43f1@lex* jc43da@jc43cb)) (begin (vector-for-each (lambda (jc43fa@id jc43fb@lab) (jc2ebc@extend-rib! jc435c@rib jc43fa@id jc43fb@lab)) jc43ef@m-exp-id* jc43ee@m-exp-lab*) (jc3165@chi-body* (cdr jc4354@e*) jc43ed@r jc43ec@mr jc43f1@lex* jc43f0@rhs* jc43eb@mod** jc43ea@kwd* jc435b@exp* jc435c@rib jc435d@top?))))) (if (memv jc437e@t '(library)) (begin (jc31cf@library-expander (jc2f1a@stx->datum jc4368@e)) (jc3165@chi-body* (cdr jc4354@e*) jc4355@r jc4356@mr jc4357@lex* jc4358@rhs* jc4359@mod** jc437c@kwd* jc435b@exp* jc435c@rib jc435d@top?)) (if (memv jc437e@t '(export)) (let ((jc43fe@t jc4368@e)) (let ((jc4400@ls/false (jc310d@syntax-dispatch jc43fe@t '(_ . each-any)))) (if jc4400@ls/false (apply (lambda (jc4402@exp-decl*) (jc3165@chi-body* (cdr jc4354@e*) jc4355@r jc4356@mr jc4357@lex* jc4358@rhs* jc4359@mod** jc437c@kwd* (append jc4402@exp-decl* jc435b@exp*) jc435c@rib jc435d@top?)) jc4400@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc43fe@t)))) (if (memv jc437e@t '(import)) (letrec* ((jc4405@module-import? (lambda (jc4458@e) (let ((jc445a@t jc4458@e)) (let ((jc445c@ls/false (jc310d@syntax-dispatch jc445a@t '(_ any)))) (if (and jc445c@ls/false (apply (lambda (jc445e@id) (jc2f06@id? jc445e@id)) jc445c@ls/false)) (apply (lambda (jc4460@id) '#t) jc445c@ls/false) (let ((jc4462@t jc445a@t)) (let ((jc4464@ls/false (jc310d@syntax-dispatch jc4462@t '(_ . each-any)))) (if jc4464@ls/false (apply (lambda (jc4466@imp*) '#f) jc4464@ls/false) (let ((jc4468@t jc4462@t)) (let ((jc446a@ls/false (jc310d@syntax-dispatch jc4468@t '_))) (if jc446a@ls/false (apply (lambda () (jc31ed@syntax-violation '#f '"malformed import form" jc4458@e)) jc446a@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc4468@t)))))))))))) (jc4407@module-import (lambda (jc4436@e jc4437@r) (let ((jc443a@t jc4436@e)) (let ((jc443c@ls/false (jc310d@syntax-dispatch jc443a@t '(_ any)))) (if (and jc443c@ls/false (apply (lambda (jc443e@id) (jc2f06@id? jc443e@id)) jc443c@ls/false)) (apply (lambda (jc4440@id) (call-with-values (lambda () (jc2f28@syntax-type jc4440@id jc4437@r)) (lambda (jc4448@jc4443 jc4449@jc4445 jc444a@jc4447) (let ((jc444e@kwd jc444a@jc4447) (jc444f@value jc4449@jc4445) (jc4450@type jc4448@jc4443)) (let ((jc4454@t jc4450@type)) (if (memv jc4454@t '($module)) (let ((jc4456@iface jc444f@value)) (values (jc3161@module-interface-exp-id* jc4456@iface jc4440@id) (jc315b@module-interface-exp-lab-vec jc4456@iface))) (jc31ed@syntax-violation '#f '"invalid import" jc4436@e))))))) jc443c@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc443a@t)))))) (jc4409@library-import (lambda (jc441a@e) (let ((jc441c@t jc441a@e)) (let ((jc441e@ls/false (jc310d@syntax-dispatch jc441c@t '(any . each-any)))) (if jc441e@ls/false (apply (lambda (jc4420@ctxt jc4421@imp*) (call-with-values (lambda () (jc316f@parse-import-spec* (jc31f3@syntax->datum jc4421@imp*))) (lambda (jc4428@jc4425 jc4429@jc4427) (let ((jc442c@subst-labels jc4429@jc4427) (jc442d@subst-names jc4428@jc4425)) (values (vector-map (lambda (jc4430@name) (jc2ee6@datum->stx jc4420@ctxt jc4430@name)) jc442d@subst-names) jc442c@subst-labels))))) jc441e@ls/false) (let ((jc4432@t jc441c@t)) (let ((jc4434@ls/false (jc310d@syntax-dispatch jc4432@t '_))) (if jc4434@ls/false (apply (lambda () (jc31ed@syntax-violation '#f '"invalid import form" jc441a@e)) jc4434@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc4432@t)))))))))) (begin (call-with-values (lambda () (if (jc4405@module-import? jc4368@e) (jc4407@module-import jc4368@e jc4355@r) (jc4409@library-import jc4368@e))) (lambda (jc440e@jc440b jc440f@jc440d) (let ((jc4412@lab* jc440f@jc440d) (jc4413@id* jc440e@jc440b)) (vector-for-each (lambda (jc4416@id jc4417@lab) (jc2ebc@extend-rib! jc435c@rib jc4416@id jc4417@lab)) jc4413@id* jc4412@lab*)))) (jc3165@chi-body* (cdr jc4354@e*) jc4355@r jc4356@mr jc4357@lex* jc4358@rhs* jc4359@mod** jc437c@kwd* jc435b@exp* jc435c@rib jc435d@top?))) (if jc435d@top? (jc3165@chi-body* (cdr jc4354@e*) jc4355@r jc4356@mr (cons (jc2e8e@gen-lexical 'dummy) jc4357@lex*) (cons (cons 'top-expr jc4368@e) jc4358@rhs*) jc4359@mod** jc437c@kwd* jc435b@exp* jc435c@rib jc435d@top?) (values jc4354@e* jc4355@r jc4356@mr jc4357@lex* jc4358@rhs* jc4359@mod** jc437c@kwd* jc435b@exp*)))))))))))))))))))))) (set! jc4c41@jc3165@chi-body* jc3165@chi-body*) (set! jc3167@expand-transformer (lambda (jc446c@expr jc446d@r) (let ((jc4470@rtc (jc3173@make-collector))) (let ((jc4472@expanded-rhs (let ((jc447c@jc4475 jc3175@inv-collector) (jc447d@jc4477 jc3177@vis-collector) (jc447e@jc4479 jc4470@rtc) (jc447f@jc447b (lambda (jc4484@x) (values)))) (let ((jc4486@swap (lambda () (begin (let ((jc4488@t (jc447c@jc4475))) (begin (jc447c@jc4475 jc447e@jc4479) (set! jc447e@jc4479 jc4488@t))) (let ((jc448a@t (jc447d@jc4477))) (begin (jc447d@jc4477 jc447f@jc447b) (set! jc447f@jc447b jc448a@t))))))) (dynamic-wind jc4486@swap (lambda () (jc312f@chi-expr jc446c@expr jc446d@r jc446d@r)) jc4486@swap))))) (begin (for-each (let ((jc448c@mark-visit (jc3177@vis-collector))) (lambda (jc448e@x) (begin (jc2d22@jc2b70@invoke-library jc448e@x) (jc448c@mark-visit jc448e@x)))) (jc4470@rtc)) jc4472@expanded-rhs))))) (set! jc4c42@jc3167@expand-transformer jc3167@expand-transformer) (set! jc3169@parse-exports (lambda (jc4490@exp*) (let jc4498@f ((jc4492@exp* jc4490@exp*) (jc4493@int* '()) (jc4494@ext* '())) (if (null? jc4492@exp*) (begin (if (not (jc2f0e@valid-bound-ids? jc4494@ext*)) (jc31ed@syntax-violation 'export '"invalid exports" (jc3143@find-dups jc4494@ext*)) (void)) (values (map jc31f3@syntax->datum jc4494@ext*) jc4493@int*)) (let ((jc449a@t (car jc4492@exp*))) (let ((jc449c@ls/false (jc310d@syntax-dispatch jc449a@t '(any . #(each (any any)))))) (if jc449c@ls/false (apply (lambda (jc449e@rename jc449f@i* jc44a0@e*) (begin (if (not (and (eq? (jc31f3@syntax->datum jc449e@rename) 'rename) (for-all jc2f06@id? jc449f@i*) (for-all jc2f06@id? jc44a0@e*))) (jc31ed@syntax-violation 'export '"invalid export specifier" (car jc4492@exp*)) (void)) (jc4498@f (cdr jc4492@exp*) (append jc449f@i* jc4493@int*) (append jc44a0@e* jc4494@ext*)))) jc449c@ls/false) (let ((jc44a4@t jc449a@t)) (let ((jc44a6@ls/false (jc310d@syntax-dispatch jc44a4@t 'any))) (if jc44a6@ls/false (apply (lambda (jc44a8@ie) (begin (if (not (jc2f06@id? jc44a8@ie)) (jc31ed@syntax-violation 'export '"invalid export" jc44a8@ie) (void)) (jc4498@f (cdr jc4492@exp*) (cons jc44a8@ie jc4493@int*) (cons jc44a8@ie jc4494@ext*)))) jc44a6@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc44a4@t))))))))))) (set! jc4c43@jc3169@parse-exports jc3169@parse-exports) (set! jc316b@parse-library-name (lambda (jc44aa@spec) (letrec* ((jc44ad@parse (lambda (jc44ba@x) (let ((jc44bc@t jc44ba@x)) (let ((jc44be@ls/false (jc310d@syntax-dispatch jc44bc@t '(each-any)))) (if (and jc44be@ls/false (apply (lambda (jc44c0@v*) (for-all (lambda (jc44c2@x) (let ((jc44c4@x (jc31f3@syntax->datum jc44c2@x))) (and (integer? jc44c4@x) (exact? jc44c4@x)))) jc44c0@v*)) jc44be@ls/false)) (apply (lambda (jc44c6@v*) (values '() (map jc31f3@syntax->datum jc44c6@v*))) jc44be@ls/false) (let ((jc44c8@t jc44bc@t)) (let ((jc44ca@ls/false (jc310d@syntax-dispatch jc44c8@t '(any . any)))) (if (and jc44ca@ls/false (apply (lambda (jc44cc@x jc44cd@rest) (symbol? (jc31f3@syntax->datum jc44cc@x))) jc44ca@ls/false)) (apply (lambda (jc44d0@x jc44d1@rest) (call-with-values (lambda () (jc44ad@parse jc44d1@rest)) (lambda (jc44d8@jc44d5 jc44d9@jc44d7) (let ((jc44dc@v* jc44d9@jc44d7) (jc44dd@x* jc44d8@jc44d5)) (values (cons (jc31f3@syntax->datum jc44d0@x) jc44dd@x*) jc44dc@v*))))) jc44ca@ls/false) (let ((jc44e0@t jc44c8@t)) (let ((jc44e2@ls/false (jc310d@syntax-dispatch jc44e0@t '()))) (if jc44e2@ls/false (apply (lambda () (values '() '())) jc44e2@ls/false) (let ((jc44e4@t jc44e0@t)) (let ((jc44e6@ls/false (jc310d@syntax-dispatch jc44e4@t '_))) (if jc44e6@ls/false (apply (lambda () (jc31ed@syntax-violation '#f '"invalid library name" jc44aa@spec)) jc44e6@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc44e4@t)))))))))))))))) (call-with-values (lambda () (jc44ad@parse jc44aa@spec)) (lambda (jc44b2@jc44af jc44b3@jc44b1) (let ((jc44b6@ver* jc44b3@jc44b1) (jc44b7@name* jc44b2@jc44af)) (begin (if (null? jc44b7@name*) (jc31ed@syntax-violation '#f '"empty library name" jc44aa@spec) (void)) (values jc44b7@name* jc44b6@ver*)))))))) (set! jc4c44@jc316b@parse-library-name jc316b@parse-library-name) (set! jc316d@parse-library (lambda (jc44e8@e) (let ((jc44ea@t jc44e8@e)) (let ((jc44ec@ls/false (jc310d@syntax-dispatch jc44ea@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and jc44ec@ls/false (apply (lambda (jc44ee@library jc44ef@name* jc44f0@export jc44f1@exp* jc44f2@import jc44f3@imp* jc44f4@b*) (and (eq? (jc31f3@syntax->datum jc44f0@export) 'export) (eq? (jc31f3@syntax->datum jc44f2@import) 'import) (eq? (jc31f3@syntax->datum jc44ee@library) 'library))) jc44ec@ls/false)) (apply (lambda (jc44fc@library jc44fd@name* jc44fe@export jc44ff@exp* jc4500@import jc4501@imp* jc4502@b*) (values jc44fd@name* jc44ff@exp* jc4501@imp* jc4502@b*)) jc44ec@ls/false) (let ((jc450a@t jc44ea@t)) (let ((jc450c@ls/false (jc310d@syntax-dispatch jc450a@t '_))) (if jc450c@ls/false (apply (lambda () (jc31ed@syntax-violation '#f '"malformed library" jc44e8@e)) jc450c@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc450a@t))))))))) (set! jc4c45@jc316d@parse-library jc316d@parse-library) (set! jc316f@parse-import-spec* (letrec* ((jc450f@idsyn? (lambda (jc4718@x) (symbol? (jc31f3@syntax->datum jc4718@x)))) (jc4511@dup-error (lambda (jc4716@name) (jc31ed@syntax-violation 'import '"two imports with different bindings" jc4716@name))) (jc4513@merge-substs (lambda (jc4704@s jc4705@subst) (letrec* ((jc4709@insert-to-subst (lambda (jc470a@a jc470b@subst) (let ((jc470e@name (car jc470a@a)) (jc470f@label (cdr jc470a@a))) (let ((jc4712@t (assq jc470e@name jc470b@subst))) (if jc4712@t ((lambda (jc4714@x) (if (eq? (cdr jc4714@x) jc470f@label) jc470b@subst (jc4511@dup-error jc470e@name))) jc4712@t) (cons jc470a@a jc470b@subst))))))) (if (null? jc4704@s) jc4705@subst (jc4709@insert-to-subst (car jc4704@s) (jc4513@merge-substs (cdr jc4704@s) jc4705@subst)))))) (jc4515@exclude* (lambda (jc46d4@sym* jc46d5@subst) (letrec* ((jc46d9@exclude (lambda (jc46f2@sym jc46f3@subst) (if (null? jc46f3@subst) (jc31ed@syntax-violation 'import '"cannot rename unbound identifier" jc46f2@sym) (if (eq? jc46f2@sym (caar jc46f3@subst)) (values (cdar jc46f3@subst) (cdr jc46f3@subst)) (let ((jc46f6@a (car jc46f3@subst))) (call-with-values (lambda () (jc46d9@exclude jc46f2@sym (cdr jc46f3@subst))) (lambda (jc46fc@jc46f9 jc46fd@jc46fb) (let ((jc4700@subst jc46fd@jc46fb) (jc4701@old jc46fc@jc46f9)) (values jc4701@old (cons jc46f6@a jc4700@subst))))))))))) (if (null? jc46d4@sym*) (values '() jc46d5@subst) (call-with-values (lambda () (jc46d9@exclude (car jc46d4@sym*) jc46d5@subst)) (lambda (jc46de@jc46db jc46df@jc46dd) (let ((jc46e2@subst jc46df@jc46dd) (jc46e3@old jc46de@jc46db)) (call-with-values (lambda () (jc4515@exclude* (cdr jc46d4@sym*) jc46e2@subst)) (lambda (jc46ea@jc46e7 jc46eb@jc46e9) (let ((jc46ee@subst jc46eb@jc46e9) (jc46ef@old* jc46ea@jc46e7)) (values (cons jc46e3@old jc46ef@old*) jc46ee@subst))))))))))) (jc4517@find* (lambda (jc46cc@sym* jc46cd@subst) (map (lambda (jc46d0@x) (let ((jc46d2@t (assq jc46d0@x jc46cd@subst))) (if jc46d2@t (cdr jc46d2@t) (jc31ed@syntax-violation 'import '"cannot find identifier" jc46d0@x)))) jc46cc@sym*))) (jc4519@rem* (lambda (jc46c4@sym* jc46c5@subst) (let jc46ca@f ((jc46c8@subst jc46c5@subst)) (if (null? jc46c8@subst) '() (if (memq (caar jc46c8@subst) jc46c4@sym*) (jc46ca@f (cdr jc46c8@subst)) (cons (car jc46c8@subst) (jc46ca@f (cdr jc46c8@subst)))))))) (jc451b@remove-dups (lambda (jc46c2@ls) (if (null? jc46c2@ls) '() (if (memq (car jc46c2@ls) (cdr jc46c2@ls)) (jc451b@remove-dups (cdr jc46c2@ls)) (cons (car jc46c2@ls) (jc451b@remove-dups (cdr jc46c2@ls))))))) (jc451d@parse-library-name (lambda (jc45da@spec) (letrec* ((jc45dd@subversion? (lambda (jc46be@x) (let ((jc46c0@x (jc31f3@syntax->datum jc46be@x))) (and (integer? jc46c0@x) (exact? jc46c0@x) (>= jc46c0@x '0))))) (jc45df@subversion-pred (lambda (jc465e@x*) (let ((jc4660@t jc465e@x*)) (let ((jc4662@ls/false (jc310d@syntax-dispatch jc4660@t 'any))) (if (and jc4662@ls/false (apply (lambda (jc4664@n) (jc45dd@subversion? jc4664@n)) jc4662@ls/false)) (apply (lambda (jc4666@n) (lambda (jc4668@x) (= jc4668@x (jc31f3@syntax->datum jc4666@n)))) jc4662@ls/false) (let ((jc466a@t jc4660@t)) (let ((jc466c@ls/false (jc310d@syntax-dispatch jc466a@t '(any . each-any)))) (if (and jc466c@ls/false (apply (lambda (jc466e@p? jc466f@sub*) (eq? (jc31f3@syntax->datum jc466e@p?) 'and)) jc466c@ls/false)) (apply (lambda (jc4672@p? jc4673@sub*) (let ((jc4676@p* (map jc45df@subversion-pred jc4673@sub*))) (lambda (jc4678@x) (for-all (lambda (jc467a@p) (jc467a@p jc4678@x)) jc4676@p*)))) jc466c@ls/false) (let ((jc467c@t jc466a@t)) (let ((jc467e@ls/false (jc310d@syntax-dispatch jc467c@t '(any . each-any)))) (if (and jc467e@ls/false (apply (lambda (jc4680@p? jc4681@sub*) (eq? (jc31f3@syntax->datum jc4680@p?) 'or)) jc467e@ls/false)) (apply (lambda (jc4684@p? jc4685@sub*) (let ((jc4688@p* (map jc45df@subversion-pred jc4685@sub*))) (lambda (jc468a@x) (exists (lambda (jc468c@p) (jc468c@p jc468a@x)) jc4688@p*)))) jc467e@ls/false) (let ((jc468e@t jc467c@t)) (let ((jc4690@ls/false (jc310d@syntax-dispatch jc468e@t '(any any)))) (if (and jc4690@ls/false (apply (lambda (jc4692@p? jc4693@sub) (eq? (jc31f3@syntax->datum jc4692@p?) 'not)) jc4690@ls/false)) (apply (lambda (jc4696@p? jc4697@sub) (let ((jc469a@p (jc45df@subversion-pred jc4697@sub))) (lambda (jc469c@x) (not (jc469a@p jc469c@x))))) jc4690@ls/false) (let ((jc469e@t jc468e@t)) (let ((jc46a0@ls/false (jc310d@syntax-dispatch jc469e@t '(any any)))) (if (and jc46a0@ls/false (apply (lambda (jc46a2@p? jc46a3@n) (and (eq? (jc31f3@syntax->datum jc46a2@p?) '<=) (jc45dd@subversion? jc46a3@n))) jc46a0@ls/false)) (apply (lambda (jc46a6@p? jc46a7@n) (lambda (jc46aa@x) (<= jc46aa@x (jc31f3@syntax->datum jc46a7@n)))) jc46a0@ls/false) (let ((jc46ac@t jc469e@t)) (let ((jc46ae@ls/false (jc310d@syntax-dispatch jc46ac@t '(any any)))) (if (and jc46ae@ls/false (apply (lambda (jc46b0@p? jc46b1@n) (and (eq? (jc31f3@syntax->datum jc46b0@p?) '>=) (jc45dd@subversion? jc46b1@n))) jc46ae@ls/false)) (apply (lambda (jc46b4@p? jc46b5@n) (lambda (jc46b8@x) (>= jc46b8@x (jc31f3@syntax->datum jc46b5@n)))) jc46ae@ls/false) (let ((jc46ba@t jc46ac@t)) (let ((jc46bc@ls/false (jc310d@syntax-dispatch jc46ba@t '_))) (if jc46bc@ls/false (apply (lambda () (jc31ed@syntax-violation 'import '"invalid sub-version spec" jc45da@spec jc465e@x*)) jc46bc@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc46ba@t)))))))))))))))))))))))) (jc45e1@version-pred (lambda (jc460e@x*) (let ((jc4610@t jc460e@x*)) (let ((jc4612@ls/false (jc310d@syntax-dispatch jc4610@t '()))) (if jc4612@ls/false (apply (lambda () (lambda (jc4614@x) '#t)) jc4612@ls/false) (let ((jc4616@t jc4610@t)) (let ((jc4618@ls/false (jc310d@syntax-dispatch jc4616@t '(any . each-any)))) (if (and jc4618@ls/false (apply (lambda (jc461a@c jc461b@ver*) (eq? (jc31f3@syntax->datum jc461a@c) 'and)) jc4618@ls/false)) (apply (lambda (jc461e@c jc461f@ver*) (let ((jc4622@p* (map jc45e1@version-pred jc461f@ver*))) (lambda (jc4624@x) (for-all (lambda (jc4626@p) (jc4626@p jc4624@x)) jc4622@p*)))) jc4618@ls/false) (let ((jc4628@t jc4616@t)) (let ((jc462a@ls/false (jc310d@syntax-dispatch jc4628@t '(any . each-any)))) (if (and jc462a@ls/false (apply (lambda (jc462c@c jc462d@ver*) (eq? (jc31f3@syntax->datum jc462c@c) 'or)) jc462a@ls/false)) (apply (lambda (jc4630@c jc4631@ver*) (let ((jc4634@p* (map jc45e1@version-pred jc4631@ver*))) (lambda (jc4636@x) (exists (lambda (jc4638@p) (jc4638@p jc4636@x)) jc4634@p*)))) jc462a@ls/false) (let ((jc463a@t jc4628@t)) (let ((jc463c@ls/false (jc310d@syntax-dispatch jc463a@t '(any any)))) (if (and jc463c@ls/false (apply (lambda (jc463e@c jc463f@ver) (eq? (jc31f3@syntax->datum jc463e@c) 'not)) jc463c@ls/false)) (apply (lambda (jc4642@c jc4643@ver) (let ((jc4646@p (jc45e1@version-pred jc4643@ver))) (lambda (jc4648@x) (not (jc4646@p jc4648@x))))) jc463c@ls/false) (let ((jc464a@t jc463a@t)) (let ((jc464c@ls/false (jc310d@syntax-dispatch jc464a@t 'each-any))) (if jc464c@ls/false (apply (lambda (jc464e@sub*) (let ((jc4650@p* (map jc45df@subversion-pred jc464e@sub*))) (lambda (jc4652@x) (let jc4658@f ((jc4654@p* jc4650@p*) (jc4655@x jc4652@x)) (if (null? jc4654@p*) '#t (if (null? jc4655@x) '#f (and ((car jc4654@p*) (car jc4655@x)) (jc4658@f (cdr jc4654@p*) (cdr jc4655@x))))))))) jc464c@ls/false) (let ((jc465a@t jc464a@t)) (let ((jc465c@ls/false (jc310d@syntax-dispatch jc465a@t '_))) (if jc465c@ls/false (apply (lambda () (jc31ed@syntax-violation 'import '"invalid version spec" jc45da@spec jc460e@x*)) jc465c@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc465a@t)))))))))))))))))))))) (let jc45e4@f ((jc45e2@x jc45da@spec)) (let ((jc45e6@t jc45e2@x)) (let ((jc45e8@ls/false (jc310d@syntax-dispatch jc45e6@t '(each-any)))) (if jc45e8@ls/false (apply (lambda (jc45ea@version-spec*) (values '() (jc45e1@version-pred jc45ea@version-spec*))) jc45e8@ls/false) (let ((jc45ec@t jc45e6@t)) (let ((jc45ee@ls/false (jc310d@syntax-dispatch jc45ec@t '(any . any)))) (if (and jc45ee@ls/false (apply (lambda (jc45f0@x jc45f1@x*) (jc450f@idsyn? jc45f0@x)) jc45ee@ls/false)) (apply (lambda (jc45f4@x jc45f5@x*) (call-with-values (lambda () (jc45e4@f jc45f5@x*)) (lambda (jc45fc@jc45f9 jc45fd@jc45fb) (let ((jc4600@pred jc45fd@jc45fb) (jc4601@name jc45fc@jc45f9)) (values (cons (jc31f3@syntax->datum jc45f4@x) jc4601@name) jc4600@pred))))) jc45ee@ls/false) (let ((jc4604@t jc45ec@t)) (let ((jc4606@ls/false (jc310d@syntax-dispatch jc4604@t '()))) (if jc4606@ls/false (apply (lambda () (values '() (lambda (jc4608@x) '#t))) jc4606@ls/false) (let ((jc460a@t jc4604@t)) (let ((jc460c@ls/false (jc310d@syntax-dispatch jc460a@t '_))) (if jc460c@ls/false (apply (lambda () (jc31ed@syntax-violation '#f '"invalid import spec" jc45da@spec)) jc460c@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc460a@t))))))))))))))))) (jc451f@import-library (lambda (jc45ca@spec*) (call-with-values (lambda () (jc451d@parse-library-name jc45ca@spec*)) (lambda (jc45d0@jc45cd jc45d1@jc45cf) (let ((jc45d4@pred jc45d1@jc45cf) (jc45d5@name jc45d0@jc45cd)) (begin (if (null? jc45d5@name) (jc31ed@syntax-violation 'import '"empty library name" jc45ca@spec*) (void)) (let ((jc45d8@lib (jc2d1b@jc2b62@find-library-by-name jc45d5@name))) (begin (if (not jc45d8@lib) (jc31ed@syntax-violation 'import '"cannot find library with required name" jc45d5@name) (void)) (if (not (jc45d4@pred (jc2cf5@jc2b16@library-version jc45d8@lib))) (jc31ed@syntax-violation 'import '"library does not satisfy version specification" jc45ca@spec* jc45d8@lib) (void)) ((jc3179@imp-collector) jc45d8@lib) (jc2cfd@jc2b26@library-subst jc45d8@lib))))))))) (jc4521@get-import (lambda (jc453c@spec) (let ((jc453e@t jc453c@spec)) (let ((jc4540@ls/false (jc310d@syntax-dispatch jc453e@t '(any . each-any)))) (if (and jc4540@ls/false (apply (lambda (jc4542@x jc4543@x*) (not (memq (jc31f3@syntax->datum jc4542@x) '(for rename except only prefix library)))) jc4540@ls/false)) (apply (lambda (jc4546@x jc4547@x*) (jc451f@import-library (cons jc4546@x jc4547@x*))) jc4540@ls/false) (let ((jc454a@t jc453e@t)) (let ((jc454c@ls/false (jc310d@syntax-dispatch jc454a@t '(any any . #(each (any any)))))) (if (and jc454c@ls/false (apply (lambda (jc454e@rename jc454f@isp jc4550@old* jc4551@new*) (and (eq? (jc31f3@syntax->datum jc454e@rename) 'rename) (for-all jc450f@idsyn? jc4550@old*) (for-all jc450f@idsyn? jc4551@new*))) jc454c@ls/false)) (apply (lambda (jc4556@rename jc4557@isp jc4558@old* jc4559@new*) (let ((jc455e@subst (jc4521@get-import jc4557@isp)) (jc455f@old* (map jc31f3@syntax->datum jc4558@old*)) (jc4560@new* (map jc31f3@syntax->datum jc4559@new*))) (let ((jc4564@old-label* (jc4517@find* jc455f@old* jc455e@subst))) (let ((jc4566@subst (jc4519@rem* jc455f@old* jc455e@subst))) (jc4513@merge-substs (map cons jc4560@new* jc4564@old-label*) jc4566@subst))))) jc454c@ls/false) (let ((jc4568@t jc454a@t)) (let ((jc456a@ls/false (jc310d@syntax-dispatch jc4568@t '(any any . each-any)))) (if (and jc456a@ls/false (apply (lambda (jc456c@except jc456d@isp jc456e@sym*) (and (eq? (jc31f3@syntax->datum jc456c@except) 'except) (for-all jc450f@idsyn? jc456e@sym*))) jc456a@ls/false)) (apply (lambda (jc4572@except jc4573@isp jc4574@sym*) (let ((jc4578@subst (jc4521@get-import jc4573@isp))) (jc4519@rem* (map jc31f3@syntax->datum jc4574@sym*) jc4578@subst))) jc456a@ls/false) (let ((jc457a@t jc4568@t)) (let ((jc457c@ls/false (jc310d@syntax-dispatch jc457a@t '(any any . each-any)))) (if (and jc457c@ls/false (apply (lambda (jc457e@only jc457f@isp jc4580@sym*) (and (eq? (jc31f3@syntax->datum jc457e@only) 'only) (for-all jc450f@idsyn? jc4580@sym*))) jc457c@ls/false)) (apply (lambda (jc4584@only jc4585@isp jc4586@sym*) (let ((jc458a@subst (jc4521@get-import jc4585@isp)) (jc458b@sym* (map jc31f3@syntax->datum jc4586@sym*))) (let ((jc458e@sym* (jc451b@remove-dups jc458b@sym*))) (let ((jc4590@lab* (jc4517@find* jc458e@sym* jc458a@subst))) (map cons jc458e@sym* jc4590@lab*))))) jc457c@ls/false) (let ((jc4592@t jc457a@t)) (let ((jc4594@ls/false (jc310d@syntax-dispatch jc4592@t '(any any any)))) (if (and jc4594@ls/false (apply (lambda (jc4596@prefix jc4597@isp jc4598@p) (and (eq? (jc31f3@syntax->datum jc4596@prefix) 'prefix) (jc450f@idsyn? jc4598@p))) jc4594@ls/false)) (apply (lambda (jc459c@prefix jc459d@isp jc459e@p) (let ((jc45a2@subst (jc4521@get-import jc459d@isp)) (jc45a3@prefix (symbol->string (jc31f3@syntax->datum jc459e@p)))) (map (lambda (jc45a6@x) (cons (string->symbol (string-append jc45a3@prefix (symbol->string (car jc45a6@x)))) (cdr jc45a6@x))) jc45a2@subst))) jc4594@ls/false) (let ((jc45a8@t jc4592@t)) (let ((jc45aa@ls/false (jc310d@syntax-dispatch jc45a8@t '(any each-any)))) (if (and jc45aa@ls/false (apply (lambda (jc45ac@library jc45ad@spec*) (eq? (jc31f3@syntax->datum jc45ac@library) 'library)) jc45aa@ls/false)) (apply (lambda (jc45b0@library jc45b1@spec*) (jc451f@import-library jc45b1@spec*)) jc45aa@ls/false) (let ((jc45b4@t jc45a8@t)) (let ((jc45b6@ls/false (jc310d@syntax-dispatch jc45b4@t '(any any . any)))) (if (and jc45b6@ls/false (apply (lambda (jc45b8@for jc45b9@isp jc45ba@rest) (eq? (jc31f3@syntax->datum jc45b8@for) 'for)) jc45b6@ls/false)) (apply (lambda (jc45be@for jc45bf@isp jc45c0@rest) (jc4521@get-import jc45bf@isp)) jc45b6@ls/false) (let ((jc45c4@t jc45b4@t)) (let ((jc45c6@ls/false (jc310d@syntax-dispatch jc45c4@t 'any))) (if jc45c6@ls/false (apply (lambda (jc45c8@spec) (jc31ed@syntax-violation 'import '"invalid import spec" jc45c8@spec)) jc45c6@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc45c4@t))))))))))))))))))))))))))) (jc4523@add-imports! (lambda (jc452c@imp jc452d@h) (let ((jc4530@subst (jc4521@get-import jc452c@imp))) (for-each (lambda (jc4532@x) (let ((jc4534@name (car jc4532@x)) (jc4535@label (cdr jc4532@x))) (let ((jc4538@t (hashtable-ref jc452d@h jc4534@name '#f))) (if jc4538@t ((lambda (jc453a@l) (if (not (eq? jc453a@l jc4535@label)) (jc4511@dup-error jc4534@name) (void))) jc4538@t) (hashtable-set! jc452d@h jc4534@name jc4535@label))))) jc4530@subst))))) (lambda (jc4524@imp*) (let jc452a@f ((jc4526@imp* jc4524@imp*) (jc4527@h (make-eq-hashtable))) (if (null? jc4526@imp*) (hashtable-entries jc4527@h) (begin (jc4523@add-imports! (car jc4526@imp*) jc4527@h) (jc452a@f (cdr jc4526@imp*) jc4527@h))))))) (set! jc4c46@jc316f@parse-import-spec* jc316f@parse-import-spec*) (set! jc3171@make-top-rib (lambda (jc471a@names jc471b@labels) (let ((jc471e@rib (jc2eba@make-empty-rib))) (begin (vector-for-each (lambda (jc4720@name jc4721@label) (begin (if (not (symbol? jc4720@name)) (error 'make-top-rib '"BUG: not a symbol" jc4720@name) (void)) (jc2ebe@extend-rib/nc! jc471e@rib (make-simple-struct 'stx '5 (list jc4720@name jc2e8a@top-mark* '() '())) jc4721@label))) jc471a@names jc471b@labels) jc471e@rib)))) (set! jc4c47@jc3171@make-top-rib jc3171@make-top-rib) (set! jc3173@make-collector (lambda () (let ((jc4724@ls '())) (lambda jc4728 (let ((jc4729 (length jc4728))) (if (= jc4729 '0) (apply (lambda () jc4724@ls) jc4728) (if (= jc4729 '1) (apply (lambda (jc4726@x) (set! jc4724@ls (jc2e83@set-cons jc4726@x jc4724@ls))) jc4728) (error 'apply '"invalid arg count")))))))) (set! jc4c48@jc3173@make-collector jc3173@make-collector) (set! jc3175@inv-collector (jc2a56@jc2934@make-parameter (lambda jc472a@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (jc472c@x) (begin (if (not (procedure? jc472c@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" jc472c@x) (void)) jc472c@x)))) (set! jc4c49@jc3175@inv-collector jc3175@inv-collector) (set! jc3177@vis-collector (jc2a56@jc2934@make-parameter (lambda jc472e@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (jc4730@x) (begin (if (not (procedure? jc4730@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" jc4730@x) (void)) jc4730@x)))) (set! jc4c4a@jc3177@vis-collector jc3177@vis-collector) (set! jc3179@imp-collector (jc2a56@jc2934@make-parameter (lambda jc4732@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (jc4734@x) (begin (if (not (procedure? jc4734@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" jc4734@x) (void)) jc4734@x)))) (set! jc4c4b@jc3179@imp-collector jc3179@imp-collector) (set! jc317b@chi-library-internal (lambda (jc4736@e* jc4737@rib jc4738@top?) (call-with-values (lambda () (jc3165@chi-body* jc4736@e* '() '() '() '() '() '() '() jc4737@rib jc4738@top?)) (lambda (jc474c@jc473d jc474d@jc473f jc474e@jc4741 jc474f@jc4743 jc4750@jc4745 jc4751@jc4747 jc4752@jc4749 jc4753@jc474b) (let ((jc475c@exp* jc4753@jc474b) (jc475d@_kwd* jc4752@jc4749) (jc475e@mod** jc4751@jc4747) (jc475f@rhs* jc4750@jc4745) (jc4760@lex* jc474f@jc4743) (jc4761@mr jc474e@jc4741) (jc4762@r jc474d@jc473f) (jc4763@e* jc474c@jc473d)) (values (append (apply append (reverse jc475e@mod**)) jc4763@e*) jc4762@r jc4761@mr (reverse jc4760@lex*) (reverse jc475f@rhs*) jc475c@exp*)))))) (set! jc4c4c@jc317b@chi-library-internal jc317b@chi-library-internal) (set! jc317d@chi-interaction-expr (lambda (jc476c@e jc476d@rib jc476e@r) (call-with-values (lambda () (jc3165@chi-body* (list jc476c@e) jc476e@r jc476e@r '() '() '() '() '() jc476d@rib '#t)) (lambda (jc4782@jc4773 jc4783@jc4775 jc4784@jc4777 jc4785@jc4779 jc4786@jc477b jc4787@jc477d jc4788@jc477f jc4789@jc4781) (let ((jc4792@_exp* jc4789@jc4781) (jc4793@_kwd* jc4788@jc477f) (jc4794@mod** jc4787@jc477d) (jc4795@rhs* jc4786@jc477b) (jc4796@lex* jc4785@jc4779) (jc4797@mr jc4784@jc4777) (jc4798@r jc4783@jc4775) (jc4799@e* jc4782@jc4773)) (let ((jc47a2@e* (jc313d@expand-interaction-rhs*/init* (reverse jc4796@lex*) (reverse jc4795@rhs*) (append (apply append (reverse jc4794@mod**)) jc4799@e*) jc4798@r jc4797@mr))) (let ((jc47a4@e (if (null? jc47a2@e*) (jc2e6c@jc2dcd@build-void) (if (null? (cdr jc47a2@e*)) (car jc47a2@e*) (jc2e6b@jc2dcb@build-sequence '#f jc47a2@e*))))) (values jc47a4@e jc4798@r)))))))) (set! jc4c4d@jc317d@chi-interaction-expr jc317d@chi-interaction-expr) (set! jc317f@library-body-expander (lambda (jc47a6@name jc47a7@main-exp* jc47a8@imp* jc47a9@b* jc47aa@top?) (letrec* ((jc47b1@itc (jc3173@make-collector))) (let ((jc47ba@jc47b3 jc3179@imp-collector) (jc47bb@jc47b5 jc31fd@top-level-context) (jc47bc@jc47b7 jc47b1@itc) (jc47bd@jc47b9 '#f)) (let ((jc47c2@swap (lambda () (begin (let ((jc47c4@t (jc47ba@jc47b3))) (begin (jc47ba@jc47b3 jc47bc@jc47b7) (set! jc47bc@jc47b7 jc47c4@t))) (let ((jc47c6@t (jc47bb@jc47b5))) (begin (jc47bb@jc47b5 jc47bd@jc47b9) (set! jc47bd@jc47b9 jc47c6@t))))))) (dynamic-wind jc47c2@swap (lambda () (call-with-values (lambda () (jc316f@parse-import-spec* jc47a8@imp*)) (lambda (jc47cc@jc47c9 jc47cd@jc47cb) (let ((jc47d0@subst-labels jc47cd@jc47cb) (jc47d1@subst-names jc47cc@jc47c9)) (let ((jc47d4@rib (jc3171@make-top-rib jc47d1@subst-names jc47d0@subst-labels))) (letrec* ((jc47d7@wrap (lambda (jc4852@x) (make-simple-struct 'stx '5 (list jc4852@x jc2e8a@top-mark* (list jc47d4@rib) '()))))) (let ((jc47d8@b* (map jc47d7@wrap jc47a9@b*)) (jc47d9@main-exp* (map jc47d7@wrap jc47a7@main-exp*)) (jc47da@rtc (jc3173@make-collector)) (jc47db@vtc (jc3173@make-collector))) (let ((jc47e8@jc47e1 jc3175@inv-collector) (jc47e9@jc47e3 jc3177@vis-collector) (jc47ea@jc47e5 jc47da@rtc) (jc47eb@jc47e7 jc47db@vtc)) (let ((jc47f0@swap (lambda () (begin (let ((jc47f2@t (jc47e8@jc47e1))) (begin (jc47e8@jc47e1 jc47ea@jc47e5) (set! jc47ea@jc47e5 jc47f2@t))) (let ((jc47f4@t (jc47e9@jc47e3))) (begin (jc47e9@jc47e3 jc47eb@jc47e7) (set! jc47eb@jc47e7 jc47f4@t))))))) (dynamic-wind jc47f0@swap (lambda () (call-with-values (lambda () (jc317b@chi-library-internal jc47d8@b* jc47d4@rib jc47aa@top?)) (lambda (jc4802@jc47f7 jc4803@jc47f9 jc4804@jc47fb jc4805@jc47fd jc4806@jc47ff jc4807@jc4801) (let ((jc480e@internal-exp* jc4807@jc4801) (jc480f@rhs* jc4806@jc47ff) (jc4810@lex* jc4805@jc47fd) (jc4811@mr jc4804@jc47fb) (jc4812@r jc4803@jc47f9) (jc4813@init* jc4802@jc47f7)) (call-with-values (lambda () (jc3169@parse-exports (append jc47d9@main-exp* jc480e@internal-exp*))) (lambda (jc481e@jc481b jc481f@jc481d) (let ((jc4822@exp-id* jc481f@jc481d) (jc4823@exp-name* jc481e@jc481b)) (begin (jc2ec2@seal-rib! jc47d4@rib) (let ((jc4826@init* (jc312b@chi-expr* jc4813@init* jc4812@r jc4811@mr))) (let ((jc4828@rhs* (jc313f@chi-rhs* jc480f@rhs* jc4812@r jc4811@mr))) (begin (jc2ec4@unseal-rib! jc47d4@rib) (let ((jc482a@loc* (map jc2e90@gen-global jc4810@lex*)) (jc482b@export-subst (jc31d7@make-export-subst jc4823@exp-name* jc4822@exp-id*))) (letrec* ((jc482f@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (jc31d9@make-export-env/macros jc4810@lex* jc482a@loc* jc4812@r)) (lambda (jc4836@jc4831 jc4837@jc4833 jc4838@jc4835) (let ((jc483c@macro* jc4838@jc4835) (jc483d@global* jc4837@jc4833) (jc483e@export-env jc4836@jc4831)) (begin (for-each (lambda (jc4842@s) (let ((jc4844@name (car jc4842@s)) (jc4845@label (cdr jc4842@s))) (let ((jc4848@p (assq jc4845@label jc483e@export-env))) (if jc4848@p (let ((jc484a@b (cdr jc4848@p))) (let ((jc484c@type (car jc484a@b))) (if (eq? jc484c@type 'mutable) (jc31ed@syntax-violation 'export jc482f@errstr jc4844@name) (void)))) (void))))) jc482b@export-subst) (let ((jc484e@invoke-body (jc2e71@jc2dd7@build-library-letrec* '#f jc47a6@name jc4810@lex* jc482a@loc* jc4828@rhs* (if (null? jc4826@init*) (jc2e6c@jc2dcd@build-void) (jc2e6b@jc2dcb@build-sequence '#f jc4826@init*)))) (jc484f@invoke-definitions (map jc2e68@jc2d2a@build-global-define (map cdr jc483d@global*)))) (values (jc47b1@itc) (jc47da@rtc) (jc47db@vtc) (jc2e6b@jc2dcb@build-sequence '#f (append jc484f@invoke-definitions (list jc484e@invoke-body))) jc483c@macro* jc482b@export-subst jc483e@export-env))))))))))))))))))) jc47f0@swap)))))))))) jc47c2@swap)))))) (set! jc4c4e@jc317f@library-body-expander jc317f@library-body-expander) (set! jc3181@core-library-expander (lambda (jc4854@e jc4855@verify-name) (call-with-values (lambda () (jc316d@parse-library jc4854@e)) (lambda (jc4860@jc4859 jc4861@jc485b jc4862@jc485d jc4863@jc485f) (let ((jc4868@b* jc4863@jc485f) (jc4869@imp* jc4862@jc485d) (jc486a@exp* jc4861@jc485b) (jc486b@name* jc4860@jc4859)) (call-with-values (lambda () (jc316b@parse-library-name jc486b@name*)) (lambda (jc4874@jc4871 jc4875@jc4873) (let ((jc4878@ver jc4875@jc4873) (jc4879@name jc4874@jc4871)) (begin (jc4855@verify-name jc4879@name) (call-with-values (lambda () (jc317f@library-body-expander jc4879@name jc486a@exp* jc4869@imp* jc4868@b* '#f)) (lambda (jc488a@jc487d jc488b@jc487f jc488c@jc4881 jc488d@jc4883 jc488e@jc4885 jc488f@jc4887 jc4890@jc4889) (let ((jc4898@export-env jc4890@jc4889) (jc4899@export-subst jc488f@jc4887) (jc489a@visit-code jc488e@jc4885) (jc489b@invoke-code jc488d@jc4883) (jc489c@visit-req* jc488c@jc4881) (jc489d@invoke-req* jc488b@jc487f) (jc489e@imp* jc488a@jc487d)) (values jc4879@name jc4878@ver jc489e@imp* jc489d@invoke-req* jc489c@visit-req* jc489b@invoke-code jc489a@visit-code jc4899@export-subst jc4898@export-env))))))))))))) (set! jc4c4f@jc3181@core-library-expander jc3181@core-library-expander) (set! jc3183@parse-top-level-program (lambda (jc48a6@e*) (let ((jc48a8@t jc48a6@e*)) (let ((jc48aa@ls/false (jc310d@syntax-dispatch jc48a8@t '((any . each-any) . each-any)))) (if (and jc48aa@ls/false (apply (lambda (jc48ac@import jc48ad@imp* jc48ae@b*) (eq? (jc31f3@syntax->datum jc48ac@import) 'import)) jc48aa@ls/false)) (apply (lambda (jc48b2@import jc48b3@imp* jc48b4@b*) (values jc48b3@imp* jc48b4@b*)) jc48aa@ls/false) (let ((jc48b8@t jc48a8@t)) (let ((jc48ba@ls/false (jc310d@syntax-dispatch jc48b8@t '((any . any) . any)))) (if (and jc48ba@ls/false (apply (lambda (jc48bc@import jc48bd@x jc48be@y) (eq? (jc31f3@syntax->datum jc48bc@import) 'import)) jc48ba@ls/false)) (apply (lambda (jc48c2@import jc48c3@x jc48c4@y) (jc31ed@syntax-violation 'expander '"invalid syntax of top-level program" (jc2f00@syntax-car jc48a6@e*))) jc48ba@ls/false) (let ((jc48c8@t jc48b8@t)) (let ((jc48ca@ls/false (jc310d@syntax-dispatch jc48c8@t '_))) (if jc48ca@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) jc48ca@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc48c8@t)))))))))))) (set! jc4c50@jc3183@parse-top-level-program jc3183@parse-top-level-program) (set! jc3185@top-level-expander (lambda (jc48cc@e*) (call-with-values (lambda () (jc3183@parse-top-level-program jc48cc@e*)) (lambda (jc48d2@jc48cf jc48d3@jc48d1) (let ((jc48d6@b* jc48d3@jc48d1) (jc48d7@imp* jc48d2@jc48cf)) (call-with-values (lambda () (jc317f@library-body-expander '() '() jc48d7@imp* jc48d6@b* '#t)) (lambda (jc48e8@jc48db jc48e9@jc48dd jc48ea@jc48df jc48eb@jc48e1 jc48ec@jc48e3 jc48ed@jc48e5 jc48ee@jc48e7) (let ((jc48f6@export-env jc48ee@jc48e7) (jc48f7@export-subst jc48ed@jc48e5) (jc48f8@visit-code jc48ec@jc48e3) (jc48f9@invoke-code jc48eb@jc48e1) (jc48fa@visit-req* jc48ea@jc48df) (jc48fb@invoke-req* jc48e9@jc48dd) (jc48fc@imp* jc48e8@jc48db)) (values jc48fb@invoke-req* jc48f9@invoke-code))))))))) (set! jc4c51@jc3185@top-level-expander jc3185@top-level-expander) (set! jc3187@rp (jc2a53@jc292e@make-record-printer 'env (lambda (jc4904@x jc4905@p jc4906@wr) (display '"#<environment>" jc4905@p)))) (set! jc4c52@jc3187@rp jc3187@rp) (set! jc3191@env? (lambda (jc490a@x) (and (simple-struct? jc490a@x) (eq? (simple-struct-name jc490a@x) 'env)))) (set! jc4c53@jc3191@env? jc3191@env?) (set! jc3193@env-names (lambda (jc490c@x) (simple-struct-ref jc490c@x '0))) (set! jc4c54@jc3193@env-names jc3193@env-names) (set! jc3195@set-env-names! (lambda (jc490e@x jc490f@val) (simple-struct-set! jc490e@x '0 jc490f@val))) (set! jc4c55@jc3195@set-env-names! jc3195@set-env-names!) (set! jc3197@env-labels (lambda (jc4912@x) (simple-struct-ref jc4912@x '1))) (set! jc4c56@jc3197@env-labels jc3197@env-labels) (set! jc3199@set-env-labels! (lambda (jc4914@x jc4915@val) (simple-struct-set! jc4914@x '1 jc4915@val))) (set! jc4c57@jc3199@set-env-labels! jc3199@set-env-labels!) (set! jc319b@env-itc (lambda (jc4918@x) (simple-struct-ref jc4918@x '2))) (set! jc4c58@jc319b@env-itc jc319b@env-itc) (set! jc319d@set-env-itc! (lambda (jc491a@x jc491b@val) (simple-struct-set! jc491a@x '2 jc491b@val))) (set! jc4c59@jc319d@set-env-itc! jc319d@set-env-itc!) (set! jc319f@dummy '3) (set! jc4c5a@jc319f@dummy jc319f@dummy) (set! jc31a1@rp (jc2a53@jc292e@make-record-printer 'interaction-env (lambda (jc491e@x jc491f@p jc4920@wr) (display '"#<environment>" jc491f@p)))) (set! jc4c5b@jc31a1@rp jc31a1@rp) (set! jc31ab@interaction-env? (lambda (jc4924@x) (and (simple-struct? jc4924@x) (eq? (simple-struct-name jc4924@x) 'interaction-env)))) (set! jc4c5c@jc31ab@interaction-env? jc31ab@interaction-env?) (set! jc31ad@interaction-env-rib (lambda (jc4926@x) (simple-struct-ref jc4926@x '0))) (set! jc4c5d@jc31ad@interaction-env-rib jc31ad@interaction-env-rib) (set! jc31af@set-interaction-env-rib! (lambda (jc4928@x jc4929@val) (simple-struct-set! jc4928@x '0 jc4929@val))) (set! jc4c5e@jc31af@set-interaction-env-rib! jc31af@set-interaction-env-rib!) (set! jc31b1@interaction-env-r (lambda (jc492c@x) (simple-struct-ref jc492c@x '1))) (set! jc4c5f@jc31b1@interaction-env-r jc31b1@interaction-env-r) (set! jc31b3@set-interaction-env-r! (lambda (jc492e@x jc492f@val) (simple-struct-set! jc492e@x '1 jc492f@val))) (set! jc4c60@jc31b3@set-interaction-env-r! jc31b3@set-interaction-env-r!) (set! jc31b5@interaction-env-locs (lambda (jc4932@x) (simple-struct-ref jc4932@x '2))) (set! jc4c61@jc31b5@interaction-env-locs jc31b5@interaction-env-locs) (set! jc31b7@set-interaction-env-locs! (lambda (jc4934@x jc4935@val) (simple-struct-set! jc4934@x '2 jc4935@val))) (set! jc4c62@jc31b7@set-interaction-env-locs! jc31b7@set-interaction-env-locs!) (set! jc31b9@dummy '3) (set! jc4c63@jc31b9@dummy jc31b9@dummy) (set! jc31bb@interaction-environment-symbols (lambda () (jc31c3@environment-symbols (jc31fb@interaction-environment)))) (set! jc4c64@jc31bb@interaction-environment-symbols jc31bb@interaction-environment-symbols) (set! jc31bd@environment-bindings (lambda (jc4938@e) (vector->list (vector-map (lambda (jc493a@name jc493b@label) (jc31bf@parse-binding (cons jc493a@name (jc2d21@jc2b6e@imported-label->binding jc493b@label)))) (jc3193@env-names jc4938@e) (jc3197@env-labels jc4938@e))))) (set! jc4c65@jc31bd@environment-bindings jc31bd@environment-bindings) (set! jc31bf@parse-binding (lambda (jc493e@b) (cons (car jc493e@b) (let ((jc4940@t (cadr jc493e@b))) (if (memv jc4940@t '(core-prim global)) 'procedure (if (memv jc4940@t '(core-macro macro global-macro)) 'syntax (if (memv jc4940@t '($core-rtd)) 'record (if (eq? (car jc493e@b) (cadr jc493e@b)) 'syntax 'unknown)))))))) (set! jc4c66@jc31bf@parse-binding jc31bf@parse-binding) (set! jc31c1@environment? (lambda (jc4942@x) (or (jc3191@env? jc4942@x) (jc31ab@interaction-env? jc4942@x)))) (set! jc4c67@jc31c1@environment? jc31c1@environment?) (set! jc31c3@environment-symbols (lambda (jc4944@x) (if (jc3191@env? jc4944@x) (vector->list (jc3193@env-names jc4944@x)) (if (jc31ab@interaction-env? jc4944@x) (map values (jc2ea4@rib-sym* (jc31ad@interaction-env-rib jc4944@x))) (assertion-violation 'environment-symbols '"not an environment" jc4944@x))))) (set! jc4c68@jc31c3@environment-symbols jc31c3@environment-symbols) (set! jc31c5@environment (lambda jc4946@imp* (let ((jc4948@itc (jc3173@make-collector))) (let ((jc494e@jc494b jc3179@imp-collector) (jc494f@jc494d jc4948@itc)) (let ((jc4952@swap (lambda () (let ((jc4954@t (jc494e@jc494b))) (begin (jc494e@jc494b jc494f@jc494d) (set! jc494f@jc494d jc4954@t)))))) (dynamic-wind jc4952@swap (lambda () (call-with-values (lambda () (jc316f@parse-import-spec* jc4946@imp*)) (lambda (jc495a@jc4957 jc495b@jc4959) (let ((jc495e@subst-labels jc495b@jc4959) (jc495f@subst-names jc495a@jc4957)) (make-simple-struct 'env '4 (list jc495f@subst-names jc495e@subst-labels jc4948@itc)))))) jc4952@swap)))))) (set! jc4c69@jc31c5@environment jc31c5@environment) (set! jc31c7@null-environment (lambda (jc4962@n) (begin (if (not (eqv? jc4962@n '5)) (assertion-violation 'null-environment '"not 5" jc4962@n) (void)) (jc31c5@environment '(psyntax null-environment-5))))) (set! jc4c6a@jc31c7@null-environment jc31c7@null-environment) (set! jc31c9@scheme-report-environment (lambda (jc4964@n) (begin (if (not (eqv? jc4964@n '5)) (assertion-violation 'scheme-report-environment '"not 5" jc4964@n) (void)) (jc31c5@environment '(psyntax scheme-report-environment-5))))) (set! jc4c6b@jc31c9@scheme-report-environment jc31c9@scheme-report-environment) (set! jc31cb@expand (lambda (jc4966@x jc4967@env) (if (jc3191@env? jc4967@env) (let ((jc496a@rib (jc3171@make-top-rib (jc3193@env-names jc4967@env) (jc3197@env-labels jc4967@env)))) (let ((jc496c@x (make-simple-struct 'stx '5 (list jc4966@x jc2e8a@top-mark* (list jc496a@rib) '()))) (jc496d@itc (jc319b@env-itc jc4967@env)) (jc496e@rtc (jc3173@make-collector)) (jc496f@vtc (jc3173@make-collector))) (let ((jc4974@x (let ((jc4986@jc4977 jc31fd@top-level-context) (jc4987@jc4979 jc3175@inv-collector) (jc4988@jc497b jc3177@vis-collector) (jc4989@jc497d jc3179@imp-collector) (jc498a@jc497f '#f) (jc498b@jc4981 jc496e@rtc) (jc498c@jc4983 jc496f@vtc) (jc498d@jc4985 jc496d@itc)) (let ((jc4996@swap (lambda () (begin (let ((jc4998@t (jc4986@jc4977))) (begin (jc4986@jc4977 jc498a@jc497f) (set! jc498a@jc497f jc4998@t))) (let ((jc499a@t (jc4987@jc4979))) (begin (jc4987@jc4979 jc498b@jc4981) (set! jc498b@jc4981 jc499a@t))) (let ((jc499c@t (jc4988@jc497b))) (begin (jc4988@jc497b jc498c@jc4983) (set! jc498c@jc4983 jc499c@t))) (let ((jc499e@t (jc4989@jc497d))) (begin (jc4989@jc497d jc498d@jc4985) (set! jc498d@jc4985 jc499e@t))))))) (dynamic-wind jc4996@swap (lambda () (jc312f@chi-expr jc496c@x '() '())) jc4996@swap))))) (begin (jc2ec2@seal-rib! jc496a@rib) (values jc4974@x (jc496e@rtc)))))) (if (jc31ab@interaction-env? jc4967@env) (let ((jc49a0@rib (jc31ad@interaction-env-rib jc4967@env)) (jc49a1@r (jc31b1@interaction-env-r jc4967@env)) (jc49a2@rtc (jc3173@make-collector))) (let ((jc49a6@x (make-simple-struct 'stx '5 (list jc4966@x jc2e8a@top-mark* (list jc49a0@rib) '())))) (call-with-values (lambda () (let ((jc49bc@jc49ad jc31fd@top-level-context) (jc49bd@jc49af jc3175@inv-collector) (jc49be@jc49b1 jc3177@vis-collector) (jc49bf@jc49b3 jc3179@imp-collector) (jc49c0@jc49b5 jc4967@env) (jc49c1@jc49b7 jc49a2@rtc) (jc49c2@jc49b9 (jc3173@make-collector)) (jc49c3@jc49bb (jc3173@make-collector))) (let ((jc49cc@swap (lambda () (begin (let ((jc49ce@t (jc49bc@jc49ad))) (begin (jc49bc@jc49ad jc49c0@jc49b5) (set! jc49c0@jc49b5 jc49ce@t))) (let ((jc49d0@t (jc49bd@jc49af))) (begin (jc49bd@jc49af jc49c1@jc49b7) (set! jc49c1@jc49b7 jc49d0@t))) (let ((jc49d2@t (jc49be@jc49b1))) (begin (jc49be@jc49b1 jc49c2@jc49b9) (set! jc49c2@jc49b9 jc49d2@t))) (let ((jc49d4@t (jc49bf@jc49b3))) (begin (jc49bf@jc49b3 jc49c3@jc49bb) (set! jc49c3@jc49bb jc49d4@t))))))) (dynamic-wind jc49cc@swap (lambda () (jc317d@chi-interaction-expr jc49a6@x jc49a0@rib jc49a1@r)) jc49cc@swap)))) (lambda (jc49d6@jc49a9 jc49d7@jc49ab) (let ((jc49da@r^ jc49d7@jc49ab) (jc49db@e jc49d6@jc49a9)) (begin (jc31b3@set-interaction-env-r! jc4967@env jc49da@r^) (values jc49db@e (jc49a2@rtc)))))))) (assertion-violation 'expand '"not an environment" jc4967@env))))) (set! jc4c6c@jc31cb@expand jc31cb@expand) (set! jc31cd@eval (lambda (jc49de@x jc49df@env) (begin (if (not (jc31c1@environment? jc49df@env)) (error 'eval '"not an environment" jc49df@env) (void)) (call-with-values (lambda () (jc31cb@expand jc49de@x jc49df@env)) (lambda (jc49e6@jc49e3 jc49e7@jc49e5) (let ((jc49ea@invoke-req* jc49e7@jc49e5) (jc49eb@x jc49e6@jc49e3)) (begin (for-each jc2d22@jc2b70@invoke-library jc49ea@invoke-req*) (eval-core (jc2aac@jc2a64@expanded->core jc49eb@x))))))))) (set! jc4c6d@jc31cd@eval jc31cd@eval) (set! jc31cf@library-expander (lambda jc4a5c (let ((jc4a5d (length jc4a5c))) (if (= jc4a5d '3) (apply (lambda (jc49ee@x jc49ef@filename jc49f0@verify-name) (letrec* ((jc49f5@build-visit-code (lambda (jc4a4a@macro*) (if (null? jc4a4a@macro*) (jc2e6c@jc2dcd@build-void) (jc2e6b@jc2dcb@build-sequence '#f (map (lambda (jc4a4c@x) (let ((jc4a4e@loc (car jc4a4c@x)) (jc4a4f@src (cddr jc4a4c@x))) (list 'set! jc4a4e@loc jc4a4f@src))) jc4a4a@macro*))))) (jc49f7@visit! (lambda (jc4a42@macro*) (for-each (lambda (jc4a44@x) (let ((jc4a46@loc (car jc4a44@x)) (jc4a47@proc (cadr jc4a44@x))) (set-symbol-value! jc4a46@loc jc4a47@proc))) jc4a42@macro*)))) (call-with-values (lambda () (jc3181@core-library-expander jc49ee@x jc49f0@verify-name)) (lambda (jc4a0a@jc49f9 jc4a0b@jc49fb jc4a0c@jc49fd jc4a0d@jc49ff jc4a0e@jc4a01 jc4a0f@jc4a03 jc4a10@jc4a05 jc4a11@jc4a07 jc4a12@jc4a09) (let ((jc4a1c@export-env jc4a12@jc4a09) (jc4a1d@export-subst jc4a11@jc4a07) (jc4a1e@macro* jc4a10@jc4a05) (jc4a1f@invoke-code jc4a0f@jc4a03) (jc4a20@vis* jc4a0e@jc4a01) (jc4a21@inv* jc4a0d@jc49ff) (jc4a22@imp* jc4a0c@jc49fd) (jc4a23@ver jc4a0b@jc49fb) (jc4a24@name jc4a0a@jc49f9)) (let ((jc4a2e@id (gensym)) (jc4a2f@name jc4a24@name) (jc4a30@ver jc4a23@ver) (jc4a31@imp* (map jc2d26@jc2b78@library-spec jc4a22@imp*)) (jc4a32@vis* (map jc2d26@jc2b78@library-spec jc4a20@vis*)) (jc4a33@inv* (map jc2d26@jc2b78@library-spec jc4a21@inv*)) (jc4a34@visit-proc (lambda () (jc49f7@visit! jc4a1e@macro*))) (jc4a35@invoke-proc (lambda () (eval-core (jc2aac@jc2a64@expanded->core jc4a1f@invoke-code)))) (jc4a36@visit-code (jc49f5@build-visit-code jc4a1e@macro*)) (jc4a37@invoke-code jc4a1f@invoke-code)) (begin (jc2d20@jc2b6c@install-library jc4a2e@id jc4a2f@name jc4a30@ver jc4a31@imp* jc4a32@vis* jc4a33@inv* jc4a1d@export-subst jc4a1c@export-env jc4a34@visit-proc jc4a35@invoke-proc jc4a36@visit-code jc4a37@invoke-code '#t jc49ef@filename) (values jc4a2e@id jc4a2f@name jc4a30@ver jc4a31@imp* jc4a32@vis* jc4a33@inv* jc4a37@invoke-code jc4a36@visit-code jc4a1d@export-subst jc4a1c@export-env)))))))) jc4a5c) (if (= jc4a5d '2) (apply (lambda (jc4a52@x jc4a53@filename) (jc31cf@library-expander jc4a52@x jc4a53@filename (lambda (jc4a56@x) (values)))) jc4a5c) (if (= jc4a5d '1) (apply (lambda (jc4a58@x) (jc31cf@library-expander jc4a58@x '#f (lambda (jc4a5a@x) (values)))) jc4a5c) (error 'apply '"invalid arg count"))))))) (set! jc4c6e@jc31cf@library-expander jc31cf@library-expander) (set! jc31d1@boot-library-expand (lambda (jc4a5e@x) (call-with-values (lambda () (jc31cf@library-expander jc4a5e@x)) (lambda (jc4a74@jc4a61 jc4a75@jc4a63 jc4a76@jc4a65 jc4a77@jc4a67 jc4a78@jc4a69 jc4a79@jc4a6b jc4a7a@jc4a6d jc4a7b@jc4a6f jc4a7c@jc4a71 jc4a7d@jc4a73) (let ((jc4a88@export-env jc4a7d@jc4a73) (jc4a89@export-subst jc4a7c@jc4a71) (jc4a8a@visit-code jc4a7b@jc4a6f) (jc4a8b@invoke-code jc4a7a@jc4a6d) (jc4a8c@inv* jc4a79@jc4a6b) (jc4a8d@vis* jc4a78@jc4a69) (jc4a8e@imp* jc4a77@jc4a67) (jc4a8f@ver jc4a76@jc4a65) (jc4a90@name jc4a75@jc4a63) (jc4a91@id jc4a74@jc4a61)) (values jc4a90@name jc4a8b@invoke-code jc4a89@export-subst jc4a88@export-env)))))) (set! jc4c6f@jc31d1@boot-library-expand jc31d1@boot-library-expand) (set! jc31d3@rev-map-append (lambda (jc4a9c@f jc4a9d@ls jc4a9e@ac) (if (null? jc4a9d@ls) jc4a9e@ac (jc31d3@rev-map-append jc4a9c@f (cdr jc4a9d@ls) (cons (jc4a9c@f (car jc4a9d@ls)) jc4a9e@ac))))) (set! jc4c70@jc31d3@rev-map-append jc31d3@rev-map-append) (set! jc31d5@build-exports (lambda (jc4aa2@lex*+loc* jc4aa3@init*) (jc2e6b@jc2dcb@build-sequence '#f (cons (jc2e6c@jc2dcd@build-void) (jc31d3@rev-map-append (lambda (jc4aa6@x) (list 'set! (cdr jc4aa6@x) (car jc4aa6@x))) jc4aa2@lex*+loc* jc4aa3@init*))))) (set! jc4c71@jc31d5@build-exports jc31d5@build-exports) (set! jc31d7@make-export-subst (lambda (jc4aa8@name* jc4aa9@id*) (map (lambda (jc4aac@name jc4aad@id) (let ((jc4ab0@label (jc2f1c@id->label jc4aad@id))) (begin (if (not jc4ab0@label) (jc31ed@syntax-violation '#f '"cannot export unbound identifier" jc4aad@id) (void)) (cons jc4aac@name jc4ab0@label)))) jc4aa8@name* jc4aa9@id*))) (set! jc4c72@jc31d7@make-export-subst jc31d7@make-export-subst) (set! jc31d9@make-export-env/macros (lambda (jc4ab2@lex* jc4ab3@loc* jc4ab4@r) (letrec* ((jc4ab9@lookup (lambda (jc4ad6@x) (let jc4ade@f ((jc4ad8@x jc4ad6@x) (jc4ad9@lex* jc4ab2@lex*) (jc4ada@loc* jc4ab3@loc*)) (if (pair? jc4ad9@lex*) (if (eq? jc4ad8@x (car jc4ad9@lex*)) (car jc4ada@loc*) (jc4ade@f jc4ad8@x (cdr jc4ad9@lex*) (cdr jc4ada@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let jc4ac2@f ((jc4aba@r jc4ab4@r) (jc4abb@env '()) (jc4abc@global* '()) (jc4abd@macro* '())) (if (null? jc4aba@r) (values jc4abb@env jc4abc@global* jc4abd@macro*) (let ((jc4ac4@x (car jc4aba@r))) (let ((jc4ac6@label (car jc4ac4@x)) (jc4ac7@b (cdr jc4ac4@x))) (let ((jc4aca@t (jc2f22@binding-type jc4ac7@b))) (if (memv jc4aca@t '(lexical)) (let ((jc4acc@v (jc2f24@binding-value jc4ac7@b))) (let ((jc4ace@loc (jc4ab9@lookup (jc3097@lexical-var jc4acc@v))) (jc4acf@type (if (jc3099@lexical-mutable? jc4acc@v) 'mutable 'global))) (jc4ac2@f (cdr jc4aba@r) (cons (cons* jc4ac6@label jc4acf@type jc4ace@loc) jc4abb@env) (cons (cons (jc3097@lexical-var jc4acc@v) jc4ace@loc) jc4abc@global*) jc4abd@macro*))) (if (memv jc4aca@t '(local-macro)) (let ((jc4ad2@loc (gensym))) (jc4ac2@f (cdr jc4aba@r) (cons (cons* jc4ac6@label 'global-macro jc4ad2@loc) jc4abb@env) jc4abc@global* (cons (cons jc4ad2@loc (jc2f24@binding-value jc4ac7@b)) jc4abd@macro*))) (if (memv jc4aca@t '(local-macro!)) (let ((jc4ad4@loc (gensym))) (jc4ac2@f (cdr jc4aba@r) (cons (cons* jc4ac6@label 'global-macro! jc4ad4@loc) jc4abb@env) jc4abc@global* (cons (cons jc4ad4@loc (jc2f24@binding-value jc4ac7@b)) jc4abd@macro*))) (if (memv jc4aca@t '($rtd $module)) (jc4ac2@f (cdr jc4aba@r) (cons jc4ac4@x jc4abb@env) jc4abc@global* jc4abd@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (jc2f22@binding-type jc4ac7@b) (jc2f24@binding-value jc4ac7@b)))))))))))))) (set! jc4c73@jc31d9@make-export-env/macros jc31d9@make-export-env/macros) (set! jc31db@generate-temporaries (lambda (jc4ae0@ls) (let ((jc4ae2@t jc4ae0@ls)) (let ((jc4ae4@ls/false (jc310d@syntax-dispatch jc4ae2@t 'each-any))) (if jc4ae4@ls/false (apply (lambda (jc4ae6@ls) (map (lambda (jc4ae8@x) (make-simple-struct 'stx '5 (list (let ((jc4aea@x (jc31f3@syntax->datum jc4ae8@x))) (if (or (symbol? jc4aea@x) (string? jc4aea@x)) (gensym jc4aea@x) (gensym 't))) jc2e8a@top-mark* '() '()))) jc4ae6@ls)) jc4ae4@ls/false) (let ((jc4aec@t jc4ae2@t)) (let ((jc4aee@ls/false (jc310d@syntax-dispatch jc4aec@t '_))) (if jc4aee@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) jc4aee@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc4aec@t))))))))) (set! jc4c74@jc31db@generate-temporaries jc31db@generate-temporaries) (set! jc31dd@free-identifier=? (lambda (jc4af0@x jc4af1@y) (if (jc2f06@id? jc4af0@x) (if (jc2f06@id? jc4af1@y) (jc2f0c@free-id=? jc4af0@x jc4af1@y) (assertion-violation 'free-identifier=? '"not an identifier" jc4af1@y)) (assertion-violation 'free-identifier=? '"not an identifier" jc4af0@x)))) (set! jc4c75@jc31dd@free-identifier=? jc31dd@free-identifier=?) (set! jc31df@bound-identifier=? (lambda (jc4af4@x jc4af5@y) (if (jc2f06@id? jc4af4@x) (if (jc2f06@id? jc4af5@y) (jc2f0a@bound-id=? jc4af4@x jc4af5@y) (assertion-violation 'bound-identifier=? '"not an identifier" jc4af5@y)) (assertion-violation 'bound-identifier=? '"not an identifier" jc4af4@x)))) (set! jc4c76@jc31df@bound-identifier=? jc31df@bound-identifier=?) (set! jc31e1@make-source-condition (lambda (jc4af8@x) (letrec* ((jc4b02@jc4afd (make-record-type-descriptor '&source-information &condition-rtd 'jc4b00 '#f '#f '#((immutable file-name) (immutable line)))) (jc4b04@jc4aff '#f) (jc4b06@jc4afe (make-record-constructor-descriptor jc4b02@jc4afd &condition-rcd jc4b04@jc4aff)) (jc4b09@jc4afc (record-predicate jc4b02@jc4afd)) (jc4b0b@make-source-condition (record-constructor jc4b06@jc4afe)) (jc4b0d@jc4afa (record-accessor jc4b02@jc4afd '0)) (jc4b0f@jc4afb (record-accessor jc4b02@jc4afd '1)) (jc4b11@source-condition? (condition-predicate jc4b02@jc4afd)) (jc4b13@source-filename (condition-accessor jc4b02@jc4afd jc4b0d@jc4afa)) (jc4b15@source-character (condition-accessor jc4b02@jc4afd jc4b0f@jc4afb))) (if (and (pair? jc4af8@x) (pair? (cdr jc4af8@x))) (jc4b0b@make-source-condition (car jc4af8@x) (cadr jc4af8@x)) (condition))))) (set! jc4c77@jc31e1@make-source-condition jc31e1@make-source-condition) (set! jc31e3@extract-position-condition (lambda (jc4b16@x) (jc31e1@make-source-condition (jc31e5@expression-position jc4b16@x)))) (set! jc4c78@jc31e3@extract-position-condition jc31e3@extract-position-condition) (set! jc31e5@expression-position (lambda (jc4b18@x) (and (jc2ed2@stx? jc4b18@x) (let ((jc4b1a@x (jc2ed4@stx-expr jc4b18@x))) (and (jc2a4a@jc291c@annotation? jc4b1a@x) (jc2a4b@jc291e@annotation-source jc4b1a@x)))))) (set! jc4c79@jc31e5@expression-position jc31e5@expression-position) (set! jc31e7@assertion-error (lambda (jc4b1c@expr jc4b1d@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list jc4b1c@expr)) (jc31e1@make-source-condition jc4b1d@pos))))) (set! jc4c7a@jc31e7@assertion-error jc31e7@assertion-error) (set! jc31e9@syntax-error (lambda (jc4b20@x . jc4b22@args) (begin (if (not (for-all string? jc4b22@args)) (assertion-violation 'syntax-error '"invalid argument" jc4b22@args) (void)) (raise (condition (make-message-condition (if (null? jc4b22@args) '"invalid syntax" (apply string-append jc4b22@args))) (make-syntax-violation (jc31f3@syntax->datum jc4b20@x) '#f) (jc31e3@extract-position-condition jc4b20@x)))))) (set! jc4c7b@jc31e9@syntax-error jc31e9@syntax-error) (set! jc31eb@syntax-violation* (lambda (jc4b24@who jc4b25@msg jc4b26@form jc4b27@condition-object) (begin (if (not (string? jc4b25@msg)) (assertion-violation 'syntax-violation '"message is not a string" jc4b25@msg) (void)) (let ((jc4b2c@who (if (or (string? jc4b24@who) (symbol? jc4b24@who)) jc4b24@who (if (not jc4b24@who) (let ((jc4b2e@t jc4b26@form)) (let ((jc4b30@ls/false (jc310d@syntax-dispatch jc4b2e@t 'any))) (if (and jc4b30@ls/false (apply (lambda (jc4b32@id) (jc2f06@id? jc4b32@id)) jc4b30@ls/false)) (apply (lambda (jc4b34@id) (jc31f3@syntax->datum jc4b34@id)) jc4b30@ls/false) (let ((jc4b36@t jc4b2e@t)) (let ((jc4b38@ls/false (jc310d@syntax-dispatch jc4b36@t '(any . any)))) (if (and jc4b38@ls/false (apply (lambda (jc4b3a@id jc4b3b@rest) (jc2f06@id? jc4b3a@id)) jc4b38@ls/false)) (apply (lambda (jc4b3e@id jc4b3f@rest) (jc31f3@syntax->datum jc4b3e@id)) jc4b38@ls/false) (let ((jc4b42@t jc4b36@t)) (let ((jc4b44@ls/false (jc310d@syntax-dispatch jc4b42@t '_))) (if jc4b44@ls/false (apply (lambda () '#f) jc4b44@ls/false) (jc31ed@syntax-violation '#f '"invalid syntax" jc4b42@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" jc4b24@who))))) (raise (condition (if jc4b2c@who (make-who-condition jc4b2c@who) (condition)) (make-message-condition jc4b25@msg) jc4b27@condition-object (jc31e3@extract-position-condition jc4b26@form))))))) (set! jc4c7c@jc31eb@syntax-violation* jc31eb@syntax-violation*) (set! jc31ed@syntax-violation (lambda jc4b54 (let ((jc4b55 (length jc4b54))) (if (= jc4b55 '3) (apply (lambda (jc4b46@who jc4b47@msg jc4b48@form) (jc31ed@syntax-violation jc4b46@who jc4b47@msg jc4b48@form '#f)) jc4b54) (if (= jc4b55 '4) (apply (lambda (jc4b4c@who jc4b4d@msg jc4b4e@form jc4b4f@subform) (jc31eb@syntax-violation* jc4b4c@who jc4b4d@msg jc4b4e@form (make-syntax-violation (jc31f3@syntax->datum jc4b4e@form) (jc31f3@syntax->datum jc4b4f@subform)))) jc4b54) (error 'apply '"invalid arg count")))))) (set! jc4c7d@jc31ed@syntax-violation jc31ed@syntax-violation) (set! jc31ef@identifier? (lambda (jc4b56@x) (jc2f06@id? jc4b56@x))) (set! jc4c7e@jc31ef@identifier? jc31ef@identifier?) (set! jc31f1@datum->syntax (lambda (jc4b58@id jc4b59@datum) (if (jc2f06@id? jc4b58@id) (jc2ee6@datum->stx jc4b58@id jc4b59@datum) (assertion-violation 'datum->syntax '"not an identifier" jc4b58@id)))) (set! jc4c7f@jc31f1@datum->syntax jc31f1@datum->syntax) (set! jc31f3@syntax->datum (lambda (jc4b5c@x) (jc2f1a@stx->datum jc4b5c@x))) (set! jc4c80@jc31f3@syntax->datum jc31f3@syntax->datum) (set! jc31f5@ungensym-all (lambda (jc4b5e@code) (if (pair? jc4b5e@code) (cons (jc31f5@ungensym-all (car jc4b5e@code)) (jc31f5@ungensym-all (cdr jc4b5e@code))) (if (symbol? jc4b5e@code) (ungensym jc4b5e@code) jc4b5e@code)))) (set! jc4c81@jc31f5@ungensym-all jc31f5@ungensym-all) (set! jc31f7@compile-r6rs-top-level (lambda (jc4b60@x*) (call-with-values (lambda () (jc3185@top-level-expander jc4b60@x*)) (lambda (jc4b66@jc4b63 jc4b67@jc4b65) (let ((jc4b6a@invoke-code jc4b67@jc4b65) (jc4b6b@lib* jc4b66@jc4b63)) (lambda () (begin (for-each jc2d22@jc2b70@invoke-library jc4b6b@lib*) (let ((jc4b6e@expanded (jc2aac@jc2a64@expanded->core jc4b6a@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (jc31f5@ungensym-all jc4b6e@expanded)) (void)) (eval-core jc4b6e@expanded)))))))))) (set! jc4c82@jc31f7@compile-r6rs-top-level jc31f7@compile-r6rs-top-level) (set! jc31f9@pre-compile-r6rs-top-level (lambda (jc4b70@x*) (call-with-values (lambda () (jc3185@top-level-expander jc4b70@x*)) (lambda (jc4b76@jc4b73 jc4b77@jc4b75) (let ((jc4b7a@invoke-code jc4b77@jc4b75) (jc4b7b@lib* jc4b76@jc4b73)) (begin (for-each jc2d22@jc2b70@invoke-library jc4b7b@lib*) (jc2a54@jc2930@compile-core (jc2aac@jc2a64@expanded->core jc4b7a@invoke-code)))))))) (set! jc4c83@jc31f9@pre-compile-r6rs-top-level jc31f9@pre-compile-r6rs-top-level) (set! jc31fb@interaction-environment (let ((jc4b7e@the-env '#f)) (lambda () (or jc4b7e@the-env (let ((jc4b80@lib (jc2d1b@jc2b62@find-library-by-name '(mosh interaction))) (jc4b81@rib (jc2eba@make-empty-rib))) (begin (let ((jc4b84@subst (jc2cfd@jc2b26@library-subst jc4b80@lib))) (begin (jc2ea6@set-rib-sym*! jc4b81@rib (map car jc4b84@subst)) (jc2eaa@set-rib-mark**! jc4b81@rib (map (lambda (jc4b86@x) jc2e8a@top-mark*) jc4b84@subst)) (jc2eae@set-rib-label*! jc4b81@rib (map cdr jc4b84@subst)))) (let ((jc4b88@env (make-simple-struct 'interaction-env '4 (list jc4b81@rib '() '())))) (begin (set! jc4b7e@the-env jc4b88@env) jc4b88@env)))))))) (set! jc4c84@jc31fb@interaction-environment jc31fb@interaction-environment) (set! jc31fd@top-level-context (jc2a56@jc2934@make-parameter '#f)) (set! jc4c85@jc31fd@top-level-context jc31fd@top-level-context) (jc2d18@jc2b5c@current-library-expander jc31cf@library-expander))
(begin (begin (jc2aa9@jc2a5e@current-primitive-locations (lambda (jc51ef@x) (let ((jc51f1@t (assq jc51ef@x '((syntax-error . jc4c7b@jc31e9@syntax-error) (syntax-dispatch . jc4c19@jc310d@syntax-dispatch) (load . jc4e05@jc4cac@load) (interaction-environment . jc4c84@jc31fb@interaction-environment) (library-path . jc2d10@jc2b4c@library-path) (mosh-cache-dir . jc2a57@jc2936@mosh-cache-dir) (make-parameter . jc2a56@jc2934@make-parameter) (make-variable-transformer . jc4bd6@jc2f38@make-variable-transformer) (identifier? . jc4c7e@jc31ef@identifier?) (generate-temporaries . jc4c74@jc31db@generate-temporaries) (free-identifier=? . jc4c75@jc31dd@free-identifier=?) (syntax->datum . jc4c80@jc31f3@syntax->datum) (datum->syntax . jc4c7f@jc31f1@datum->syntax) (bound-identifier=? . jc4c76@jc31df@bound-identifier=?) (scheme-report-environment . jc4c6b@jc31c9@scheme-report-environment) (null-environment . jc4c6a@jc31c7@null-environment) (command-line . jc4e02@jc4ca6@command-line) (eval . jc4c6d@jc31cd@eval) (environment . jc4c69@jc31c5@environment) (syntax-violation . jc4c7d@jc31ed@syntax-violation) (assertion-error . jc4c7a@jc31e7@assertion-error))))) (if jc51f1@t (cdr jc51f1@t) '#f)))) (jc2d20@jc2b6c@install-library 'jc51cc '(mosh interaction) '() '() '() '() '((regexp? . jc518c) (alist->eq-hash-table . jc5188) (format . jc5185) (string-split . jc516b) (%start-process . jc5164) (%call-process . jc5163) (set-current-directory! . jc515f) (expand-path . jc515e) (current-directory . jc515d) (%getpid . jc515c) (%waitpid . jc515b) (simple-struct-name . jc515a) (simple-struct-set! . jc5159) (simple-struct-ref . jc5158) (make-simple-struct . jc5157) (simple-struct? . jc5156) (pointer-ref-c-int64 . jc5155) (pointer-ref-c-int32 . jc5154) (pointer-ref-c-int16 . jc5153) (pointer-ref-c-int8 . jc5152) (pointer-ref-c-uint64 . jc5151) (pointer-ref-c-uint32 . jc5150) (pointer-ref-c-uint16 . jc514f) (pointer-ref-c-uint8 . jc514e) (pointer-set-c-uint64! . jc514d) (pointer-set-c-uint32! . jc514c) (pointer-set-c-uint16! . jc514b) (pointer-set-c-uint8! . jc514a) (pointer-set-c-int64! . jc5149) (pointer-set-c-int32! . jc5148) (pointer-set-c-int16! . jc5147) (pointer-set-c-int8! . jc5146) (pointer-set-c-pointer! . jc5145) (pointer-set-c-double! . jc5144) (pointer-set-c-float! . jc5143) (pointer-set-c-long-long! . jc5142) (pointer-set-c-long! . jc5141) (pointer-set-c-int! . jc5140) (pointer-set-c-short! . jc513f) (pointer-set-c-char! . jc513e) (pointer-ref-c-pointer . jc513d) (pointer-ref-c-double . jc513c) (pointer-ref-c-float . jc513b) (pointer-ref-c-unsigned-long-long . jc513a) (pointer-ref-c-signed-long-long . jc5139) (pointer-ref-c-unsigned-long . jc5138) (pointer-ref-c-signed-long . jc5137) (pointer-ref-c-unsigned-int . jc5136) (pointer-ref-c-signed-int . jc5135) (pointer-ref-c-unsigned-short . jc5134) (pointer-ref-c-signed-short . jc5133) (pointer-ref-c-unsigned-char . jc5132) (pointer-ref-c-signed-char . jc5131) (pointer->integer . jc5130) (integer->pointer . jc512f) (pointer? . jc512e) (shared-errno . jc512d) (%ffi-supported? . jc5126) (%ffi-pointer->string . jc5125) (%ffi-call . jc5124) (%ffi-lookup . jc5123) (%ffi-open . jc5122) (null-terminated-utf8->string . jc5121) (null-terminated-bytevector->string . jc5120) (%exec . jc511f) (%fork . jc511e) (%pipe . jc511d) (p . jc511a) (whereis . jc50fe) (register . jc50fd) (vm-join! . jc50fc) (vm-set-value! . jc50fb) (vm? . jc50fa) (main-vm? . jc50f9) (vm-eval . jc50f8) (vm-self . jc50f7) (vm-start! . jc50f6) (make-vm . jc50f5) (mutex-try-lock! . jc50f4) (mutex-unlock! . jc50f3) (mutex-lock! . jc50f2) (mutex? . jc50f1) (make-mutex . jc50f0) (condition-variable-notify-all! . jc50ef) (condition-variable-notify! . jc50ee) (condition-variable-wait! . jc50ed) (make-condition-variable . jc50ec) (write/ss . jc50eb) (string-upcase . jc50cd) (string-titlecase . jc50cc) (string-normalize-nfkd . jc50cb) (string-normalize-nfkc . jc50ca) (string-normalize-nfd . jc50c9) (string-normalize-nfc . jc50c8) (string-foldcase . jc50c7) (string-downcase . jc50c6) (string-ci>? . jc50c5) (string-ci>=? . jc50c4) (string-ci=? . jc50c3) (string-ci<? . jc50c2) (string-ci<=? . jc50c1) (char-whitespace? . jc50c0) (char-upper-case? . jc50bf) (char-title-case? . jc50be) (char-numeric? . jc50bd) (char-lower-case? . jc50bc) (char-general-category . jc50bb) (char-upcase . jc50ba) (char-titlecase . jc50b9) (char-foldcase . jc50b8) (char-downcase . jc50b7) (char-ci>? . jc50b6) (char-ci>=? . jc50b5) (char-ci=? . jc50b4) (char-ci<? . jc50b3) (char-ci<=? . jc50b2) (char-alphabetic? . jc50b1) (make-variable-transformer . jc2f37) (identifier? . jc31ee) (generate-temporaries . jc31da) (free-identifier=? . jc31dc) (syntax->datum . jc31f2) (datum->syntax . jc31f0) (bound-identifier=? . jc31de) (record-type-descriptor? . jc50b0) (record-predicate . jc50af) (record-mutator . jc50ae) (record-constructor . jc50ad) (record-accessor . jc50ac) (make-record-type-descriptor . jc50ab) (make-record-constructor-descriptor . jc50aa) (record? . jc50a9) (record-type-uid . jc50a8) (record-type-sealed? . jc50a7) (record-type-parent . jc50a6) (record-type-opaque? . jc50a5) (record-type-name . jc50a4) (record-type-generative? . jc50a3) (record-type-field-names . jc50a2) (record-rtd . jc50a1) (record-field-mutable? . jc50a0) (delete-file . jc509f) (file-exists? . jc509e) (vector-sort! . jc509d) (vector-sort . jc509c) (list-sort . jc509b) (symbol-hash . jc509a) (string-ci-hash . jc5099) (string-hash . jc5098) (equal-hash . jc5097) (hashtable-equivalence-function . jc5096) (make-hashtable . jc5095) (hashtable-hash-function . jc5094) (make-eqv-hashtable . jc5093) (make-eq-hashtable . jc5092) (hashtable? . jc5091) (hashtable-update! . jc5090) (hashtable-size . jc508f) (hashtable-set! . jc508e) (hashtable-ref . jc508d) (hashtable-mutable? . jc508c) (hashtable-keys . jc508b) (hashtable-entries . jc508a) (hashtable-delete! . jc5089) (hashtable-copy . jc5088) (hashtable-contains? . jc5087) (hashtable-clear! . jc5086) (call-with-output-file . jc5085) (call-with-input-file . jc5084) (write-char . jc5083) (write . jc5082) (with-output-to-file . jc5081) (with-input-from-file . jc5080) (read-char . jc507f) (read . jc507e) (peek-char . jc507d) (open-output-file . jc507c) (open-input-file . jc507b) (newline . jc507a) (display . jc5079) (close-output-port . jc5078) (close-input-port . jc5077) (eof-object? . jc5076) (eof-object . jc5075) (current-error-port . jc5074) (current-output-port . jc5073) (current-input-port . jc5072) (output-port? . jc5071) (input-port? . jc5070) (utf-8-codec . jc506f) (utf-16-codec . jc506e) (transcoder-error-handling-mode . jc506d) (transcoder-eol-style . jc506c) (transcoder-codec . jc506b) (transcoded-port . jc506a) (textual-port? . jc5069) (string->bytevector . jc5068) (standard-output-port . jc5067) (standard-input-port . jc5066) (standard-error-port . jc5065) (set-port-position! . jc5064) (put-u8 . jc5063) (put-string . jc5062) (put-datum . jc5061) (put-char . jc5060) (put-bytevector . jc505f) (port? . jc505e) (port-transcoder . jc505d) (port-position . jc505c) (port-has-set-port-position!? . jc505b) (port-has-port-position? . jc505a) (port-eof? . jc5059) (output-port-buffer-mode . jc5058) (open-string-output-port . jc5057) (open-string-input-port . jc5056) (open-file-output-port . jc5055) (open-file-input/output-port . jc5054) (open-file-input-port . jc5053) (open-bytevector-output-port . jc5052) (open-bytevector-input-port . jc5051) (native-transcoder . jc5050) (native-eol-style . jc504f) (make-transcoder . jc504e) (latin-1-codec . jc504d) (make-i/o-write-error . jc504c) (make-i/o-read-error . jc504b) (make-i/o-port-error . jc504a) (make-i/o-invalid-position-error . jc5049) (make-i/o-filename-error . jc5048) (make-i/o-file-protection-error . jc5047) (make-i/o-file-is-read-only-error . jc5046) (make-i/o-file-does-not-exist-error . jc5045) (make-i/o-file-already-exists-error . jc5044) (make-i/o-error . jc5043) (make-i/o-encoding-error . jc5042) (make-i/o-decoding-error . jc5041) (make-custom-textual-output-port . jc5040) (make-custom-textual-input/output-port . jc503f) (make-custom-textual-input-port . jc503e) (make-custom-binary-output-port . jc503d) (make-custom-binary-input/output-port . jc503c) (make-custom-binary-input-port . jc503b) (make-bytevector . jc503a) (lookahead-u8 . jc5039) (lookahead-char . jc5038) (i/o-write-error? . jc5037) (i/o-read-error? . jc5036) (i/o-port-error? . jc5035) (i/o-invalid-position-error? . jc5034) (i/o-filename-error? . jc5033) (i/o-file-protection-error? . jc5032) (i/o-file-is-read-only-error? . jc5031) (i/o-file-does-not-exist-error? . jc5030) (i/o-file-already-exists-error? . jc502f) (i/o-error? . jc502e) (i/o-error-position . jc502d) (i/o-error-port . jc502c) (i/o-error-filename . jc502b) (i/o-encoding-error? . jc502a) (i/o-encoding-error-char . jc5029) (i/o-decoding-error? . jc5028) (get-u8 . jc5027) (get-string-n! . jc5026) (get-string-n . jc5025) (get-string-all . jc5024) (get-line . jc5023) (get-datum . jc5022) (get-char . jc5021) (get-bytevector-some . jc5020) (get-bytevector-n! . jc501f) (get-bytevector-n . jc501e) (get-bytevector-all . jc501d) (flush-output-port . jc501c) (close-port . jc501b) (exit . jc5013) (command-line . jc4ca5) (string-fill! . jc5012) (string-set! . jc5011) (set-cdr! . jc5010) (set-car! . jc500f) (remove . jc500e) (remv . jc500d) (remp . jc500c) (remq . jc500b) (partition . jc500a) (memv . jc5009) (memq . jc5008) (memp . jc5007) (member . jc5006) (exists . jc5005) (for-all . jc5004) (fold-right . jc5003) (fold-left . jc5002) (find . jc5001) (filter . jc5000) (cons* . jc4fff) (assv . jc4ffe) (assq . jc4ffd) (assp . jc4ffc) (assoc . jc4ffb) (call-with-string-output-port . jc4ffa) (call-with-port . jc4ff9) (call-with-bytevector-output-port . jc4ff8) (bytevector->string . jc4ff7) (buffer-mode? . jc4ff6) (binary-port? . jc4ff5) (with-exception-handler . jc4ff4) (raise-continuable . jc4ff3) (raise . jc4ff2) (eval . jc31cc) (environment . jc31c4) (make-enumeration . jc4ff1) (enum-set=? . jc4ff0) (enum-set-universe . jc4fef) (enum-set-union . jc4fee) (enum-set-subset? . jc4fed) (enum-set-projection . jc4fec) (enum-set-member? . jc4feb) (enum-set-intersection . jc4fea) (enum-set-indexer . jc4fe9) (enum-set-difference . jc4fe8) (enum-set-constructor . jc4fe7) (enum-set-complement . jc4fe6) (enum-set->list . jc4fe5) (who-condition? . jc4fe4) (warning? . jc4fe3) (violation? . jc4fe2) (undefined-violation? . jc4fe1) (syntax-violation? . jc4fe0) (syntax-violation-subform . jc4fdf) (syntax-violation-form . jc4fde) (syntax-violation . jc31ec) (simple-conditions . jc4fdd) (serious-condition? . jc4fdc) (non-continuable-violation? . jc4fdb) (message-condition? . jc4fda) (make-who-condition . jc4fd9) (make-warning . jc4fd8) (make-violation . jc4fd7) (make-undefined-violation . jc4fd6) (make-syntax-violation . jc4fd5) (make-serious-condition . jc4fd4) (make-non-continuable-violation . jc4fd3) (make-message-condition . jc4fd2) (make-lexical-violation . jc4fd1) (make-irritants-condition . jc4fd0) (make-implementation-restriction-violation . jc4fcf) (make-error . jc4fce) (make-assertion-violation . jc4fcd) (lexical-violation? . jc4fcc) (irritants-condition? . jc4fcb) (implementation-restriction-violation? . jc4fca) (error? . jc4fc9) (condition-who . jc4fc8) (condition-predicate . jc4fc7) (condition-message . jc4fc6) (condition-irritants . jc4fc5) (condition-accessor . jc4fc4) (condition . jc4fc3) (assertion-violation? . jc4fc2) (condition? . jc4fc1) (utf32->string . jc4fc0) (utf16->string . jc4fbf) (utf8->string . jc4fbe) (uint-list->bytevector . jc4fbd) (u8-list->bytevector . jc4fbc) (string->utf8 . jc4fbb) (string->utf32 . jc4fba) (string->utf16 . jc4fb9) (sint-list->bytevector . jc4fb8) (native-endianness . jc4fb7) (bytevector? . jc4fb6) (bytevector=? . jc4fb5) (bytevector-uint-set! . jc4fb4) (bytevector-uint-ref . jc4fb3) (bytevector-u8-set! . jc4fb2) (bytevector-u8-ref . jc4fb1) (bytevector-u64-set! . jc4fb0) (bytevector-u64-ref . jc4faf) (bytevector-u64-native-set! . jc4fae) (bytevector-u64-native-ref . jc4fad) (bytevector-u32-set! . jc4fac) (bytevector-u32-ref . jc4fab) (bytevector-u32-native-set! . jc4faa) (bytevector-u32-native-ref . jc4fa9) (bytevector-u16-set! . jc4fa8) (bytevector-u16-ref . jc4fa7) (bytevector-u16-native-set! . jc4fa6) (bytevector-u16-native-ref . jc4fa5) (bytevector-sint-set! . jc4fa4) (bytevector-sint-ref . jc4fa3) (bytevector-s8-set! . jc4fa2) (bytevector-s8-ref . jc4fa1) (bytevector-s64-set! . jc4fa0) (bytevector-s64-ref . jc4f9f) (bytevector-s64-native-set! . jc4f9e) (bytevector-s64-native-ref . jc4f9d) (bytevector-s32-set! . jc4f9c) (bytevector-s32-ref . jc4f9b) (bytevector-s32-native-set! . jc4f9a) (bytevector-s32-native-ref . jc4f99) (bytevector-s16-set! . jc4f98) (bytevector-s16-ref . jc4f97) (bytevector-s16-native-set! . jc4f96) (bytevector-s16-native-ref . jc4f95) (bytevector-length . jc4f94) (bytevector-ieee-single-ref . jc4f93) (bytevector-ieee-single-set! . jc4f92) (bytevector-ieee-single-native-set! . jc4f91) (bytevector-ieee-single-native-ref . jc4f90) (bytevector-ieee-double-set! . jc4f8f) (bytevector-ieee-double-ref . jc4f8e) (bytevector-ieee-double-native-set! . jc4f8d) (bytevector-ieee-double-native-ref . jc4f8c) (bytevector-fill! . jc4f8b) (bytevector-copy! . jc4f8a) (bytevector-copy . jc4f89) (bytevector->uint-list . jc4f88) (bytevector->u8-list . jc4f87) (bytevector->sint-list . jc4f86) (no-nans-violation? . jc4f85) (no-infinities-violation? . jc4f84) (make-no-nans-violation . jc4f83) (make-no-infinities-violation . jc4f82) (real->flonum . jc4f81) (flzero? . jc4f80) (fltruncate . jc4f7f) (fltan . jc4f7e) (flsqrt . jc4f7d) (flsin . jc4f7c) (flround . jc4f7b) (flpositive? . jc4f7a) (flonum? . jc4f79) (flodd? . jc4f78) (flnumerator . jc4f77) (flnegative? . jc4f76) (flnan? . jc4f75) (flmod0 . jc4f74) (flmod . jc4f73) (flmin . jc4f72) (flmax . jc4f71) (fllog . jc4f70) (flinteger? . jc4f6f) (flinfinite? . jc4f6e) (flfloor . jc4f6d) (flfinite? . jc4f6c) (flexpt . jc4f6b) (flexp . jc4f6a) (fleven? . jc4f69) (fldiv0-and-mod0 . jc4f68) (fldiv0 . jc4f67) (fldiv-and-mod . jc4f66) (fldiv . jc4f65) (fldenominator . jc4f64) (flcos . jc4f63) (flceiling . jc4f62) (flatan . jc4f61) (flasin . jc4f60) (flacos . jc4f5f) (flabs . jc4f5e) (fl>? . jc4f5d) (fl>=? . jc4f5c) (fl=? . jc4f5b) (fl<? . jc4f5a) (fl<=? . jc4f59) (fl/ . jc4f58) (fl- . jc4f57) (fl+ . jc4f56) (fl* . jc4f55) (fixnum->flonum . jc4f54) (fxzero? . jc4f53) (fxxor . jc4f52) (fxrotate-bit-field . jc4f51) (fxreverse-bit-field . jc4f50) (fxpositive? . jc4f4f) (fxodd? . jc4f4e) (fxnot . jc4f4d) (fxnegative? . jc4f4c) (fxmod0 . jc4f4b) (fxmod . jc4f4a) (fxmin . jc4f49) (fxmax . jc4f48) (fxlength . jc4f47) (fxior . jc4f46) (fxif . jc4f45) (fxfirst-bit-set . jc4f44) (fxeven? . jc4f43) (fxdiv0-and-mod0 . jc4f42) (fxdiv0 . jc4f41) (fxdiv-and-mod . jc4f40) (fxdiv . jc4f3f) (fxcopy-bit-field . jc4f3e) (fxcopy-bit . jc4f3d) (fxbit-set? . jc4f3c) (fxbit-field . jc4f3b) (fxbit-count . jc4f3a) (fxarithmetic-shift-right . jc4f39) (fxarithmetic-shift-left . jc4f38) (fxarithmetic-shift . jc4f37) (fxand . jc4f36) (fx>? . jc4f35) (fx>=? . jc4f34) (fx=? . jc4f33) (fx<? . jc4f32) (fx<=? . jc4f31) (fx-/carry . jc4f30) (fx- . jc4f2f) (fx+/carry . jc4f2e) (fx+ . jc4f2d) (fx*/carry . jc4f2c) (fx* . jc4f2b) (greatest-fixnum . jc4f2a) (least-fixnum . jc4f29) (fixnum-width . jc4f28) (fixnum? . jc4f27) (bitwise-rotate-bit-field . jc4f26) (bitwise-reverse-bit-field . jc4f25) (bitwise-length . jc4f24) (bitwise-if . jc4f23) (bitwise-first-bit-set . jc4f22) (bitwise-copy-bit-field . jc4f21) (bitwise-copy-bit . jc4f20) (bitwise-bit-set? . jc4f1f) (bitwise-bit-field . jc4f1e) (bitwise-bit-count . jc4f1d) (bitwise-xor . jc4f1c) (bitwise-ior . jc4f1b) (bitwise-and . jc4f1a) (bitwise-not . jc4f19) (bitwise-arithmetic-shift-right . jc4f18) (bitwise-arithmetic-shift-left . jc4f17) (bitwise-arithmetic-shift . jc4f16) (zero? . jc4f15) (vector? . jc4f14) (vector-set! . jc4f13) (vector-ref . jc4f12) (vector-map . jc4f11) (vector-length . jc4f10) (vector-for-each . jc4f0f) (vector-fill! . jc4f0e) (vector->list . jc4f0d) (vector . jc4f0c) (values . jc4f0b) (truncate . jc4f0a) (tan . jc4f09) (symbol? . jc4f08) (symbol=? . jc4f07) (symbol->string . jc4f06) (substring . jc4f05) (string? . jc4f04) (string>? . jc4f03) (string>=? . jc4f02) (string=? . jc4f01) (string<? . jc4f00) (string<=? . jc4eff) (string-ref . jc4efe) (string-length . jc4efd) (string-for-each . jc4efc) (string-copy . jc4efb) (string-append . jc4efa) (string->symbol . jc4ef9) (string->number . jc4ef8) (string->list . jc4ef7) (string . jc4ef6) (sqrt . jc4ef5) (sin . jc4ef4) (round . jc4ef3) (reverse . jc4ef2) (real? . jc4ef1) (real-valued? . jc4ef0) (real-part . jc4eef) (rationalize . jc4eee) (rational? . jc4eed) (rational-valued? . jc4eec) (procedure? . jc4eeb) (positive? . jc4eea) (pair? . jc4ee9) (odd? . jc4ee8) (numerator . jc4ee7) (number? . jc4ee6) (number->string . jc4ee5) (null? . jc4ee4) (not . jc4ee3) (negative? . jc4ee2) (nan? . jc4ee1) (min . jc4ee0) (max . jc4edf) (map . jc4ede) (make-vector . jc4edd) (make-string . jc4edc) (make-rectangular . jc4edb) (make-polar . jc4eda) (magnitude . jc4ed9) (log . jc4ed8) (list? . jc4ed7) (list-tail . jc4ed6) (list-ref . jc4ed5) (list->vector . jc4ed4) (list->string . jc4ed3) (list . jc4ed2) (length . jc4ed1) (lcm . jc4ed0) (integer? . jc4ecf) (integer-valued? . jc4ece) (integer->char . jc4ecd) (infinite? . jc4ecc) (inexact? . jc4ecb) (inexact . jc4eca) (imag-part . jc4ec9) (gcd . jc4ec8) (for-each . jc4ec7) (floor . jc4ec6) (finite? . jc4ec5) (expt . jc4ec4) (exp . jc4ec3) (exact? . jc4ec2) (exact-integer-sqrt . jc4ec1) (exact . jc4ec0) (even? . jc4ebf) (error . jc4ebe) (eqv? . jc4ebd) (equal? . jc4ebc) (eq? . jc4ebb) (dynamic-wind . jc4eba) (div0-and-mod0 . jc4eb9) (mod0 . jc4eb8) (div0 . jc4eb7) (div-and-mod . jc4eb6) (mod . jc4eb5) (div . jc4eb4) (denominator . jc4eb3) (cos . jc4eb2) (cons . jc4eb1) (complex? . jc4eb0) (char? . jc4eaf) (char>? . jc4eae) (char>=? . jc4ead) (char=? . jc4eac) (char<? . jc4eab) (char<=? . jc4eaa) (char->integer . jc4ea9) (ceiling . jc4ea8) (call-with-values . jc4ea7) (call/cc . jc4ea6) (call-with-current-continuation . jc4ea5) (cddddr . jc4ea4) (cdddar . jc4ea3) (cddadr . jc4ea2) (cddaar . jc4ea1) (cdaddr . jc4ea0) (cdadar . jc4e9f) (cdaadr . jc4e9e) (cdaaar . jc4e9d) (cadddr . jc4e9c) (caddar . jc4e9b) (cadadr . jc4e9a) (cadaar . jc4e99) (caaddr . jc4e98) (caadar . jc4e97) (caaadr . jc4e96) (caaaar . jc4e95) (cdddr . jc4e94) (cddar . jc4e93) (cdadr . jc4e92) (cdaar . jc4e91) (caddr . jc4e90) (cadar . jc4e8f) (caadr . jc4e8e) (caaar . jc4e8d) (cddr . jc4e8c) (cdar . jc4e8b) (cadr . jc4e8a) (caar . jc4e89) (cdr . jc4e88) (car . jc4e87) (boolean? . jc4e86) (boolean=? . jc4e85) (atan . jc4e84) (assertion-violation . jc4e83) (asin . jc4e82) (apply . jc4e81) (append . jc4e80) (angle . jc4e7f) (acos . jc4e7e) (abs . jc4e7d) (/ . jc4e7c) (* . jc4e7b) (- . jc4e7a) (+ . jc4e79) (>= . jc4e78) (> . jc4e77) (= . jc4e76) (<= . jc4e75) (< . jc4e74) (library . jc4e73) (&no-nans . jc4e72) (&no-infinities . jc4e71) (&i/o-encoding . jc4e70) (&i/o-decoding . jc4e6f) (&i/o-port . jc4e6e) (&i/o-file-does-not-exist . jc4e6d) (&i/o-file-already-exists . jc4e6c) (&i/o-file-is-read-only . jc4e6b) (&i/o-file-protection . jc4e6a) (&i/o-filename . jc4e69) (&i/o-invalid-position . jc4e68) (&i/o-write . jc4e67) (&i/o-read . jc4e66) (&i/o . jc4e65) (&undefined . jc4e64) (&syntax . jc4e63) (&lexical . jc4e62) (&implementation-restriction . jc4e61) (&non-continuable . jc4e60) (&who . jc4e5f) (&irritants . jc4e5e) (&assertion . jc4e5d) (&violation . jc4e5c) (&error . jc4e5b) (&serious . jc4e5a) (&warning . jc4e59) (&message . jc4e58) (&condition . jc4e57) (define-condition-type . jc4e56) (define-enumeration . jc4e55) (define-record-type . jc4e54) (parent-rtd . jc4e53) (nongenerative . jc4e52) (opaque . jc4e51) (sealed . jc4e50) (protocol . jc4e4f) (parent . jc4e4e) (immutable . jc4e4d) (mutable . jc4e4c) (fields . jc4e4b) (error-handling-mode . jc4e4a) (file-options . jc4e49) (buffer-mode . jc4e48) (eol-style . jc4e47) (guard . jc4e46) (unsyntax-splicing . jc4e43) (unsyntax . jc4e42) (unquote-splicing . jc4e41) (unquote . jc4e40) (_ . jc4e3f) (else . jc4e3e) (=> . jc4e3d) (... . jc4e3c) (assert . jc4e3b) (endianness . jc4e3a) (time . jc4e38) (do . jc4e37) (cond . jc4e36) (let* . jc4e35) (let*-values . jc4e34) (let-values . jc4e33) (identifier-syntax . jc4e32) (with-syntax . jc4e31) (quasisyntax . jc4e30) (quasiquote . jc4e2f) (syntax-rules . jc4e2e) (include . jc4e2d) (record-constructor-descriptor . jc4e2b) (record-type-descriptor . jc4e2a) (case . jc4e29) (unless . jc4e27) (when . jc4e26) (or . jc4e25) (and . jc4e24) (if . jc4e23) (let . jc4e22) (letrec* . jc4e21) (letrec . jc4e20) (case-lambda . jc4e1e) (lambda . jc4e1d) (syntax . jc4e1c) (syntax-case . jc4e1b) (quote . jc4e1a) (letrec-syntax . jc4e18) (let-syntax . jc4e17) (set! . jc4e16) (import . jc4e15) (begin . jc4e14) (define-syntax . jc4e12) (define . jc4e11)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51cd '(psyntax null-environment-5) '() '() '() '() '((make-promise . jc5014) (unquote-splicing . jc4e41) (unquote . jc4e40) (_ . jc4e3f) (else . jc4e3e) (=> . jc4e3d) (... . jc4e3c) (delay . jc4e39) (do . jc4e37) (cond . jc4e36) (let* . jc4e35) (quasiquote . jc4e2f) (syntax-rules . jc4e2e) (case . jc4e29) (or . jc4e25) (and . jc4e24) (if . jc4e23) (let . jc4e22) (letrec . jc4e20) (lambda . jc4e1d) (quote . jc4e1a) (letrec-syntax . jc4e18) (let-syntax . jc4e17) (set! . jc4e16) (begin . jc4e14) (define-syntax . jc4e12) (define . jc4e11)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51ce '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . jc50c5) (string-ci>=? . jc50c4) (string-ci=? . jc50c3) (string-ci<? . jc50c2) (string-ci<=? . jc50c1) (char-whitespace? . jc50c0) (char-upper-case? . jc50bf) (char-numeric? . jc50bd) (char-lower-case? . jc50bc) (char-upcase . jc50ba) (char-downcase . jc50b7) (char-ci>? . jc50b6) (char-ci>=? . jc50b5) (char-ci=? . jc50b4) (char-ci<? . jc50b3) (char-ci<=? . jc50b2) (char-alphabetic? . jc50b1) (call-with-output-file . jc5085) (call-with-input-file . jc5084) (write-char . jc5083) (write . jc5082) (with-output-to-file . jc5081) (with-input-from-file . jc5080) (read-char . jc507f) (read . jc507e) (peek-char . jc507d) (open-output-file . jc507c) (open-input-file . jc507b) (newline . jc507a) (display . jc5079) (close-output-port . jc5078) (close-input-port . jc5077) (eof-object . jc5075) (current-output-port . jc5073) (current-input-port . jc5072) (output-port? . jc5071) (input-port? . jc5070) (scheme-report-environment . jc31c8) (quotient . jc501a) (null-environment . jc31c6) (remainder . jc5019) (modulo . jc5018) (inexact->exact . jc5017) (force . jc5016) (exact->inexact . jc5015) (make-promise . jc5014) (string-fill! . jc5012) (string-set! . jc5011) (set-cdr! . jc5010) (set-car! . jc500f) (memv . jc5009) (memq . jc5008) (member . jc5006) (assv . jc4ffe) (assq . jc4ffd) (assoc . jc4ffb) (eval . jc31cc) (zero? . jc4f15) (vector? . jc4f14) (vector-set! . jc4f13) (vector-ref . jc4f12) (vector-length . jc4f10) (vector-fill! . jc4f0e) (vector->list . jc4f0d) (vector . jc4f0c) (values . jc4f0b) (truncate . jc4f0a) (tan . jc4f09) (symbol? . jc4f08) (symbol->string . jc4f06) (substring . jc4f05) (string? . jc4f04) (string>? . jc4f03) (string>=? . jc4f02) (string=? . jc4f01) (string<? . jc4f00) (string<=? . jc4eff) (string-ref . jc4efe) (string-length . jc4efd) (string-copy . jc4efb) (string-append . jc4efa) (string->symbol . jc4ef9) (string->number . jc4ef8) (string->list . jc4ef7) (string . jc4ef6) (sqrt . jc4ef5) (sin . jc4ef4) (round . jc4ef3) (reverse . jc4ef2) (real? . jc4ef1) (real-part . jc4eef) (rationalize . jc4eee) (rational? . jc4eed) (procedure? . jc4eeb) (positive? . jc4eea) (pair? . jc4ee9) (odd? . jc4ee8) (numerator . jc4ee7) (number? . jc4ee6) (number->string . jc4ee5) (not . jc4ee3) (negative? . jc4ee2) (min . jc4ee0) (max . jc4edf) (map . jc4ede) (make-vector . jc4edd) (make-string . jc4edc) (make-rectangular . jc4edb) (make-polar . jc4eda) (magnitude . jc4ed9) (log . jc4ed8) (list? . jc4ed7) (list-tail . jc4ed6) (list-ref . jc4ed5) (list->vector . jc4ed4) (list->string . jc4ed3) (list . jc4ed2) (length . jc4ed1) (lcm . jc4ed0) (integer? . jc4ecf) (integer->char . jc4ecd) (inexact? . jc4ecb) (imag-part . jc4ec9) (gcd . jc4ec8) (for-each . jc4ec7) (floor . jc4ec6) (expt . jc4ec4) (exp . jc4ec3) (exact? . jc4ec2) (even? . jc4ebf) (eqv? . jc4ebd) (equal? . jc4ebc) (eq? . jc4ebb) (dynamic-wind . jc4eba) (denominator . jc4eb3) (cos . jc4eb2) (cons . jc4eb1) (complex? . jc4eb0) (char? . jc4eaf) (char>? . jc4eae) (char>=? . jc4ead) (char=? . jc4eac) (char<? . jc4eab) (char<=? . jc4eaa) (char->integer . jc4ea9) (ceiling . jc4ea8) (call-with-values . jc4ea7) (call-with-current-continuation . jc4ea5) (cddddr . jc4ea4) (cdddar . jc4ea3) (cddadr . jc4ea2) (cddaar . jc4ea1) (cdaddr . jc4ea0) (cdadar . jc4e9f) (cdaadr . jc4e9e) (cdaaar . jc4e9d) (cadddr . jc4e9c) (caddar . jc4e9b) (cadadr . jc4e9a) (cadaar . jc4e99) (caaddr . jc4e98) (caadar . jc4e97) (caaadr . jc4e96) (caaaar . jc4e95) (cdddr . jc4e94) (cddar . jc4e93) (cdadr . jc4e92) (cdaar . jc4e91) (caddr . jc4e90) (cadar . jc4e8f) (caadr . jc4e8e) (caaar . jc4e8d) (cddr . jc4e8c) (cdar . jc4e8b) (cadr . jc4e8a) (caar . jc4e89) (cdr . jc4e88) (car . jc4e87) (boolean? . jc4e86) (atan . jc4e84) (asin . jc4e82) (apply . jc4e81) (append . jc4e80) (angle . jc4e7f) (acos . jc4e7e) (abs . jc4e7d) (/ . jc4e7c) (* . jc4e7b) (- . jc4e7a) (+ . jc4e79) (>= . jc4e78) (> . jc4e77) (= . jc4e76) (<= . jc4e75) (< . jc4e74) (unquote-splicing . jc4e41) (unquote . jc4e40) (else . jc4e3e) (=> . jc4e3d) (... . jc4e3c) (delay . jc4e39) (do . jc4e37) (cond . jc4e36) (let* . jc4e35) (quasiquote . jc4e2f) (syntax-rules . jc4e2e) (case . jc4e29) (or . jc4e25) (and . jc4e24) (if . jc4e23) (let . jc4e22) (letrec . jc4e20) (lambda . jc4e1d) (quote . jc4e1a) (letrec-syntax . jc4e18) (let-syntax . jc4e17) (set! . jc4e16) (begin . jc4e14) (define-syntax . jc4e12) (define . jc4e11)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51cf '(psyntax modules) '() '() '() '() '((module . jc4e13)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51d0 '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51d1 '(rnrs) '(6) '() '() '() '((regexp? . jc518c) (string-upcase . jc50cd) (string-titlecase . jc50cc) (string-normalize-nfkd . jc50cb) (string-normalize-nfkc . jc50ca) (string-normalize-nfd . jc50c9) (string-normalize-nfc . jc50c8) (string-foldcase . jc50c7) (string-downcase . jc50c6) (string-ci>? . jc50c5) (string-ci>=? . jc50c4) (string-ci=? . jc50c3) (string-ci<? . jc50c2) (string-ci<=? . jc50c1) (char-whitespace? . jc50c0) (char-upper-case? . jc50bf) (char-title-case? . jc50be) (char-numeric? . jc50bd) (char-lower-case? . jc50bc) (char-general-category . jc50bb) (char-upcase . jc50ba) (char-titlecase . jc50b9) (char-foldcase . jc50b8) (char-downcase . jc50b7) (char-ci>? . jc50b6) (char-ci>=? . jc50b5) (char-ci=? . jc50b4) (char-ci<? . jc50b3) (char-ci<=? . jc50b2) (char-alphabetic? . jc50b1) (make-variable-transformer . jc2f37) (identifier? . jc31ee) (generate-temporaries . jc31da) (free-identifier=? . jc31dc) (syntax->datum . jc31f2) (datum->syntax . jc31f0) (bound-identifier=? . jc31de) (record-type-descriptor? . jc50b0) (record-predicate . jc50af) (record-mutator . jc50ae) (record-constructor . jc50ad) (record-accessor . jc50ac) (make-record-type-descriptor . jc50ab) (make-record-constructor-descriptor . jc50aa) (record? . jc50a9) (record-type-uid . jc50a8) (record-type-sealed? . jc50a7) (record-type-parent . jc50a6) (record-type-opaque? . jc50a5) (record-type-name . jc50a4) (record-type-generative? . jc50a3) (record-type-field-names . jc50a2) (record-rtd . jc50a1) (record-field-mutable? . jc50a0) (delete-file . jc509f) (file-exists? . jc509e) (vector-sort! . jc509d) (vector-sort . jc509c) (list-sort . jc509b) (symbol-hash . jc509a) (string-ci-hash . jc5099) (string-hash . jc5098) (equal-hash . jc5097) (hashtable-equivalence-function . jc5096) (make-hashtable . jc5095) (hashtable-hash-function . jc5094) (make-eqv-hashtable . jc5093) (make-eq-hashtable . jc5092) (hashtable? . jc5091) (hashtable-update! . jc5090) (hashtable-size . jc508f) (hashtable-set! . jc508e) (hashtable-ref . jc508d) (hashtable-mutable? . jc508c) (hashtable-keys . jc508b) (hashtable-entries . jc508a) (hashtable-delete! . jc5089) (hashtable-copy . jc5088) (hashtable-contains? . jc5087) (hashtable-clear! . jc5086) (call-with-output-file . jc5085) (call-with-input-file . jc5084) (write-char . jc5083) (write . jc5082) (with-output-to-file . jc5081) (with-input-from-file . jc5080) (read-char . jc507f) (read . jc507e) (peek-char . jc507d) (open-output-file . jc507c) (open-input-file . jc507b) (newline . jc507a) (display . jc5079) (close-output-port . jc5078) (close-input-port . jc5077) (eof-object? . jc5076) (eof-object . jc5075) (current-error-port . jc5074) (current-output-port . jc5073) (current-input-port . jc5072) (output-port? . jc5071) (input-port? . jc5070) (utf-8-codec . jc506f) (utf-16-codec . jc506e) (transcoder-error-handling-mode . jc506d) (transcoder-eol-style . jc506c) (transcoder-codec . jc506b) (transcoded-port . jc506a) (textual-port? . jc5069) (string->bytevector . jc5068) (standard-output-port . jc5067) (standard-input-port . jc5066) (standard-error-port . jc5065) (set-port-position! . jc5064) (put-u8 . jc5063) (put-string . jc5062) (put-datum . jc5061) (put-char . jc5060) (put-bytevector . jc505f) (port? . jc505e) (port-transcoder . jc505d) (port-position . jc505c) (port-has-set-port-position!? . jc505b) (port-has-port-position? . jc505a) (port-eof? . jc5059) (output-port-buffer-mode . jc5058) (open-string-output-port . jc5057) (open-string-input-port . jc5056) (open-file-output-port . jc5055) (open-file-input/output-port . jc5054) (open-file-input-port . jc5053) (open-bytevector-output-port . jc5052) (open-bytevector-input-port . jc5051) (native-transcoder . jc5050) (native-eol-style . jc504f) (make-transcoder . jc504e) (latin-1-codec . jc504d) (make-i/o-write-error . jc504c) (make-i/o-read-error . jc504b) (make-i/o-port-error . jc504a) (make-i/o-invalid-position-error . jc5049) (make-i/o-filename-error . jc5048) (make-i/o-file-protection-error . jc5047) (make-i/o-file-is-read-only-error . jc5046) (make-i/o-file-does-not-exist-error . jc5045) (make-i/o-file-already-exists-error . jc5044) (make-i/o-error . jc5043) (make-i/o-encoding-error . jc5042) (make-i/o-decoding-error . jc5041) (make-custom-textual-output-port . jc5040) (make-custom-textual-input/output-port . jc503f) (make-custom-textual-input-port . jc503e) (make-custom-binary-output-port . jc503d) (make-custom-binary-input/output-port . jc503c) (make-custom-binary-input-port . jc503b) (make-bytevector . jc503a) (lookahead-u8 . jc5039) (lookahead-char . jc5038) (i/o-write-error? . jc5037) (i/o-read-error? . jc5036) (i/o-port-error? . jc5035) (i/o-invalid-position-error? . jc5034) (i/o-filename-error? . jc5033) (i/o-file-protection-error? . jc5032) (i/o-file-is-read-only-error? . jc5031) (i/o-file-does-not-exist-error? . jc5030) (i/o-file-already-exists-error? . jc502f) (i/o-error? . jc502e) (i/o-error-position . jc502d) (i/o-error-port . jc502c) (i/o-error-filename . jc502b) (i/o-encoding-error? . jc502a) (i/o-encoding-error-char . jc5029) (i/o-decoding-error? . jc5028) (get-u8 . jc5027) (get-string-n! . jc5026) (get-string-n . jc5025) (get-string-all . jc5024) (get-line . jc5023) (get-datum . jc5022) (get-char . jc5021) (get-bytevector-some . jc5020) (get-bytevector-n! . jc501f) (get-bytevector-n . jc501e) (get-bytevector-all . jc501d) (flush-output-port . jc501c) (close-port . jc501b) (exit . jc5013) (command-line . jc4ca5) (remove . jc500e) (remv . jc500d) (remp . jc500c) (remq . jc500b) (partition . jc500a) (memv . jc5009) (memq . jc5008) (memp . jc5007) (member . jc5006) (exists . jc5005) (for-all . jc5004) (fold-right . jc5003) (fold-left . jc5002) (find . jc5001) (filter . jc5000) (cons* . jc4fff) (assv . jc4ffe) (assq . jc4ffd) (assp . jc4ffc) (assoc . jc4ffb) (call-with-string-output-port . jc4ffa) (call-with-port . jc4ff9) (call-with-bytevector-output-port . jc4ff8) (bytevector->string . jc4ff7) (buffer-mode? . jc4ff6) (binary-port? . jc4ff5) (with-exception-handler . jc4ff4) (raise-continuable . jc4ff3) (raise . jc4ff2) (make-enumeration . jc4ff1) (enum-set=? . jc4ff0) (enum-set-universe . jc4fef) (enum-set-union . jc4fee) (enum-set-subset? . jc4fed) (enum-set-projection . jc4fec) (enum-set-member? . jc4feb) (enum-set-intersection . jc4fea) (enum-set-indexer . jc4fe9) (enum-set-difference . jc4fe8) (enum-set-constructor . jc4fe7) (enum-set-complement . jc4fe6) (enum-set->list . jc4fe5) (who-condition? . jc4fe4) (warning? . jc4fe3) (violation? . jc4fe2) (undefined-violation? . jc4fe1) (syntax-violation? . jc4fe0) (syntax-violation-subform . jc4fdf) (syntax-violation-form . jc4fde) (syntax-violation . jc31ec) (simple-conditions . jc4fdd) (serious-condition? . jc4fdc) (non-continuable-violation? . jc4fdb) (message-condition? . jc4fda) (make-who-condition . jc4fd9) (make-warning . jc4fd8) (make-violation . jc4fd7) (make-undefined-violation . jc4fd6) (make-syntax-violation . jc4fd5) (make-serious-condition . jc4fd4) (make-non-continuable-violation . jc4fd3) (make-message-condition . jc4fd2) (make-lexical-violation . jc4fd1) (make-irritants-condition . jc4fd0) (make-implementation-restriction-violation . jc4fcf) (make-error . jc4fce) (make-assertion-violation . jc4fcd) (lexical-violation? . jc4fcc) (irritants-condition? . jc4fcb) (implementation-restriction-violation? . jc4fca) (error? . jc4fc9) (condition-who . jc4fc8) (condition-predicate . jc4fc7) (condition-message . jc4fc6) (condition-irritants . jc4fc5) (condition-accessor . jc4fc4) (condition . jc4fc3) (assertion-violation? . jc4fc2) (condition? . jc4fc1) (utf32->string . jc4fc0) (utf16->string . jc4fbf) (utf8->string . jc4fbe) (uint-list->bytevector . jc4fbd) (u8-list->bytevector . jc4fbc) (string->utf8 . jc4fbb) (string->utf32 . jc4fba) (string->utf16 . jc4fb9) (sint-list->bytevector . jc4fb8) (native-endianness . jc4fb7) (bytevector? . jc4fb6) (bytevector=? . jc4fb5) (bytevector-uint-set! . jc4fb4) (bytevector-uint-ref . jc4fb3) (bytevector-u8-set! . jc4fb2) (bytevector-u8-ref . jc4fb1) (bytevector-u64-set! . jc4fb0) (bytevector-u64-ref . jc4faf) (bytevector-u64-native-set! . jc4fae) (bytevector-u64-native-ref . jc4fad) (bytevector-u32-set! . jc4fac) (bytevector-u32-ref . jc4fab) (bytevector-u32-native-set! . jc4faa) (bytevector-u32-native-ref . jc4fa9) (bytevector-u16-set! . jc4fa8) (bytevector-u16-ref . jc4fa7) (bytevector-u16-native-set! . jc4fa6) (bytevector-u16-native-ref . jc4fa5) (bytevector-sint-set! . jc4fa4) (bytevector-sint-ref . jc4fa3) (bytevector-s8-set! . jc4fa2) (bytevector-s8-ref . jc4fa1) (bytevector-s64-set! . jc4fa0) (bytevector-s64-ref . jc4f9f) (bytevector-s64-native-set! . jc4f9e) (bytevector-s64-native-ref . jc4f9d) (bytevector-s32-set! . jc4f9c) (bytevector-s32-ref . jc4f9b) (bytevector-s32-native-set! . jc4f9a) (bytevector-s32-native-ref . jc4f99) (bytevector-s16-set! . jc4f98) (bytevector-s16-ref . jc4f97) (bytevector-s16-native-set! . jc4f96) (bytevector-s16-native-ref . jc4f95) (bytevector-length . jc4f94) (bytevector-ieee-single-ref . jc4f93) (bytevector-ieee-single-set! . jc4f92) (bytevector-ieee-single-native-set! . jc4f91) (bytevector-ieee-single-native-ref . jc4f90) (bytevector-ieee-double-set! . jc4f8f) (bytevector-ieee-double-ref . jc4f8e) (bytevector-ieee-double-native-set! . jc4f8d) (bytevector-ieee-double-native-ref . jc4f8c) (bytevector-fill! . jc4f8b) (bytevector-copy! . jc4f8a) (bytevector-copy . jc4f89) (bytevector->uint-list . jc4f88) (bytevector->u8-list . jc4f87) (bytevector->sint-list . jc4f86) (no-nans-violation? . jc4f85) (no-infinities-violation? . jc4f84) (make-no-nans-violation . jc4f83) (make-no-infinities-violation . jc4f82) (real->flonum . jc4f81) (flzero? . jc4f80) (fltruncate . jc4f7f) (fltan . jc4f7e) (flsqrt . jc4f7d) (flsin . jc4f7c) (flround . jc4f7b) (flpositive? . jc4f7a) (flonum? . jc4f79) (flodd? . jc4f78) (flnumerator . jc4f77) (flnegative? . jc4f76) (flnan? . jc4f75) (flmod0 . jc4f74) (flmod . jc4f73) (flmin . jc4f72) (flmax . jc4f71) (fllog . jc4f70) (flinteger? . jc4f6f) (flinfinite? . jc4f6e) (flfloor . jc4f6d) (flfinite? . jc4f6c) (flexpt . jc4f6b) (flexp . jc4f6a) (fleven? . jc4f69) (fldiv0-and-mod0 . jc4f68) (fldiv0 . jc4f67) (fldiv-and-mod . jc4f66) (fldiv . jc4f65) (fldenominator . jc4f64) (flcos . jc4f63) (flceiling . jc4f62) (flatan . jc4f61) (flasin . jc4f60) (flacos . jc4f5f) (flabs . jc4f5e) (fl>? . jc4f5d) (fl>=? . jc4f5c) (fl=? . jc4f5b) (fl<? . jc4f5a) (fl<=? . jc4f59) (fl/ . jc4f58) (fl- . jc4f57) (fl+ . jc4f56) (fl* . jc4f55) (fixnum->flonum . jc4f54) (fxzero? . jc4f53) (fxxor . jc4f52) (fxrotate-bit-field . jc4f51) (fxreverse-bit-field . jc4f50) (fxpositive? . jc4f4f) (fxodd? . jc4f4e) (fxnot . jc4f4d) (fxnegative? . jc4f4c) (fxmod0 . jc4f4b) (fxmod . jc4f4a) (fxmin . jc4f49) (fxmax . jc4f48) (fxlength . jc4f47) (fxior . jc4f46) (fxif . jc4f45) (fxfirst-bit-set . jc4f44) (fxeven? . jc4f43) (fxdiv0-and-mod0 . jc4f42) (fxdiv0 . jc4f41) (fxdiv-and-mod . jc4f40) (fxdiv . jc4f3f) (fxcopy-bit-field . jc4f3e) (fxcopy-bit . jc4f3d) (fxbit-set? . jc4f3c) (fxbit-field . jc4f3b) (fxbit-count . jc4f3a) (fxarithmetic-shift-right . jc4f39) (fxarithmetic-shift-left . jc4f38) (fxarithmetic-shift . jc4f37) (fxand . jc4f36) (fx>? . jc4f35) (fx>=? . jc4f34) (fx=? . jc4f33) (fx<? . jc4f32) (fx<=? . jc4f31) (fx-/carry . jc4f30) (fx- . jc4f2f) (fx+/carry . jc4f2e) (fx+ . jc4f2d) (fx*/carry . jc4f2c) (fx* . jc4f2b) (greatest-fixnum . jc4f2a) (least-fixnum . jc4f29) (fixnum-width . jc4f28) (fixnum? . jc4f27) (bitwise-rotate-bit-field . jc4f26) (bitwise-reverse-bit-field . jc4f25) (bitwise-length . jc4f24) (bitwise-if . jc4f23) (bitwise-first-bit-set . jc4f22) (bitwise-copy-bit-field . jc4f21) (bitwise-copy-bit . jc4f20) (bitwise-bit-set? . jc4f1f) (bitwise-bit-field . jc4f1e) (bitwise-bit-count . jc4f1d) (bitwise-xor . jc4f1c) (bitwise-ior . jc4f1b) (bitwise-and . jc4f1a) (bitwise-not . jc4f19) (bitwise-arithmetic-shift-right . jc4f18) (bitwise-arithmetic-shift-left . jc4f17) (bitwise-arithmetic-shift . jc4f16) (zero? . jc4f15) (vector? . jc4f14) (vector-set! . jc4f13) (vector-ref . jc4f12) (vector-map . jc4f11) (vector-length . jc4f10) (vector-for-each . jc4f0f) (vector-fill! . jc4f0e) (vector->list . jc4f0d) (vector . jc4f0c) (values . jc4f0b) (truncate . jc4f0a) (tan . jc4f09) (symbol? . jc4f08) (symbol=? . jc4f07) (symbol->string . jc4f06) (substring . jc4f05) (string? . jc4f04) (string>? . jc4f03) (string>=? . jc4f02) (string=? . jc4f01) (string<? . jc4f00) (string<=? . jc4eff) (string-ref . jc4efe) (string-length . jc4efd) (string-for-each . jc4efc) (string-copy . jc4efb) (string-append . jc4efa) (string->symbol . jc4ef9) (string->number . jc4ef8) (string->list . jc4ef7) (string . jc4ef6) (sqrt . jc4ef5) (sin . jc4ef4) (round . jc4ef3) (reverse . jc4ef2) (real? . jc4ef1) (real-valued? . jc4ef0) (real-part . jc4eef) (rationalize . jc4eee) (rational? . jc4eed) (rational-valued? . jc4eec) (procedure? . jc4eeb) (positive? . jc4eea) (pair? . jc4ee9) (odd? . jc4ee8) (numerator . jc4ee7) (number? . jc4ee6) (number->string . jc4ee5) (null? . jc4ee4) (not . jc4ee3) (negative? . jc4ee2) (nan? . jc4ee1) (min . jc4ee0) (max . jc4edf) (map . jc4ede) (make-vector . jc4edd) (make-string . jc4edc) (make-rectangular . jc4edb) (make-polar . jc4eda) (magnitude . jc4ed9) (log . jc4ed8) (list? . jc4ed7) (list-tail . jc4ed6) (list-ref . jc4ed5) (list->vector . jc4ed4) (list->string . jc4ed3) (list . jc4ed2) (length . jc4ed1) (lcm . jc4ed0) (integer? . jc4ecf) (integer-valued? . jc4ece) (integer->char . jc4ecd) (infinite? . jc4ecc) (inexact? . jc4ecb) (inexact . jc4eca) (imag-part . jc4ec9) (gcd . jc4ec8) (for-each . jc4ec7) (floor . jc4ec6) (finite? . jc4ec5) (expt . jc4ec4) (exp . jc4ec3) (exact? . jc4ec2) (exact-integer-sqrt . jc4ec1) (exact . jc4ec0) (even? . jc4ebf) (error . jc4ebe) (eqv? . jc4ebd) (equal? . jc4ebc) (eq? . jc4ebb) (dynamic-wind . jc4eba) (div0-and-mod0 . jc4eb9) (mod0 . jc4eb8) (div0 . jc4eb7) (div-and-mod . jc4eb6) (mod . jc4eb5) (div . jc4eb4) (denominator . jc4eb3) (cos . jc4eb2) (cons . jc4eb1) (complex? . jc4eb0) (char? . jc4eaf) (char>? . jc4eae) (char>=? . jc4ead) (char=? . jc4eac) (char<? . jc4eab) (char<=? . jc4eaa) (char->integer . jc4ea9) (ceiling . jc4ea8) (call-with-values . jc4ea7) (call/cc . jc4ea6) (call-with-current-continuation . jc4ea5) (cddddr . jc4ea4) (cdddar . jc4ea3) (cddadr . jc4ea2) (cddaar . jc4ea1) (cdaddr . jc4ea0) (cdadar . jc4e9f) (cdaadr . jc4e9e) (cdaaar . jc4e9d) (cadddr . jc4e9c) (caddar . jc4e9b) (cadadr . jc4e9a) (cadaar . jc4e99) (caaddr . jc4e98) (caadar . jc4e97) (caaadr . jc4e96) (caaaar . jc4e95) (cdddr . jc4e94) (cddar . jc4e93) (cdadr . jc4e92) (cdaar . jc4e91) (caddr . jc4e90) (cadar . jc4e8f) (caadr . jc4e8e) (caaar . jc4e8d) (cddr . jc4e8c) (cdar . jc4e8b) (cadr . jc4e8a) (caar . jc4e89) (cdr . jc4e88) (car . jc4e87) (boolean? . jc4e86) (boolean=? . jc4e85) (atan . jc4e84) (assertion-violation . jc4e83) (asin . jc4e82) (apply . jc4e81) (append . jc4e80) (angle . jc4e7f) (acos . jc4e7e) (abs . jc4e7d) (/ . jc4e7c) (* . jc4e7b) (- . jc4e7a) (+ . jc4e79) (>= . jc4e78) (> . jc4e77) (= . jc4e76) (<= . jc4e75) (< . jc4e74) (&no-nans . jc4e72) (&no-infinities . jc4e71) (&i/o-encoding . jc4e70) (&i/o-decoding . jc4e6f) (&i/o-port . jc4e6e) (&i/o-file-does-not-exist . jc4e6d) (&i/o-file-already-exists . jc4e6c) (&i/o-file-is-read-only . jc4e6b) (&i/o-file-protection . jc4e6a) (&i/o-filename . jc4e69) (&i/o-invalid-position . jc4e68) (&i/o-write . jc4e67) (&i/o-read . jc4e66) (&i/o . jc4e65) (&undefined . jc4e64) (&syntax . jc4e63) (&lexical . jc4e62) (&implementation-restriction . jc4e61) (&non-continuable . jc4e60) (&who . jc4e5f) (&irritants . jc4e5e) (&assertion . jc4e5d) (&violation . jc4e5c) (&error . jc4e5b) (&serious . jc4e5a) (&warning . jc4e59) (&message . jc4e58) (&condition . jc4e57) (define-condition-type . jc4e56) (define-enumeration . jc4e55) (define-record-type . jc4e54) (parent-rtd . jc4e53) (nongenerative . jc4e52) (opaque . jc4e51) (sealed . jc4e50) (protocol . jc4e4f) (parent . jc4e4e) (immutable . jc4e4d) (mutable . jc4e4c) (fields . jc4e4b) (error-handling-mode . jc4e4a) (file-options . jc4e49) (buffer-mode . jc4e48) (eol-style . jc4e47) (guard . jc4e46) (unsyntax-splicing . jc4e43) (unsyntax . jc4e42) (unquote-splicing . jc4e41) (unquote . jc4e40) (_ . jc4e3f) (else . jc4e3e) (=> . jc4e3d) (... . jc4e3c) (assert . jc4e3b) (endianness . jc4e3a) (do . jc4e37) (cond . jc4e36) (let* . jc4e35) (let*-values . jc4e34) (let-values . jc4e33) (identifier-syntax . jc4e32) (with-syntax . jc4e31) (quasisyntax . jc4e30) (quasiquote . jc4e2f) (syntax-rules . jc4e2e) (record-constructor-descriptor . jc4e2b) (record-type-descriptor . jc4e2a) (case . jc4e29) (unless . jc4e27) (when . jc4e26) (or . jc4e25) (and . jc4e24) (if . jc4e23) (let . jc4e22) (letrec* . jc4e21) (letrec . jc4e20) (case-lambda . jc4e1e) (lambda . jc4e1d) (syntax . jc4e1c) (syntax-case . jc4e1b) (quote . jc4e1a) (letrec-syntax . jc4e18) (let-syntax . jc4e17) (set! . jc4e16) (begin . jc4e14) (define-syntax . jc4e12) (define . jc4e11)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51d2 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . jc31c8) (quotient . jc501a) (null-environment . jc31c6) (remainder . jc5019) (modulo . jc5018) (inexact->exact . jc5017) (force . jc5016) (exact->inexact . jc5015) (make-promise . jc5014) (delay . jc4e39)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51d3 '(rnrs control) '(6) '() '() '() '((do . jc4e37) (unless . jc4e27) (when . jc4e26) (case-lambda . jc4e1e)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51d4 '(rnrs eval) '(6) '() '() '() '((eval . jc31cc) (environment . jc31c4)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51d5 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . jc5010) (set-car! . jc500f)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51d6 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . jc5012) (string-set! . jc5011)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51d7 '(rnrs programs) '(6) '() '() '() '((exit . jc5013) (command-line . jc4ca5)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51d8 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . jc2f37) (identifier? . jc31ee) (generate-temporaries . jc31da) (free-identifier=? . jc31dc) (syntax->datum . jc31f2) (datum->syntax . jc31f0) (bound-identifier=? . jc31de) (syntax-violation . jc31ec) (unsyntax-splicing . jc4e43) (unsyntax . jc4e42) (_ . jc4e3f) (... . jc4e3c) (with-syntax . jc4e31) (quasisyntax . jc4e30) (syntax . jc4e1c) (syntax-case . jc4e1b)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51d9 '(rnrs files) '(6) '() '() '() '((delete-file . jc509f) (file-exists? . jc509e) (make-i/o-write-error . jc504c) (make-i/o-read-error . jc504b) (make-i/o-port-error . jc504a) (make-i/o-invalid-position-error . jc5049) (make-i/o-filename-error . jc5048) (make-i/o-file-protection-error . jc5047) (make-i/o-file-is-read-only-error . jc5046) (make-i/o-file-does-not-exist-error . jc5045) (make-i/o-file-already-exists-error . jc5044) (make-i/o-error . jc5043) (i/o-write-error? . jc5037) (i/o-read-error? . jc5036) (i/o-port-error? . jc5035) (i/o-invalid-position-error? . jc5034) (i/o-filename-error? . jc5033) (i/o-file-protection-error? . jc5032) (i/o-file-is-read-only-error? . jc5031) (i/o-file-does-not-exist-error? . jc5030) (i/o-file-already-exists-error? . jc502f) (i/o-error? . jc502e) (i/o-error-position . jc502d) (i/o-error-port . jc502c) (i/o-error-filename . jc502b) (&i/o-port . jc4e6e) (&i/o-file-does-not-exist . jc4e6d) (&i/o-file-already-exists . jc4e6c) (&i/o-file-is-read-only . jc4e6b) (&i/o-file-protection . jc4e6a) (&i/o-filename . jc4e69) (&i/o-invalid-position . jc4e68) (&i/o-write . jc4e67) (&i/o-read . jc4e66) (&i/o . jc4e65)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51da '(rnrs sorting) '(6) '() '() '() '((vector-sort! . jc509d) (vector-sort . jc509c) (list-sort . jc509b)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51db '(rnrs base) '(6) '() '() '() '((zero? . jc4f15) (vector? . jc4f14) (vector-set! . jc4f13) (vector-ref . jc4f12) (vector-map . jc4f11) (vector-length . jc4f10) (vector-for-each . jc4f0f) (vector-fill! . jc4f0e) (vector->list . jc4f0d) (vector . jc4f0c) (values . jc4f0b) (truncate . jc4f0a) (tan . jc4f09) (symbol? . jc4f08) (symbol=? . jc4f07) (symbol->string . jc4f06) (substring . jc4f05) (string? . jc4f04) (string>? . jc4f03) (string>=? . jc4f02) (string=? . jc4f01) (string<? . jc4f00) (string<=? . jc4eff) (string-ref . jc4efe) (string-length . jc4efd) (string-for-each . jc4efc) (string-copy . jc4efb) (string-append . jc4efa) (string->symbol . jc4ef9) (string->number . jc4ef8) (string->list . jc4ef7) (string . jc4ef6) (sqrt . jc4ef5) (sin . jc4ef4) (round . jc4ef3) (reverse . jc4ef2) (real? . jc4ef1) (real-valued? . jc4ef0) (real-part . jc4eef) (rationalize . jc4eee) (rational? . jc4eed) (rational-valued? . jc4eec) (procedure? . jc4eeb) (positive? . jc4eea) (pair? . jc4ee9) (odd? . jc4ee8) (numerator . jc4ee7) (number? . jc4ee6) (number->string . jc4ee5) (null? . jc4ee4) (not . jc4ee3) (negative? . jc4ee2) (nan? . jc4ee1) (min . jc4ee0) (max . jc4edf) (map . jc4ede) (make-vector . jc4edd) (make-string . jc4edc) (make-rectangular . jc4edb) (make-polar . jc4eda) (magnitude . jc4ed9) (log . jc4ed8) (list? . jc4ed7) (list-tail . jc4ed6) (list-ref . jc4ed5) (list->vector . jc4ed4) (list->string . jc4ed3) (list . jc4ed2) (length . jc4ed1) (lcm . jc4ed0) (integer? . jc4ecf) (integer-valued? . jc4ece) (integer->char . jc4ecd) (infinite? . jc4ecc) (inexact? . jc4ecb) (inexact . jc4eca) (imag-part . jc4ec9) (gcd . jc4ec8) (for-each . jc4ec7) (floor . jc4ec6) (finite? . jc4ec5) (expt . jc4ec4) (exp . jc4ec3) (exact? . jc4ec2) (exact-integer-sqrt . jc4ec1) (exact . jc4ec0) (even? . jc4ebf) (error . jc4ebe) (eqv? . jc4ebd) (equal? . jc4ebc) (eq? . jc4ebb) (dynamic-wind . jc4eba) (div0-and-mod0 . jc4eb9) (mod0 . jc4eb8) (div0 . jc4eb7) (div-and-mod . jc4eb6) (mod . jc4eb5) (div . jc4eb4) (denominator . jc4eb3) (cos . jc4eb2) (cons . jc4eb1) (complex? . jc4eb0) (char? . jc4eaf) (char>? . jc4eae) (char>=? . jc4ead) (char=? . jc4eac) (char<? . jc4eab) (char<=? . jc4eaa) (char->integer . jc4ea9) (ceiling . jc4ea8) (call-with-values . jc4ea7) (call/cc . jc4ea6) (call-with-current-continuation . jc4ea5) (cddddr . jc4ea4) (cdddar . jc4ea3) (cddadr . jc4ea2) (cddaar . jc4ea1) (cdaddr . jc4ea0) (cdadar . jc4e9f) (cdaadr . jc4e9e) (cdaaar . jc4e9d) (cadddr . jc4e9c) (caddar . jc4e9b) (cadadr . jc4e9a) (cadaar . jc4e99) (caaddr . jc4e98) (caadar . jc4e97) (caaadr . jc4e96) (caaaar . jc4e95) (cdddr . jc4e94) (cddar . jc4e93) (cdadr . jc4e92) (cdaar . jc4e91) (caddr . jc4e90) (cadar . jc4e8f) (caadr . jc4e8e) (caaar . jc4e8d) (cddr . jc4e8c) (cdar . jc4e8b) (cadr . jc4e8a) (caar . jc4e89) (cdr . jc4e88) (car . jc4e87) (boolean? . jc4e86) (boolean=? . jc4e85) (atan . jc4e84) (assertion-violation . jc4e83) (asin . jc4e82) (apply . jc4e81) (append . jc4e80) (angle . jc4e7f) (acos . jc4e7e) (abs . jc4e7d) (/ . jc4e7c) (* . jc4e7b) (- . jc4e7a) (+ . jc4e79) (>= . jc4e78) (> . jc4e77) (= . jc4e76) (<= . jc4e75) (< . jc4e74) (unquote-splicing . jc4e41) (unquote . jc4e40) (_ . jc4e3f) (else . jc4e3e) (=> . jc4e3d) (... . jc4e3c) (assert . jc4e3b) (cond . jc4e36) (let* . jc4e35) (let*-values . jc4e34) (let-values . jc4e33) (identifier-syntax . jc4e32) (quasiquote . jc4e2f) (syntax-rules . jc4e2e) (case . jc4e29) (or . jc4e25) (and . jc4e24) (if . jc4e23) (let . jc4e22) (letrec* . jc4e21) (letrec . jc4e20) (lambda . jc4e1d) (quote . jc4e1a) (letrec-syntax . jc4e18) (let-syntax . jc4e17) (set! . jc4e16) (begin . jc4e14) (define-syntax . jc4e12) (define . jc4e11)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51dc '(rnrs lists) '(6) '() '() '() '((remove . jc500e) (remv . jc500d) (remp . jc500c) (remq . jc500b) (partition . jc500a) (memv . jc5009) (memq . jc5008) (memp . jc5007) (member . jc5006) (exists . jc5005) (for-all . jc5004) (fold-right . jc5003) (fold-left . jc5002) (find . jc5001) (filter . jc5000) (cons* . jc4fff) (assv . jc4ffe) (assq . jc4ffd) (assp . jc4ffc) (assoc . jc4ffb)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51dd '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . jc5085) (call-with-input-file . jc5084) (write-char . jc5083) (write . jc5082) (with-output-to-file . jc5081) (with-input-from-file . jc5080) (read-char . jc507f) (read . jc507e) (peek-char . jc507d) (open-output-file . jc507c) (open-input-file . jc507b) (newline . jc507a) (display . jc5079) (close-output-port . jc5078) (close-input-port . jc5077) (eof-object? . jc5076) (eof-object . jc5075) (current-error-port . jc5074) (current-output-port . jc5073) (current-input-port . jc5072) (output-port? . jc5071) (input-port? . jc5070) (make-i/o-write-error . jc504c) (make-i/o-read-error . jc504b) (make-i/o-port-error . jc504a) (make-i/o-invalid-position-error . jc5049) (make-i/o-filename-error . jc5048) (make-i/o-file-protection-error . jc5047) (make-i/o-file-is-read-only-error . jc5046) (make-i/o-file-does-not-exist-error . jc5045) (make-i/o-file-already-exists-error . jc5044) (make-i/o-error . jc5043) (i/o-write-error? . jc5037) (i/o-read-error? . jc5036) (i/o-port-error? . jc5035) (i/o-invalid-position-error? . jc5034) (i/o-filename-error? . jc5033) (i/o-file-protection-error? . jc5032) (i/o-file-is-read-only-error? . jc5031) (i/o-file-does-not-exist-error? . jc5030) (i/o-file-already-exists-error? . jc502f) (i/o-error? . jc502e) (i/o-error-position . jc502d) (i/o-error-port . jc502c) (i/o-error-filename . jc502b) (&i/o-port . jc4e6e) (&i/o-file-does-not-exist . jc4e6d) (&i/o-file-already-exists . jc4e6c) (&i/o-file-is-read-only . jc4e6b) (&i/o-file-protection . jc4e6a) (&i/o-filename . jc4e69) (&i/o-invalid-position . jc4e68) (&i/o-write . jc4e67) (&i/o-read . jc4e66) (&i/o . jc4e65)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51de '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . jc503a) (utf32->string . jc4fc0) (utf16->string . jc4fbf) (utf8->string . jc4fbe) (uint-list->bytevector . jc4fbd) (u8-list->bytevector . jc4fbc) (string->utf8 . jc4fbb) (string->utf32 . jc4fba) (string->utf16 . jc4fb9) (sint-list->bytevector . jc4fb8) (native-endianness . jc4fb7) (bytevector? . jc4fb6) (bytevector=? . jc4fb5) (bytevector-uint-set! . jc4fb4) (bytevector-uint-ref . jc4fb3) (bytevector-u8-set! . jc4fb2) (bytevector-u8-ref . jc4fb1) (bytevector-u64-set! . jc4fb0) (bytevector-u64-ref . jc4faf) (bytevector-u64-native-set! . jc4fae) (bytevector-u64-native-ref . jc4fad) (bytevector-u32-set! . jc4fac) (bytevector-u32-ref . jc4fab) (bytevector-u32-native-set! . jc4faa) (bytevector-u32-native-ref . jc4fa9) (bytevector-u16-set! . jc4fa8) (bytevector-u16-ref . jc4fa7) (bytevector-u16-native-set! . jc4fa6) (bytevector-u16-native-ref . jc4fa5) (bytevector-sint-set! . jc4fa4) (bytevector-sint-ref . jc4fa3) (bytevector-s8-set! . jc4fa2) (bytevector-s8-ref . jc4fa1) (bytevector-s64-set! . jc4fa0) (bytevector-s64-ref . jc4f9f) (bytevector-s64-native-set! . jc4f9e) (bytevector-s64-native-ref . jc4f9d) (bytevector-s32-set! . jc4f9c) (bytevector-s32-ref . jc4f9b) (bytevector-s32-native-set! . jc4f9a) (bytevector-s32-native-ref . jc4f99) (bytevector-s16-set! . jc4f98) (bytevector-s16-ref . jc4f97) (bytevector-s16-native-set! . jc4f96) (bytevector-s16-native-ref . jc4f95) (bytevector-length . jc4f94) (bytevector-ieee-single-ref . jc4f93) (bytevector-ieee-single-set! . jc4f92) (bytevector-ieee-single-native-set! . jc4f91) (bytevector-ieee-single-native-ref . jc4f90) (bytevector-ieee-double-set! . jc4f8f) (bytevector-ieee-double-ref . jc4f8e) (bytevector-ieee-double-native-set! . jc4f8d) (bytevector-ieee-double-native-ref . jc4f8c) (bytevector-fill! . jc4f8b) (bytevector-copy! . jc4f8a) (bytevector-copy . jc4f89) (bytevector->uint-list . jc4f88) (bytevector->u8-list . jc4f87) (bytevector->sint-list . jc4f86) (endianness . jc4e3a)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51df '(rnrs unicode) '(6) '() '() '() '((string-upcase . jc50cd) (string-titlecase . jc50cc) (string-normalize-nfkd . jc50cb) (string-normalize-nfkc . jc50ca) (string-normalize-nfd . jc50c9) (string-normalize-nfc . jc50c8) (string-foldcase . jc50c7) (string-downcase . jc50c6) (string-ci>? . jc50c5) (string-ci>=? . jc50c4) (string-ci=? . jc50c3) (string-ci<? . jc50c2) (string-ci<=? . jc50c1) (char-whitespace? . jc50c0) (char-upper-case? . jc50bf) (char-title-case? . jc50be) (char-numeric? . jc50bd) (char-lower-case? . jc50bc) (char-general-category . jc50bb) (char-upcase . jc50ba) (char-titlecase . jc50b9) (char-foldcase . jc50b8) (char-downcase . jc50b7) (char-ci>? . jc50b6) (char-ci>=? . jc50b5) (char-ci=? . jc50b4) (char-ci<? . jc50b3) (char-ci<=? . jc50b2) (char-alphabetic? . jc50b1)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51e0 '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . jc4ff4) (raise-continuable . jc4ff3) (raise . jc4ff2) (guard . jc4e46) (else . jc4e3e) (=> . jc4e3d)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51e1 '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . jc4f26) (bitwise-reverse-bit-field . jc4f25) (bitwise-length . jc4f24) (bitwise-if . jc4f23) (bitwise-first-bit-set . jc4f22) (bitwise-copy-bit-field . jc4f21) (bitwise-copy-bit . jc4f20) (bitwise-bit-set? . jc4f1f) (bitwise-bit-field . jc4f1e) (bitwise-bit-count . jc4f1d) (bitwise-xor . jc4f1c) (bitwise-ior . jc4f1b) (bitwise-and . jc4f1a) (bitwise-not . jc4f19) (bitwise-arithmetic-shift-right . jc4f18) (bitwise-arithmetic-shift-left . jc4f17) (bitwise-arithmetic-shift . jc4f16)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51e2 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . jc4f53) (fxxor . jc4f52) (fxrotate-bit-field . jc4f51) (fxreverse-bit-field . jc4f50) (fxpositive? . jc4f4f) (fxodd? . jc4f4e) (fxnot . jc4f4d) (fxnegative? . jc4f4c) (fxmod0 . jc4f4b) (fxmod . jc4f4a) (fxmin . jc4f49) (fxmax . jc4f48) (fxlength . jc4f47) (fxior . jc4f46) (fxif . jc4f45) (fxfirst-bit-set . jc4f44) (fxeven? . jc4f43) (fxdiv0-and-mod0 . jc4f42) (fxdiv0 . jc4f41) (fxdiv-and-mod . jc4f40) (fxdiv . jc4f3f) (fxcopy-bit-field . jc4f3e) (fxcopy-bit . jc4f3d) (fxbit-set? . jc4f3c) (fxbit-field . jc4f3b) (fxbit-count . jc4f3a) (fxarithmetic-shift-right . jc4f39) (fxarithmetic-shift-left . jc4f38) (fxarithmetic-shift . jc4f37) (fxand . jc4f36) (fx>? . jc4f35) (fx>=? . jc4f34) (fx=? . jc4f33) (fx<? . jc4f32) (fx<=? . jc4f31) (fx-/carry . jc4f30) (fx- . jc4f2f) (fx+/carry . jc4f2e) (fx+ . jc4f2d) (fx*/carry . jc4f2c) (fx* . jc4f2b) (greatest-fixnum . jc4f2a) (least-fixnum . jc4f29) (fixnum-width . jc4f28) (fixnum? . jc4f27)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51e3 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . jc4f85) (no-infinities-violation? . jc4f84) (make-no-nans-violation . jc4f83) (make-no-infinities-violation . jc4f82) (real->flonum . jc4f81) (flzero? . jc4f80) (fltruncate . jc4f7f) (fltan . jc4f7e) (flsqrt . jc4f7d) (flsin . jc4f7c) (flround . jc4f7b) (flpositive? . jc4f7a) (flonum? . jc4f79) (flodd? . jc4f78) (flnumerator . jc4f77) (flnegative? . jc4f76) (flnan? . jc4f75) (flmod0 . jc4f74) (flmod . jc4f73) (flmin . jc4f72) (flmax . jc4f71) (fllog . jc4f70) (flinteger? . jc4f6f) (flinfinite? . jc4f6e) (flfloor . jc4f6d) (flfinite? . jc4f6c) (flexpt . jc4f6b) (flexp . jc4f6a) (fleven? . jc4f69) (fldiv0-and-mod0 . jc4f68) (fldiv0 . jc4f67) (fldiv-and-mod . jc4f66) (fldiv . jc4f65) (fldenominator . jc4f64) (flcos . jc4f63) (flceiling . jc4f62) (flatan . jc4f61) (flasin . jc4f60) (flacos . jc4f5f) (flabs . jc4f5e) (fl>? . jc4f5d) (fl>=? . jc4f5c) (fl=? . jc4f5b) (fl<? . jc4f5a) (fl<=? . jc4f59) (fl/ . jc4f58) (fl- . jc4f57) (fl+ . jc4f56) (fl* . jc4f55) (fixnum->flonum . jc4f54) (&no-nans . jc4e72) (&no-infinities . jc4e71)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51e4 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . jc509a) (string-ci-hash . jc5099) (string-hash . jc5098) (equal-hash . jc5097) (hashtable-equivalence-function . jc5096) (make-hashtable . jc5095) (hashtable-hash-function . jc5094) (make-eqv-hashtable . jc5093) (make-eq-hashtable . jc5092) (hashtable? . jc5091) (hashtable-update! . jc5090) (hashtable-size . jc508f) (hashtable-set! . jc508e) (hashtable-ref . jc508d) (hashtable-mutable? . jc508c) (hashtable-keys . jc508b) (hashtable-entries . jc508a) (hashtable-delete! . jc5089) (hashtable-copy . jc5088) (hashtable-contains? . jc5087) (hashtable-clear! . jc5086)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51e5 '(rnrs io ports) '(6) '() '() '() '((eof-object? . jc5076) (eof-object . jc5075) (current-error-port . jc5074) (current-output-port . jc5073) (current-input-port . jc5072) (output-port? . jc5071) (input-port? . jc5070) (utf-8-codec . jc506f) (utf-16-codec . jc506e) (transcoder-error-handling-mode . jc506d) (transcoder-eol-style . jc506c) (transcoder-codec . jc506b) (transcoded-port . jc506a) (textual-port? . jc5069) (string->bytevector . jc5068) (standard-output-port . jc5067) (standard-input-port . jc5066) (standard-error-port . jc5065) (set-port-position! . jc5064) (put-u8 . jc5063) (put-string . jc5062) (put-datum . jc5061) (put-char . jc5060) (put-bytevector . jc505f) (port? . jc505e) (port-transcoder . jc505d) (port-position . jc505c) (port-has-set-port-position!? . jc505b) (port-has-port-position? . jc505a) (port-eof? . jc5059) (output-port-buffer-mode . jc5058) (open-string-output-port . jc5057) (open-string-input-port . jc5056) (open-file-output-port . jc5055) (open-file-input/output-port . jc5054) (open-file-input-port . jc5053) (open-bytevector-output-port . jc5052) (open-bytevector-input-port . jc5051) (native-transcoder . jc5050) (native-eol-style . jc504f) (make-transcoder . jc504e) (latin-1-codec . jc504d) (make-i/o-write-error . jc504c) (make-i/o-read-error . jc504b) (make-i/o-port-error . jc504a) (make-i/o-invalid-position-error . jc5049) (make-i/o-filename-error . jc5048) (make-i/o-file-protection-error . jc5047) (make-i/o-file-is-read-only-error . jc5046) (make-i/o-file-does-not-exist-error . jc5045) (make-i/o-file-already-exists-error . jc5044) (make-i/o-error . jc5043) (make-i/o-encoding-error . jc5042) (make-i/o-decoding-error . jc5041) (make-custom-textual-output-port . jc5040) (make-custom-textual-input/output-port . jc503f) (make-custom-textual-input-port . jc503e) (make-custom-binary-output-port . jc503d) (make-custom-binary-input/output-port . jc503c) (make-custom-binary-input-port . jc503b) (lookahead-u8 . jc5039) (lookahead-char . jc5038) (i/o-write-error? . jc5037) (i/o-read-error? . jc5036) (i/o-port-error? . jc5035) (i/o-invalid-position-error? . jc5034) (i/o-filename-error? . jc5033) (i/o-file-protection-error? . jc5032) (i/o-file-is-read-only-error? . jc5031) (i/o-file-does-not-exist-error? . jc5030) (i/o-file-already-exists-error? . jc502f) (i/o-error? . jc502e) (i/o-error-position . jc502d) (i/o-error-port . jc502c) (i/o-error-filename . jc502b) (i/o-encoding-error? . jc502a) (i/o-encoding-error-char . jc5029) (i/o-decoding-error? . jc5028) (get-u8 . jc5027) (get-string-n! . jc5026) (get-string-n . jc5025) (get-string-all . jc5024) (get-line . jc5023) (get-datum . jc5022) (get-char . jc5021) (get-bytevector-some . jc5020) (get-bytevector-n! . jc501f) (get-bytevector-n . jc501e) (get-bytevector-all . jc501d) (flush-output-port . jc501c) (close-port . jc501b) (call-with-string-output-port . jc4ffa) (call-with-port . jc4ff9) (call-with-bytevector-output-port . jc4ff8) (bytevector->string . jc4ff7) (buffer-mode? . jc4ff6) (binary-port? . jc4ff5) (&i/o-encoding . jc4e70) (&i/o-decoding . jc4e6f) (&i/o-port . jc4e6e) (&i/o-file-does-not-exist . jc4e6d) (&i/o-file-already-exists . jc4e6c) (&i/o-file-is-read-only . jc4e6b) (&i/o-file-protection . jc4e6a) (&i/o-filename . jc4e69) (&i/o-invalid-position . jc4e68) (&i/o-write . jc4e67) (&i/o-read . jc4e66) (&i/o . jc4e65) (error-handling-mode . jc4e4a) (file-options . jc4e49) (buffer-mode . jc4e48) (eol-style . jc4e47)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51e6 '(rnrs enums) '(6) '() '() '() '((make-enumeration . jc4ff1) (enum-set=? . jc4ff0) (enum-set-universe . jc4fef) (enum-set-union . jc4fee) (enum-set-subset? . jc4fed) (enum-set-projection . jc4fec) (enum-set-member? . jc4feb) (enum-set-intersection . jc4fea) (enum-set-indexer . jc4fe9) (enum-set-difference . jc4fe8) (enum-set-constructor . jc4fe7) (enum-set-complement . jc4fe6) (enum-set->list . jc4fe5) (define-enumeration . jc4e55)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51e7 '(rnrs conditions) '(6) '() '() '() '((who-condition? . jc4fe4) (warning? . jc4fe3) (violation? . jc4fe2) (undefined-violation? . jc4fe1) (syntax-violation? . jc4fe0) (syntax-violation-subform . jc4fdf) (syntax-violation-form . jc4fde) (syntax-violation . jc31ec) (simple-conditions . jc4fdd) (serious-condition? . jc4fdc) (non-continuable-violation? . jc4fdb) (message-condition? . jc4fda) (make-who-condition . jc4fd9) (make-warning . jc4fd8) (make-violation . jc4fd7) (make-undefined-violation . jc4fd6) (make-syntax-violation . jc4fd5) (make-serious-condition . jc4fd4) (make-non-continuable-violation . jc4fd3) (make-message-condition . jc4fd2) (make-lexical-violation . jc4fd1) (make-irritants-condition . jc4fd0) (make-implementation-restriction-violation . jc4fcf) (make-error . jc4fce) (make-assertion-violation . jc4fcd) (lexical-violation? . jc4fcc) (irritants-condition? . jc4fcb) (implementation-restriction-violation? . jc4fca) (error? . jc4fc9) (condition-who . jc4fc8) (condition-predicate . jc4fc7) (condition-message . jc4fc6) (condition-irritants . jc4fc5) (condition-accessor . jc4fc4) (condition . jc4fc3) (assertion-violation? . jc4fc2) (condition? . jc4fc1) (&undefined . jc4e64) (&syntax . jc4e63) (&lexical . jc4e62) (&implementation-restriction . jc4e61) (&non-continuable . jc4e60) (&who . jc4e5f) (&irritants . jc4e5e) (&assertion . jc4e5d) (&violation . jc4e5c) (&error . jc4e5b) (&serious . jc4e5a) (&warning . jc4e59) (&message . jc4e58) (&condition . jc4e57) (define-condition-type . jc4e56)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51e8 '(rnrs records inspection) '(6) '() '() '() '((record? . jc50a9) (record-type-uid . jc50a8) (record-type-sealed? . jc50a7) (record-type-parent . jc50a6) (record-type-opaque? . jc50a5) (record-type-name . jc50a4) (record-type-generative? . jc50a3) (record-type-field-names . jc50a2) (record-rtd . jc50a1) (record-field-mutable? . jc50a0)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51e9 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . jc50b0) (record-predicate . jc50af) (record-mutator . jc50ae) (record-constructor . jc50ad) (record-accessor . jc50ac) (make-record-type-descriptor . jc50ab) (make-record-constructor-descriptor . jc50aa)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51ea '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . jc4e54) (parent-rtd . jc4e53) (nongenerative . jc4e52) (opaque . jc4e51) (sealed . jc4e50) (protocol . jc4e4f) (parent . jc4e4e) (immutable . jc4e4d) (mutable . jc4e4c) (fields . jc4e4b) (record-constructor-descriptor . jc4e2b) (record-type-descriptor . jc4e2a)) '() values values '#f '#f '#t '#f) (jc2d20@jc2b6c@install-library 'jc51eb '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . jc51cb) (&no-nans-rtd . jc51ca) (&no-infinities-rcd . jc51c9) (&no-infinities-rtd . jc51c8) (&i/o-encoding-rcd . jc51c7) (&i/o-encoding-rtd . jc51c6) (&i/o-decoding-rcd . jc51c5) (&i/o-decoding-rtd . jc51c4) (&i/o-port-rcd . jc51c3) (&i/o-port-rtd . jc51c2) (&i/o-file-does-not-exist-rcd . jc51c1) (&i/o-file-does-not-exist-rtd . jc51c0) (&i/o-file-already-exists-rcd . jc51bf) (&i/o-file-already-exists-rtd . jc51be) (&i/o-file-is-read-only-rcd . jc51bd) (&i/o-file-is-read-only-rtd . jc51bc) (&i/o-file-protection-rcd . jc51bb) (&i/o-file-protection-rtd . jc51ba) (&i/o-filename-rcd . jc51b9) (&i/o-filename-rtd . jc51b8) (&i/o-invalid-position-rcd . jc51b7) (&i/o-invalid-position-rtd . jc51b6) (&i/o-write-rcd . jc51b5) (&i/o-write-rtd . jc51b4) (&i/o-read-rcd . jc51b3) (&i/o-read-rtd . jc51b2) (&i/o-rcd . jc51b1) (&i/o-rtd . jc51b0) (&undefined-rcd . jc51af) (&undefined-rtd . jc51ae) (&syntax-rcd . jc51ad) (&syntax-rtd . jc51ac) (&lexical-rcd . jc51ab) (&lexical-rtd . jc51aa) (&implementation-restriction-rcd . jc51a9) (&implementation-restriction-rtd . jc51a8) (&non-continuable-rcd . jc51a7) (&non-continuable-rtd . jc51a6) (&who-rcd . jc51a5) (&who-rtd . jc51a4) (&irritants-rcd . jc51a3) (&irritants-rtd . jc51a2) (&assertion-rcd . jc51a1) (&assertion-rtd . jc51a0) (&violation-rcd . jc519f) (&violation-rtd . jc519e) (&error-rcd . jc519d) (&error-rtd . jc519c) (&serious-rcd . jc519b) (&serious-rtd . jc519a) (&warning-rcd . jc5199) (&warning-rtd . jc5198) (&message-rcd . jc5197) (&message-rtd . jc5196) (&condition-rcd . jc5195) (&condition-rtd . jc5194) (syntax-error . jc31e8) (syntax-dispatch . jc310c) (pretty-print . jc5193) (eval-core . jc5192) (set-symbol-value! . jc5191) (symbol-value . jc5190) (gensym . jc518f) (void . jc518e) (load . jc4cab) (interaction-environment . jc31fa) (char-ready? . jc518d) (regexp? . jc518c) (read-line . jc518b) (gensym-prefix-set! . jc518a) (ungensym . jc5189) (alist->eq-hash-table . jc5188) (assoc-ref . jc5187) (print . jc5186) (format . jc5185) (host-os . jc5184) (library-path . jc2b4b) (standard-library-path . jc5183) (ssl-supported? . jc5182) (ssl-socket? . jc5181) (socket-sslize! . jc5180) (%monapi-stream-read . jc517f) (%monapi-stream-write . jc517e) (%monapi-stream-handle . jc517d) (%monapi-make-stream . jc517c) (%monapi-name-add! . jc517b) (%monapi-message-receive . jc517a) (%monapi-name-whereis . jc5179) (%monapi-message-reply . jc5178) (%monapi-message-send-receive . jc5177) (%monapi-message-send . jc5176) (process-terminate! . jc5175) (process-list . jc5174) (file-newer? . jc5173) (stat-mtime . jc5172) (write-to-file . jc5171) (file->list . jc5170) (file->string . jc516f) (digit->integer . jc516e) (call-with-string-input-port . jc516d) (call-with-string-io . jc516c) (string-split . jc516b) (bytevector-for-each . jc516a) (string->regexp . jc5169) (rxmatch . jc5168) (regexp-replace-all . jc5167) (hashtable-fold-left . jc5166) (hashtable-for-each . jc5165) (mosh-cache-dir . jc2935) (%start-process . jc5164) (%call-process . jc5163) (local-tz-offset . jc5162) (microseconds . jc5161) (directory-list . jc5160) (set-current-directory! . jc515f) (expand-path . jc515e) (current-directory . jc515d) (%getpid . jc515c) (%waitpid . jc515b) (simple-struct-name . jc515a) (simple-struct-set! . jc5159) (simple-struct-ref . jc5158) (make-simple-struct . jc5157) (simple-struct? . jc5156) (pointer-ref-c-int64 . jc5155) (pointer-ref-c-int32 . jc5154) (pointer-ref-c-int16 . jc5153) (pointer-ref-c-int8 . jc5152) (pointer-ref-c-uint64 . jc5151) (pointer-ref-c-uint32 . jc5150) (pointer-ref-c-uint16 . jc514f) (pointer-ref-c-uint8 . jc514e) (pointer-set-c-uint64! . jc514d) (pointer-set-c-uint32! . jc514c) (pointer-set-c-uint16! . jc514b) (pointer-set-c-uint8! . jc514a) (pointer-set-c-int64! . jc5149) (pointer-set-c-int32! . jc5148) (pointer-set-c-int16! . jc5147) (pointer-set-c-int8! . jc5146) (pointer-set-c-pointer! . jc5145) (pointer-set-c-double! . jc5144) (pointer-set-c-float! . jc5143) (pointer-set-c-long-long! . jc5142) (pointer-set-c-long! . jc5141) (pointer-set-c-int! . jc5140) (pointer-set-c-short! . jc513f) (pointer-set-c-char! . jc513e) (pointer-ref-c-pointer . jc513d) (pointer-ref-c-double . jc513c) (pointer-ref-c-float . jc513b) (pointer-ref-c-unsigned-long-long . jc513a) (pointer-ref-c-signed-long-long . jc5139) (pointer-ref-c-unsigned-long . jc5138) (pointer-ref-c-signed-long . jc5137) (pointer-ref-c-unsigned-int . jc5136) (pointer-ref-c-signed-int . jc5135) (pointer-ref-c-unsigned-short . jc5134) (pointer-ref-c-signed-short . jc5133) (pointer-ref-c-unsigned-char . jc5132) (pointer-ref-c-signed-char . jc5131) (pointer->integer . jc5130) (integer->pointer . jc512f) (pointer? . jc512e) (shared-errno . jc512d) (%ffi-error . jc512c) (%ffi-close . jc512b) (%ffi-free-c-callback-trampoline . jc512a) (%ffi-make-c-callback-trampoline . jc5129) (%ffi-free . jc5128) (%ffi-malloc . jc5127) (%ffi-supported? . jc5126) (%ffi-pointer->string . jc5125) (%ffi-call . jc5124) (%ffi-lookup . jc5123) (%ffi-open . jc5122) (null-terminated-utf8->string . jc5121) (null-terminated-bytevector->string . jc5120) (%exec . jc511f) (%fork . jc511e) (%pipe . jc511d) (%confstr . jc511c) (%dup . jc511b) (p . jc511a) (open-output-string . jc5119) (get-output-string . jc5118) (file-stat-ctime . jc5117) (file-stat-atime . jc5116) (file-stat-mtime . jc5115) (file-size-in-bytes . jc5114) (file-writable? . jc5113) (file-executable? . jc5112) (file-readable? . jc5111) (file-regular? . jc5110) (file-symbolic-link? . jc510f) (file-directory? . jc510e) (create-symbolic-link . jc510d) (rename-file . jc510c) (delete-directory . jc510b) (create-directory . jc510a) (create-mosh-cache-dir . jc5109) (get-environment-variables . jc5108) (current-exception-handler . jc5107) (get-environment-variable . jc5106) (join-wraps . jc5105) (id->real-label . jc5104) (same-marks? . jc5103) (same-marks*? . jc5102) (get-timeofday . jc5101) (get-command-line . jc5100) (sys-display . jc50ff) (whereis . jc50fe) (register . jc50fd) (vm-join! . jc50fc) (vm-set-value! . jc50fb) (vm? . jc50fa) (main-vm? . jc50f9) (vm-eval . jc50f8) (vm-self . jc50f7) (vm-start! . jc50f6) (make-vm . jc50f5) (mutex-try-lock! . jc50f4) (mutex-unlock! . jc50f3) (mutex-lock! . jc50f2) (mutex? . jc50f1) (make-mutex . jc50f0) (condition-variable-notify-all! . jc50ef) (condition-variable-notify! . jc50ee) (condition-variable-wait! . jc50ed) (make-condition-variable . jc50ec) (write/ss . jc50eb) (mosh-executable-name . jc50ea) (mosh-executable-path . jc50e9) (make-file-options . jc50e8) (source-info . jc50e7) (make-compiler-instruction . jc50e6) (make-instruction . jc50e5) (set-annotation! . jc50e4) (get-annotation . jc50e3) (annotated-pair? . jc50e2) (annotated-cons . jc50e1) (set-source-info! . jc50e0) (bignum? . jc50df) (fast-equal? . jc50de) (fasl-read . jc50dd) (fasl-write . jc50dc) (time-usage . jc50db) (os-constant . jc50da) (condition-printer . jc50d9) (disasm . jc50d8) (make-parameter . jc2933) (socket-port . jc50d7) (socket-shutdown . jc50d6) (socket-close . jc50d5) (socket-send . jc50d4) (socket-recv! . jc50d3) (socket-recv . jc50d2) (make-server-socket . jc50d1) (make-client-socket . jc50d0) (socket-accept . jc50cf) (socket? . jc50ce) (string-upcase . jc50cd) (string-titlecase . jc50cc) (string-normalize-nfkd . jc50cb) (string-normalize-nfkc . jc50ca) (string-normalize-nfd . jc50c9) (string-normalize-nfc . jc50c8) (string-foldcase . jc50c7) (string-downcase . jc50c6) (string-ci>? . jc50c5) (string-ci>=? . jc50c4) (string-ci=? . jc50c3) (string-ci<? . jc50c2) (string-ci<=? . jc50c1) (char-whitespace? . jc50c0) (char-upper-case? . jc50bf) (char-title-case? . jc50be) (char-numeric? . jc50bd) (char-lower-case? . jc50bc) (char-general-category . jc50bb) (char-upcase . jc50ba) (char-titlecase . jc50b9) (char-foldcase . jc50b8) (char-downcase . jc50b7) (char-ci>? . jc50b6) (char-ci>=? . jc50b5) (char-ci=? . jc50b4) (char-ci<? . jc50b3) (char-ci<=? . jc50b2) (char-alphabetic? . jc50b1) (make-variable-transformer . jc2f37) (identifier? . jc31ee) (generate-temporaries . jc31da) (free-identifier=? . jc31dc) (syntax->datum . jc31f2) (datum->syntax . jc31f0) (bound-identifier=? . jc31de) (record-type-descriptor? . jc50b0) (record-predicate . jc50af) (record-mutator . jc50ae) (record-constructor . jc50ad) (record-accessor . jc50ac) (make-record-type-descriptor . jc50ab) (make-record-constructor-descriptor . jc50aa) (record? . jc50a9) (record-type-uid . jc50a8) (record-type-sealed? . jc50a7) (record-type-parent . jc50a6) (record-type-opaque? . jc50a5) (record-type-name . jc50a4) (record-type-generative? . jc50a3) (record-type-field-names . jc50a2) (record-rtd . jc50a1) (record-field-mutable? . jc50a0) (delete-file . jc509f) (file-exists? . jc509e) (vector-sort! . jc509d) (vector-sort . jc509c) (list-sort . jc509b) (symbol-hash . jc509a) (string-ci-hash . jc5099) (string-hash . jc5098) (equal-hash . jc5097) (hashtable-equivalence-function . jc5096) (make-hashtable . jc5095) (hashtable-hash-function . jc5094) (make-eqv-hashtable . jc5093) (make-eq-hashtable . jc5092) (hashtable? . jc5091) (hashtable-update! . jc5090) (hashtable-size . jc508f) (hashtable-set! . jc508e) (hashtable-ref . jc508d) (hashtable-mutable? . jc508c) (hashtable-keys . jc508b) (hashtable-entries . jc508a) (hashtable-delete! . jc5089) (hashtable-copy . jc5088) (hashtable-contains? . jc5087) (hashtable-clear! . jc5086) (call-with-output-file . jc5085) (call-with-input-file . jc5084) (write-char . jc5083) (write . jc5082) (with-output-to-file . jc5081) (with-input-from-file . jc5080) (read-char . jc507f) (read . jc507e) (peek-char . jc507d) (open-output-file . jc507c) (open-input-file . jc507b) (newline . jc507a) (display . jc5079) (close-output-port . jc5078) (close-input-port . jc5077) (eof-object? . jc5076) (eof-object . jc5075) (current-error-port . jc5074) (current-output-port . jc5073) (current-input-port . jc5072) (output-port? . jc5071) (input-port? . jc5070) (utf-8-codec . jc506f) (utf-16-codec . jc506e) (transcoder-error-handling-mode . jc506d) (transcoder-eol-style . jc506c) (transcoder-codec . jc506b) (transcoded-port . jc506a) (textual-port? . jc5069) (string->bytevector . jc5068) (standard-output-port . jc5067) (standard-input-port . jc5066) (standard-error-port . jc5065) (set-port-position! . jc5064) (put-u8 . jc5063) (put-string . jc5062) (put-datum . jc5061) (put-char . jc5060) (put-bytevector . jc505f) (port? . jc505e) (port-transcoder . jc505d) (port-position . jc505c) (port-has-set-port-position!? . jc505b) (port-has-port-position? . jc505a) (port-eof? . jc5059) (output-port-buffer-mode . jc5058) (open-string-output-port . jc5057) (open-string-input-port . jc5056) (open-file-output-port . jc5055) (open-file-input/output-port . jc5054) (open-file-input-port . jc5053) (open-bytevector-output-port . jc5052) (open-bytevector-input-port . jc5051) (native-transcoder . jc5050) (native-eol-style . jc504f) (make-transcoder . jc504e) (latin-1-codec . jc504d) (make-i/o-write-error . jc504c) (make-i/o-read-error . jc504b) (make-i/o-port-error . jc504a) (make-i/o-invalid-position-error . jc5049) (make-i/o-filename-error . jc5048) (make-i/o-file-protection-error . jc5047) (make-i/o-file-is-read-only-error . jc5046) (make-i/o-file-does-not-exist-error . jc5045) (make-i/o-file-already-exists-error . jc5044) (make-i/o-error . jc5043) (make-i/o-encoding-error . jc5042) (make-i/o-decoding-error . jc5041) (make-custom-textual-output-port . jc5040) (make-custom-textual-input/output-port . jc503f) (make-custom-textual-input-port . jc503e) (make-custom-binary-output-port . jc503d) (make-custom-binary-input/output-port . jc503c) (make-custom-binary-input-port . jc503b) (make-bytevector . jc503a) (lookahead-u8 . jc5039) (lookahead-char . jc5038) (i/o-write-error? . jc5037) (i/o-read-error? . jc5036) (i/o-port-error? . jc5035) (i/o-invalid-position-error? . jc5034) (i/o-filename-error? . jc5033) (i/o-file-protection-error? . jc5032) (i/o-file-is-read-only-error? . jc5031) (i/o-file-does-not-exist-error? . jc5030) (i/o-file-already-exists-error? . jc502f) (i/o-error? . jc502e) (i/o-error-position . jc502d) (i/o-error-port . jc502c) (i/o-error-filename . jc502b) (i/o-encoding-error? . jc502a) (i/o-encoding-error-char . jc5029) (i/o-decoding-error? . jc5028) (get-u8 . jc5027) (get-string-n! . jc5026) (get-string-n . jc5025) (get-string-all . jc5024) (get-line . jc5023) (get-datum . jc5022) (get-char . jc5021) (get-bytevector-some . jc5020) (get-bytevector-n! . jc501f) (get-bytevector-n . jc501e) (get-bytevector-all . jc501d) (flush-output-port . jc501c) (close-port . jc501b) (scheme-report-environment . jc31c8) (quotient . jc501a) (null-environment . jc31c6) (remainder . jc5019) (modulo . jc5018) (inexact->exact . jc5017) (force . jc5016) (exact->inexact . jc5015) (make-promise . jc5014) (exit . jc5013) (command-line . jc4ca5) (string-fill! . jc5012) (string-set! . jc5011) (set-cdr! . jc5010) (set-car! . jc500f) (remove . jc500e) (remv . jc500d) (remp . jc500c) (remq . jc500b) (partition . jc500a) (memv . jc5009) (memq . jc5008) (memp . jc5007) (member . jc5006) (exists . jc5005) (for-all . jc5004) (fold-right . jc5003) (fold-left . jc5002) (find . jc5001) (filter . jc5000) (cons* . jc4fff) (assv . jc4ffe) (assq . jc4ffd) (assp . jc4ffc) (assoc . jc4ffb) (call-with-string-output-port . jc4ffa) (call-with-port . jc4ff9) (call-with-bytevector-output-port . jc4ff8) (bytevector->string . jc4ff7) (buffer-mode? . jc4ff6) (binary-port? . jc4ff5) (with-exception-handler . jc4ff4) (raise-continuable . jc4ff3) (raise . jc4ff2) (eval . jc31cc) (environment . jc31c4) (make-enumeration . jc4ff1) (enum-set=? . jc4ff0) (enum-set-universe . jc4fef) (enum-set-union . jc4fee) (enum-set-subset? . jc4fed) (enum-set-projection . jc4fec) (enum-set-member? . jc4feb) (enum-set-intersection . jc4fea) (enum-set-indexer . jc4fe9) (enum-set-difference . jc4fe8) (enum-set-constructor . jc4fe7) (enum-set-complement . jc4fe6) (enum-set->list . jc4fe5) (who-condition? . jc4fe4) (warning? . jc4fe3) (violation? . jc4fe2) (undefined-violation? . jc4fe1) (syntax-violation? . jc4fe0) (syntax-violation-subform . jc4fdf) (syntax-violation-form . jc4fde) (syntax-violation . jc31ec) (simple-conditions . jc4fdd) (serious-condition? . jc4fdc) (non-continuable-violation? . jc4fdb) (message-condition? . jc4fda) (make-who-condition . jc4fd9) (make-warning . jc4fd8) (make-violation . jc4fd7) (make-undefined-violation . jc4fd6) (make-syntax-violation . jc4fd5) (make-serious-condition . jc4fd4) (make-non-continuable-violation . jc4fd3) (make-message-condition . jc4fd2) (make-lexical-violation . jc4fd1) (make-irritants-condition . jc4fd0) (make-implementation-restriction-violation . jc4fcf) (make-error . jc4fce) (make-assertion-violation . jc4fcd) (lexical-violation? . jc4fcc) (irritants-condition? . jc4fcb) (implementation-restriction-violation? . jc4fca) (error? . jc4fc9) (condition-who . jc4fc8) (condition-predicate . jc4fc7) (condition-message . jc4fc6) (condition-irritants . jc4fc5) (condition-accessor . jc4fc4) (condition . jc4fc3) (assertion-violation? . jc4fc2) (condition? . jc4fc1) (utf32->string . jc4fc0) (utf16->string . jc4fbf) (utf8->string . jc4fbe) (uint-list->bytevector . jc4fbd) (u8-list->bytevector . jc4fbc) (string->utf8 . jc4fbb) (string->utf32 . jc4fba) (string->utf16 . jc4fb9) (sint-list->bytevector . jc4fb8) (native-endianness . jc4fb7) (bytevector? . jc4fb6) (bytevector=? . jc4fb5) (bytevector-uint-set! . jc4fb4) (bytevector-uint-ref . jc4fb3) (bytevector-u8-set! . jc4fb2) (bytevector-u8-ref . jc4fb1) (bytevector-u64-set! . jc4fb0) (bytevector-u64-ref . jc4faf) (bytevector-u64-native-set! . jc4fae) (bytevector-u64-native-ref . jc4fad) (bytevector-u32-set! . jc4fac) (bytevector-u32-ref . jc4fab) (bytevector-u32-native-set! . jc4faa) (bytevector-u32-native-ref . jc4fa9) (bytevector-u16-set! . jc4fa8) (bytevector-u16-ref . jc4fa7) (bytevector-u16-native-set! . jc4fa6) (bytevector-u16-native-ref . jc4fa5) (bytevector-sint-set! . jc4fa4) (bytevector-sint-ref . jc4fa3) (bytevector-s8-set! . jc4fa2) (bytevector-s8-ref . jc4fa1) (bytevector-s64-set! . jc4fa0) (bytevector-s64-ref . jc4f9f) (bytevector-s64-native-set! . jc4f9e) (bytevector-s64-native-ref . jc4f9d) (bytevector-s32-set! . jc4f9c) (bytevector-s32-ref . jc4f9b) (bytevector-s32-native-set! . jc4f9a) (bytevector-s32-native-ref . jc4f99) (bytevector-s16-set! . jc4f98) (bytevector-s16-ref . jc4f97) (bytevector-s16-native-set! . jc4f96) (bytevector-s16-native-ref . jc4f95) (bytevector-length . jc4f94) (bytevector-ieee-single-ref . jc4f93) (bytevector-ieee-single-set! . jc4f92) (bytevector-ieee-single-native-set! . jc4f91) (bytevector-ieee-single-native-ref . jc4f90) (bytevector-ieee-double-set! . jc4f8f) (bytevector-ieee-double-ref . jc4f8e) (bytevector-ieee-double-native-set! . jc4f8d) (bytevector-ieee-double-native-ref . jc4f8c) (bytevector-fill! . jc4f8b) (bytevector-copy! . jc4f8a) (bytevector-copy . jc4f89) (bytevector->uint-list . jc4f88) (bytevector->u8-list . jc4f87) (bytevector->sint-list . jc4f86) (no-nans-violation? . jc4f85) (no-infinities-violation? . jc4f84) (make-no-nans-violation . jc4f83) (make-no-infinities-violation . jc4f82) (real->flonum . jc4f81) (flzero? . jc4f80) (fltruncate . jc4f7f) (fltan . jc4f7e) (flsqrt . jc4f7d) (flsin . jc4f7c) (flround . jc4f7b) (flpositive? . jc4f7a) (flonum? . jc4f79) (flodd? . jc4f78) (flnumerator . jc4f77) (flnegative? . jc4f76) (flnan? . jc4f75) (flmod0 . jc4f74) (flmod . jc4f73) (flmin . jc4f72) (flmax . jc4f71) (fllog . jc4f70) (flinteger? . jc4f6f) (flinfinite? . jc4f6e) (flfloor . jc4f6d) (flfinite? . jc4f6c) (flexpt . jc4f6b) (flexp . jc4f6a) (fleven? . jc4f69) (fldiv0-and-mod0 . jc4f68) (fldiv0 . jc4f67) (fldiv-and-mod . jc4f66) (fldiv . jc4f65) (fldenominator . jc4f64) (flcos . jc4f63) (flceiling . jc4f62) (flatan . jc4f61) (flasin . jc4f60) (flacos . jc4f5f) (flabs . jc4f5e) (fl>? . jc4f5d) (fl>=? . jc4f5c) (fl=? . jc4f5b) (fl<? . jc4f5a) (fl<=? . jc4f59) (fl/ . jc4f58) (fl- . jc4f57) (fl+ . jc4f56) (fl* . jc4f55) (fixnum->flonum . jc4f54) (fxzero? . jc4f53) (fxxor . jc4f52) (fxrotate-bit-field . jc4f51) (fxreverse-bit-field . jc4f50) (fxpositive? . jc4f4f) (fxodd? . jc4f4e) (fxnot . jc4f4d) (fxnegative? . jc4f4c) (fxmod0 . jc4f4b) (fxmod . jc4f4a) (fxmin . jc4f49) (fxmax . jc4f48) (fxlength . jc4f47) (fxior . jc4f46) (fxif . jc4f45) (fxfirst-bit-set . jc4f44) (fxeven? . jc4f43) (fxdiv0-and-mod0 . jc4f42) (fxdiv0 . jc4f41) (fxdiv-and-mod . jc4f40) (fxdiv . jc4f3f) (fxcopy-bit-field . jc4f3e) (fxcopy-bit . jc4f3d) (fxbit-set? . jc4f3c) (fxbit-field . jc4f3b) (fxbit-count . jc4f3a) (fxarithmetic-shift-right . jc4f39) (fxarithmetic-shift-left . jc4f38) (fxarithmetic-shift . jc4f37) (fxand . jc4f36) (fx>? . jc4f35) (fx>=? . jc4f34) (fx=? . jc4f33) (fx<? . jc4f32) (fx<=? . jc4f31) (fx-/carry . jc4f30) (fx- . jc4f2f) (fx+/carry . jc4f2e) (fx+ . jc4f2d) (fx*/carry . jc4f2c) (fx* . jc4f2b) (greatest-fixnum . jc4f2a) (least-fixnum . jc4f29) (fixnum-width . jc4f28) (fixnum? . jc4f27) (bitwise-rotate-bit-field . jc4f26) (bitwise-reverse-bit-field . jc4f25) (bitwise-length . jc4f24) (bitwise-if . jc4f23) (bitwise-first-bit-set . jc4f22) (bitwise-copy-bit-field . jc4f21) (bitwise-copy-bit . jc4f20) (bitwise-bit-set? . jc4f1f) (bitwise-bit-field . jc4f1e) (bitwise-bit-count . jc4f1d) (bitwise-xor . jc4f1c) (bitwise-ior . jc4f1b) (bitwise-and . jc4f1a) (bitwise-not . jc4f19) (bitwise-arithmetic-shift-right . jc4f18) (bitwise-arithmetic-shift-left . jc4f17) (bitwise-arithmetic-shift . jc4f16) (zero? . jc4f15) (vector? . jc4f14) (vector-set! . jc4f13) (vector-ref . jc4f12) (vector-map . jc4f11) (vector-length . jc4f10) (vector-for-each . jc4f0f) (vector-fill! . jc4f0e) (vector->list . jc4f0d) (vector . jc4f0c) (values . jc4f0b) (truncate . jc4f0a) (tan . jc4f09) (symbol? . jc4f08) (symbol=? . jc4f07) (symbol->string . jc4f06) (substring . jc4f05) (string? . jc4f04) (string>? . jc4f03) (string>=? . jc4f02) (string=? . jc4f01) (string<? . jc4f00) (string<=? . jc4eff) (string-ref . jc4efe) (string-length . jc4efd) (string-for-each . jc4efc) (string-copy . jc4efb) (string-append . jc4efa) (string->symbol . jc4ef9) (string->number . jc4ef8) (string->list . jc4ef7) (string . jc4ef6) (sqrt . jc4ef5) (sin . jc4ef4) (round . jc4ef3) (reverse . jc4ef2) (real? . jc4ef1) (real-valued? . jc4ef0) (real-part . jc4eef) (rationalize . jc4eee) (rational? . jc4eed) (rational-valued? . jc4eec) (procedure? . jc4eeb) (positive? . jc4eea) (pair? . jc4ee9) (odd? . jc4ee8) (numerator . jc4ee7) (number? . jc4ee6) (number->string . jc4ee5) (null? . jc4ee4) (not . jc4ee3) (negative? . jc4ee2) (nan? . jc4ee1) (min . jc4ee0) (max . jc4edf) (map . jc4ede) (make-vector . jc4edd) (make-string . jc4edc) (make-rectangular . jc4edb) (make-polar . jc4eda) (magnitude . jc4ed9) (log . jc4ed8) (list? . jc4ed7) (list-tail . jc4ed6) (list-ref . jc4ed5) (list->vector . jc4ed4) (list->string . jc4ed3) (list . jc4ed2) (length . jc4ed1) (lcm . jc4ed0) (integer? . jc4ecf) (integer-valued? . jc4ece) (integer->char . jc4ecd) (infinite? . jc4ecc) (inexact? . jc4ecb) (inexact . jc4eca) (imag-part . jc4ec9) (gcd . jc4ec8) (for-each . jc4ec7) (floor . jc4ec6) (finite? . jc4ec5) (expt . jc4ec4) (exp . jc4ec3) (exact? . jc4ec2) (exact-integer-sqrt . jc4ec1) (exact . jc4ec0) (even? . jc4ebf) (error . jc4ebe) (eqv? . jc4ebd) (equal? . jc4ebc) (eq? . jc4ebb) (dynamic-wind . jc4eba) (div0-and-mod0 . jc4eb9) (mod0 . jc4eb8) (div0 . jc4eb7) (div-and-mod . jc4eb6) (mod . jc4eb5) (div . jc4eb4) (denominator . jc4eb3) (cos . jc4eb2) (cons . jc4eb1) (complex? . jc4eb0) (char? . jc4eaf) (char>? . jc4eae) (char>=? . jc4ead) (char=? . jc4eac) (char<? . jc4eab) (char<=? . jc4eaa) (char->integer . jc4ea9) (ceiling . jc4ea8) (call-with-values . jc4ea7) (call/cc . jc4ea6) (call-with-current-continuation . jc4ea5) (cddddr . jc4ea4) (cdddar . jc4ea3) (cddadr . jc4ea2) (cddaar . jc4ea1) (cdaddr . jc4ea0) (cdadar . jc4e9f) (cdaadr . jc4e9e) (cdaaar . jc4e9d) (cadddr . jc4e9c) (caddar . jc4e9b) (cadadr . jc4e9a) (cadaar . jc4e99) (caaddr . jc4e98) (caadar . jc4e97) (caaadr . jc4e96) (caaaar . jc4e95) (cdddr . jc4e94) (cddar . jc4e93) (cdadr . jc4e92) (cdaar . jc4e91) (caddr . jc4e90) (cadar . jc4e8f) (caadr . jc4e8e) (caaar . jc4e8d) (cddr . jc4e8c) (cdar . jc4e8b) (cadr . jc4e8a) (caar . jc4e89) (cdr . jc4e88) (car . jc4e87) (boolean? . jc4e86) (boolean=? . jc4e85) (atan . jc4e84) (assertion-violation . jc4e83) (assertion-error . jc31e6) (asin . jc4e82) (apply . jc4e81) (append . jc4e80) (angle . jc4e7f) (acos . jc4e7e) (abs . jc4e7d) (/ . jc4e7c) (* . jc4e7b) (- . jc4e7a) (+ . jc4e79) (>= . jc4e78) (> . jc4e77) (= . jc4e76) (<= . jc4e75) (< . jc4e74) (library . jc4e73) (&no-nans . jc4e72) (&no-infinities . jc4e71) (&i/o-encoding . jc4e70) (&i/o-decoding . jc4e6f) (&i/o-port . jc4e6e) (&i/o-file-does-not-exist . jc4e6d) (&i/o-file-already-exists . jc4e6c) (&i/o-file-is-read-only . jc4e6b) (&i/o-file-protection . jc4e6a) (&i/o-filename . jc4e69) (&i/o-invalid-position . jc4e68) (&i/o-write . jc4e67) (&i/o-read . jc4e66) (&i/o . jc4e65) (&undefined . jc4e64) (&syntax . jc4e63) (&lexical . jc4e62) (&implementation-restriction . jc4e61) (&non-continuable . jc4e60) (&who . jc4e5f) (&irritants . jc4e5e) (&assertion . jc4e5d) (&violation . jc4e5c) (&error . jc4e5b) (&serious . jc4e5a) (&warning . jc4e59) (&message . jc4e58) (&condition . jc4e57) (define-condition-type . jc4e56) (define-enumeration . jc4e55) (define-record-type . jc4e54) (parent-rtd . jc4e53) (nongenerative . jc4e52) (opaque . jc4e51) (sealed . jc4e50) (protocol . jc4e4f) (parent . jc4e4e) (immutable . jc4e4d) (mutable . jc4e4c) (fields . jc4e4b) (error-handling-mode . jc4e4a) (file-options . jc4e49) (buffer-mode . jc4e48) (eol-style . jc4e47) (guard . jc4e46) (trace-define . jc4e45) (trace-lambda . jc4e44) (unsyntax-splicing . jc4e43) (unsyntax . jc4e42) (unquote-splicing . jc4e41) (unquote . jc4e40) (_ . jc4e3f) (else . jc4e3e) (=> . jc4e3d) (... . jc4e3c) (assert . jc4e3b) (endianness . jc4e3a) (delay . jc4e39) (time . jc4e38) (do . jc4e37) (cond . jc4e36) (let* . jc4e35) (let*-values . jc4e34) (let-values . jc4e33) (identifier-syntax . jc4e32) (with-syntax . jc4e31) (quasisyntax . jc4e30) (quasiquote . jc4e2f) (syntax-rules . jc4e2e) (include . jc4e2d) (define-struct . jc4e2c) (record-constructor-descriptor . jc4e2b) (record-type-descriptor . jc4e2a) (case . jc4e29) (parameterize . jc4e28) (unless . jc4e27) (when . jc4e26) (or . jc4e25) (and . jc4e24) (if . jc4e23) (let . jc4e22) (letrec* . jc4e21) (letrec . jc4e20) (type-descriptor . jc4e1f) (case-lambda . jc4e1e) (lambda . jc4e1d) (syntax . jc4e1c) (syntax-case . jc4e1b) (quote . jc4e1a) (foreign-call . jc4e19) (letrec-syntax . jc4e18) (let-syntax . jc4e17) (set! . jc4e16) (import . jc4e15) (begin . jc4e14) (module . jc4e13) (define-syntax . jc4e12) (define . jc4e11)) '((jc51cb core-prim . &no-nans-rcd) (jc51ca core-prim . &no-nans-rtd) (jc51c9 core-prim . &no-infinities-rcd) (jc51c8 core-prim . &no-infinities-rtd) (jc51c7 core-prim . &i/o-encoding-rcd) (jc51c6 core-prim . &i/o-encoding-rtd) (jc51c5 core-prim . &i/o-decoding-rcd) (jc51c4 core-prim . &i/o-decoding-rtd) (jc51c3 core-prim . &i/o-port-rcd) (jc51c2 core-prim . &i/o-port-rtd) (jc51c1 core-prim . &i/o-file-does-not-exist-rcd) (jc51c0 core-prim . &i/o-file-does-not-exist-rtd) (jc51bf core-prim . &i/o-file-already-exists-rcd) (jc51be core-prim . &i/o-file-already-exists-rtd) (jc51bd core-prim . &i/o-file-is-read-only-rcd) (jc51bc core-prim . &i/o-file-is-read-only-rtd) (jc51bb core-prim . &i/o-file-protection-rcd) (jc51ba core-prim . &i/o-file-protection-rtd) (jc51b9 core-prim . &i/o-filename-rcd) (jc51b8 core-prim . &i/o-filename-rtd) (jc51b7 core-prim . &i/o-invalid-position-rcd) (jc51b6 core-prim . &i/o-invalid-position-rtd) (jc51b5 core-prim . &i/o-write-rcd) (jc51b4 core-prim . &i/o-write-rtd) (jc51b3 core-prim . &i/o-read-rcd) (jc51b2 core-prim . &i/o-read-rtd) (jc51b1 core-prim . &i/o-rcd) (jc51b0 core-prim . &i/o-rtd) (jc51af core-prim . &undefined-rcd) (jc51ae core-prim . &undefined-rtd) (jc51ad core-prim . &syntax-rcd) (jc51ac core-prim . &syntax-rtd) (jc51ab core-prim . &lexical-rcd) (jc51aa core-prim . &lexical-rtd) (jc51a9 core-prim . &implementation-restriction-rcd) (jc51a8 core-prim . &implementation-restriction-rtd) (jc51a7 core-prim . &non-continuable-rcd) (jc51a6 core-prim . &non-continuable-rtd) (jc51a5 core-prim . &who-rcd) (jc51a4 core-prim . &who-rtd) (jc51a3 core-prim . &irritants-rcd) (jc51a2 core-prim . &irritants-rtd) (jc51a1 core-prim . &assertion-rcd) (jc51a0 core-prim . &assertion-rtd) (jc519f core-prim . &violation-rcd) (jc519e core-prim . &violation-rtd) (jc519d core-prim . &error-rcd) (jc519c core-prim . &error-rtd) (jc519b core-prim . &serious-rcd) (jc519a core-prim . &serious-rtd) (jc5199 core-prim . &warning-rcd) (jc5198 core-prim . &warning-rtd) (jc5197 core-prim . &message-rcd) (jc5196 core-prim . &message-rtd) (jc5195 core-prim . &condition-rcd) (jc5194 core-prim . &condition-rtd) (jc31e8 core-prim . syntax-error) (jc310c core-prim . syntax-dispatch) (jc5193 core-prim . pretty-print) (jc5192 core-prim . eval-core) (jc5191 core-prim . set-symbol-value!) (jc5190 core-prim . symbol-value) (jc518f core-prim . gensym) (jc518e core-prim . void) (jc4cab core-prim . load) (jc31fa core-prim . interaction-environment) (jc518d core-prim . char-ready?) (jc518c core-prim . regexp?) (jc518b core-prim . read-line) (jc518a core-prim . gensym-prefix-set!) (jc5189 core-prim . ungensym) (jc5188 core-prim . alist->eq-hash-table) (jc5187 core-prim . assoc-ref) (jc5186 core-prim . print) (jc5185 core-prim . format) (jc5184 core-prim . host-os) (jc2b4b core-prim . library-path) (jc5183 core-prim . standard-library-path) (jc5182 core-prim . ssl-supported?) (jc5181 core-prim . ssl-socket?) (jc5180 core-prim . socket-sslize!) (jc517f core-prim . %monapi-stream-read) (jc517e core-prim . %monapi-stream-write) (jc517d core-prim . %monapi-stream-handle) (jc517c core-prim . %monapi-make-stream) (jc517b core-prim . %monapi-name-add!) (jc517a core-prim . %monapi-message-receive) (jc5179 core-prim . %monapi-name-whereis) (jc5178 core-prim . %monapi-message-reply) (jc5177 core-prim . %monapi-message-send-receive) (jc5176 core-prim . %monapi-message-send) (jc5175 core-prim . process-terminate!) (jc5174 core-prim . process-list) (jc5173 core-prim . file-newer?) (jc5172 core-prim . stat-mtime) (jc5171 core-prim . write-to-file) (jc5170 core-prim . file->list) (jc516f core-prim . file->string) (jc516e core-prim . digit->integer) (jc516d core-prim . call-with-string-input-port) (jc516c core-prim . call-with-string-io) (jc516b core-prim . string-split) (jc516a core-prim . bytevector-for-each) (jc5169 core-prim . string->regexp) (jc5168 core-prim . rxmatch) (jc5167 core-prim . regexp-replace-all) (jc5166 core-prim . hashtable-fold-left) (jc5165 core-prim . hashtable-for-each) (jc2935 core-prim . mosh-cache-dir) (jc5164 core-prim . %start-process) (jc5163 core-prim . %call-process) (jc5162 core-prim . local-tz-offset) (jc5161 core-prim . microseconds) (jc5160 core-prim . directory-list) (jc515f core-prim . set-current-directory!) (jc515e core-prim . expand-path) (jc515d core-prim . current-directory) (jc515c core-prim . %getpid) (jc515b core-prim . %waitpid) (jc515a core-prim . simple-struct-name) (jc5159 core-prim . simple-struct-set!) (jc5158 core-prim . simple-struct-ref) (jc5157 core-prim . make-simple-struct) (jc5156 core-prim . simple-struct?) (jc5155 core-prim . pointer-ref-c-int64) (jc5154 core-prim . pointer-ref-c-int32) (jc5153 core-prim . pointer-ref-c-int16) (jc5152 core-prim . pointer-ref-c-int8) (jc5151 core-prim . pointer-ref-c-uint64) (jc5150 core-prim . pointer-ref-c-uint32) (jc514f core-prim . pointer-ref-c-uint16) (jc514e core-prim . pointer-ref-c-uint8) (jc514d core-prim . pointer-set-c-uint64!) (jc514c core-prim . pointer-set-c-uint32!) (jc514b core-prim . pointer-set-c-uint16!) (jc514a core-prim . pointer-set-c-uint8!) (jc5149 core-prim . pointer-set-c-int64!) (jc5148 core-prim . pointer-set-c-int32!) (jc5147 core-prim . pointer-set-c-int16!) (jc5146 core-prim . pointer-set-c-int8!) (jc5145 core-prim . pointer-set-c-pointer!) (jc5144 core-prim . pointer-set-c-double!) (jc5143 core-prim . pointer-set-c-float!) (jc5142 core-prim . pointer-set-c-long-long!) (jc5141 core-prim . pointer-set-c-long!) (jc5140 core-prim . pointer-set-c-int!) (jc513f core-prim . pointer-set-c-short!) (jc513e core-prim . pointer-set-c-char!) (jc513d core-prim . pointer-ref-c-pointer) (jc513c core-prim . pointer-ref-c-double) (jc513b core-prim . pointer-ref-c-float) (jc513a core-prim . pointer-ref-c-unsigned-long-long) (jc5139 core-prim . pointer-ref-c-signed-long-long) (jc5138 core-prim . pointer-ref-c-unsigned-long) (jc5137 core-prim . pointer-ref-c-signed-long) (jc5136 core-prim . pointer-ref-c-unsigned-int) (jc5135 core-prim . pointer-ref-c-signed-int) (jc5134 core-prim . pointer-ref-c-unsigned-short) (jc5133 core-prim . pointer-ref-c-signed-short) (jc5132 core-prim . pointer-ref-c-unsigned-char) (jc5131 core-prim . pointer-ref-c-signed-char) (jc5130 core-prim . pointer->integer) (jc512f core-prim . integer->pointer) (jc512e core-prim . pointer?) (jc512d core-prim . shared-errno) (jc512c core-prim . %ffi-error) (jc512b core-prim . %ffi-close) (jc512a core-prim . %ffi-free-c-callback-trampoline) (jc5129 core-prim . %ffi-make-c-callback-trampoline) (jc5128 core-prim . %ffi-free) (jc5127 core-prim . %ffi-malloc) (jc5126 core-prim . %ffi-supported?) (jc5125 core-prim . %ffi-pointer->string) (jc5124 core-prim . %ffi-call) (jc5123 core-prim . %ffi-lookup) (jc5122 core-prim . %ffi-open) (jc5121 core-prim . null-terminated-utf8->string) (jc5120 core-prim . null-terminated-bytevector->string) (jc511f core-prim . %exec) (jc511e core-prim . %fork) (jc511d core-prim . %pipe) (jc511c core-prim . %confstr) (jc511b core-prim . %dup) (jc511a core-prim . p) (jc5119 core-prim . open-output-string) (jc5118 core-prim . get-output-string) (jc5117 core-prim . file-stat-ctime) (jc5116 core-prim . file-stat-atime) (jc5115 core-prim . file-stat-mtime) (jc5114 core-prim . file-size-in-bytes) (jc5113 core-prim . file-writable?) (jc5112 core-prim . file-executable?) (jc5111 core-prim . file-readable?) (jc5110 core-prim . file-regular?) (jc510f core-prim . file-symbolic-link?) (jc510e core-prim . file-directory?) (jc510d core-prim . create-symbolic-link) (jc510c core-prim . rename-file) (jc510b core-prim . delete-directory) (jc510a core-prim . create-directory) (jc5109 core-prim . create-mosh-cache-dir) (jc5108 core-prim . get-environment-variables) (jc5107 core-prim . current-exception-handler) (jc5106 core-prim . get-environment-variable) (jc5105 core-prim . join-wraps) (jc5104 core-prim . id->real-label) (jc5103 core-prim . same-marks?) (jc5102 core-prim . same-marks*?) (jc5101 core-prim . get-timeofday) (jc5100 core-prim . get-command-line) (jc50ff core-prim . sys-display) (jc50fe core-prim . whereis) (jc50fd core-prim . register) (jc50fc core-prim . vm-join!) (jc50fb core-prim . vm-set-value!) (jc50fa core-prim . vm?) (jc50f9 core-prim . main-vm?) (jc50f8 core-prim . vm-eval) (jc50f7 core-prim . vm-self) (jc50f6 core-prim . vm-start!) (jc50f5 core-prim . make-vm) (jc50f4 core-prim . mutex-try-lock!) (jc50f3 core-prim . mutex-unlock!) (jc50f2 core-prim . mutex-lock!) (jc50f1 core-prim . mutex?) (jc50f0 core-prim . make-mutex) (jc50ef core-prim . condition-variable-notify-all!) (jc50ee core-prim . condition-variable-notify!) (jc50ed core-prim . condition-variable-wait!) (jc50ec core-prim . make-condition-variable) (jc50eb core-prim . write/ss) (jc50ea core-prim . mosh-executable-name) (jc50e9 core-prim . mosh-executable-path) (jc50e8 core-prim . make-file-options) (jc50e7 core-prim . source-info) (jc50e6 core-prim . make-compiler-instruction) (jc50e5 core-prim . make-instruction) (jc50e4 core-prim . set-annotation!) (jc50e3 core-prim . get-annotation) (jc50e2 core-prim . annotated-pair?) (jc50e1 core-prim . annotated-cons) (jc50e0 core-prim . set-source-info!) (jc50df core-prim . bignum?) (jc50de core-prim . fast-equal?) (jc50dd core-prim . fasl-read) (jc50dc core-prim . fasl-write) (jc50db core-prim . time-usage) (jc50da core-prim . os-constant) (jc50d9 core-prim . condition-printer) (jc50d8 core-prim . disasm) (jc2933 core-prim . make-parameter) (jc50d7 core-prim . socket-port) (jc50d6 core-prim . socket-shutdown) (jc50d5 core-prim . socket-close) (jc50d4 core-prim . socket-send) (jc50d3 core-prim . socket-recv!) (jc50d2 core-prim . socket-recv) (jc50d1 core-prim . make-server-socket) (jc50d0 core-prim . make-client-socket) (jc50cf core-prim . socket-accept) (jc50ce core-prim . socket?) (jc50cd core-prim . string-upcase) (jc50cc core-prim . string-titlecase) (jc50cb core-prim . string-normalize-nfkd) (jc50ca core-prim . string-normalize-nfkc) (jc50c9 core-prim . string-normalize-nfd) (jc50c8 core-prim . string-normalize-nfc) (jc50c7 core-prim . string-foldcase) (jc50c6 core-prim . string-downcase) (jc50c5 core-prim . string-ci>?) (jc50c4 core-prim . string-ci>=?) (jc50c3 core-prim . string-ci=?) (jc50c2 core-prim . string-ci<?) (jc50c1 core-prim . string-ci<=?) (jc50c0 core-prim . char-whitespace?) (jc50bf core-prim . char-upper-case?) (jc50be core-prim . char-title-case?) (jc50bd core-prim . char-numeric?) (jc50bc core-prim . char-lower-case?) (jc50bb core-prim . char-general-category) (jc50ba core-prim . char-upcase) (jc50b9 core-prim . char-titlecase) (jc50b8 core-prim . char-foldcase) (jc50b7 core-prim . char-downcase) (jc50b6 core-prim . char-ci>?) (jc50b5 core-prim . char-ci>=?) (jc50b4 core-prim . char-ci=?) (jc50b3 core-prim . char-ci<?) (jc50b2 core-prim . char-ci<=?) (jc50b1 core-prim . char-alphabetic?) (jc2f37 core-prim . make-variable-transformer) (jc31ee core-prim . identifier?) (jc31da core-prim . generate-temporaries) (jc31dc core-prim . free-identifier=?) (jc31f2 core-prim . syntax->datum) (jc31f0 core-prim . datum->syntax) (jc31de core-prim . bound-identifier=?) (jc50b0 core-prim . record-type-descriptor?) (jc50af core-prim . record-predicate) (jc50ae core-prim . record-mutator) (jc50ad core-prim . record-constructor) (jc50ac core-prim . record-accessor) (jc50ab core-prim . make-record-type-descriptor) (jc50aa core-prim . make-record-constructor-descriptor) (jc50a9 core-prim . record?) (jc50a8 core-prim . record-type-uid) (jc50a7 core-prim . record-type-sealed?) (jc50a6 core-prim . record-type-parent) (jc50a5 core-prim . record-type-opaque?) (jc50a4 core-prim . record-type-name) (jc50a3 core-prim . record-type-generative?) (jc50a2 core-prim . record-type-field-names) (jc50a1 core-prim . record-rtd) (jc50a0 core-prim . record-field-mutable?) (jc509f core-prim . delete-file) (jc509e core-prim . file-exists?) (jc509d core-prim . vector-sort!) (jc509c core-prim . vector-sort) (jc509b core-prim . list-sort) (jc509a core-prim . symbol-hash) (jc5099 core-prim . string-ci-hash) (jc5098 core-prim . string-hash) (jc5097 core-prim . equal-hash) (jc5096 core-prim . hashtable-equivalence-function) (jc5095 core-prim . make-hashtable) (jc5094 core-prim . hashtable-hash-function) (jc5093 core-prim . make-eqv-hashtable) (jc5092 core-prim . make-eq-hashtable) (jc5091 core-prim . hashtable?) (jc5090 core-prim . hashtable-update!) (jc508f core-prim . hashtable-size) (jc508e core-prim . hashtable-set!) (jc508d core-prim . hashtable-ref) (jc508c core-prim . hashtable-mutable?) (jc508b core-prim . hashtable-keys) (jc508a core-prim . hashtable-entries) (jc5089 core-prim . hashtable-delete!) (jc5088 core-prim . hashtable-copy) (jc5087 core-prim . hashtable-contains?) (jc5086 core-prim . hashtable-clear!) (jc5085 core-prim . call-with-output-file) (jc5084 core-prim . call-with-input-file) (jc5083 core-prim . write-char) (jc5082 core-prim . write) (jc5081 core-prim . with-output-to-file) (jc5080 core-prim . with-input-from-file) (jc507f core-prim . read-char) (jc507e core-prim . read) (jc507d core-prim . peek-char) (jc507c core-prim . open-output-file) (jc507b core-prim . open-input-file) (jc507a core-prim . newline) (jc5079 core-prim . display) (jc5078 core-prim . close-output-port) (jc5077 core-prim . close-input-port) (jc5076 core-prim . eof-object?) (jc5075 core-prim . eof-object) (jc5074 core-prim . current-error-port) (jc5073 core-prim . current-output-port) (jc5072 core-prim . current-input-port) (jc5071 core-prim . output-port?) (jc5070 core-prim . input-port?) (jc506f core-prim . utf-8-codec) (jc506e core-prim . utf-16-codec) (jc506d core-prim . transcoder-error-handling-mode) (jc506c core-prim . transcoder-eol-style) (jc506b core-prim . transcoder-codec) (jc506a core-prim . transcoded-port) (jc5069 core-prim . textual-port?) (jc5068 core-prim . string->bytevector) (jc5067 core-prim . standard-output-port) (jc5066 core-prim . standard-input-port) (jc5065 core-prim . standard-error-port) (jc5064 core-prim . set-port-position!) (jc5063 core-prim . put-u8) (jc5062 core-prim . put-string) (jc5061 core-prim . put-datum) (jc5060 core-prim . put-char) (jc505f core-prim . put-bytevector) (jc505e core-prim . port?) (jc505d core-prim . port-transcoder) (jc505c core-prim . port-position) (jc505b core-prim . port-has-set-port-position!?) (jc505a core-prim . port-has-port-position?) (jc5059 core-prim . port-eof?) (jc5058 core-prim . output-port-buffer-mode) (jc5057 core-prim . open-string-output-port) (jc5056 core-prim . open-string-input-port) (jc5055 core-prim . open-file-output-port) (jc5054 core-prim . open-file-input/output-port) (jc5053 core-prim . open-file-input-port) (jc5052 core-prim . open-bytevector-output-port) (jc5051 core-prim . open-bytevector-input-port) (jc5050 core-prim . native-transcoder) (jc504f core-prim . native-eol-style) (jc504e core-prim . make-transcoder) (jc504d core-prim . latin-1-codec) (jc504c core-prim . make-i/o-write-error) (jc504b core-prim . make-i/o-read-error) (jc504a core-prim . make-i/o-port-error) (jc5049 core-prim . make-i/o-invalid-position-error) (jc5048 core-prim . make-i/o-filename-error) (jc5047 core-prim . make-i/o-file-protection-error) (jc5046 core-prim . make-i/o-file-is-read-only-error) (jc5045 core-prim . make-i/o-file-does-not-exist-error) (jc5044 core-prim . make-i/o-file-already-exists-error) (jc5043 core-prim . make-i/o-error) (jc5042 core-prim . make-i/o-encoding-error) (jc5041 core-prim . make-i/o-decoding-error) (jc5040 core-prim . make-custom-textual-output-port) (jc503f core-prim . make-custom-textual-input/output-port) (jc503e core-prim . make-custom-textual-input-port) (jc503d core-prim . make-custom-binary-output-port) (jc503c core-prim . make-custom-binary-input/output-port) (jc503b core-prim . make-custom-binary-input-port) (jc503a core-prim . make-bytevector) (jc5039 core-prim . lookahead-u8) (jc5038 core-prim . lookahead-char) (jc5037 core-prim . i/o-write-error?) (jc5036 core-prim . i/o-read-error?) (jc5035 core-prim . i/o-port-error?) (jc5034 core-prim . i/o-invalid-position-error?) (jc5033 core-prim . i/o-filename-error?) (jc5032 core-prim . i/o-file-protection-error?) (jc5031 core-prim . i/o-file-is-read-only-error?) (jc5030 core-prim . i/o-file-does-not-exist-error?) (jc502f core-prim . i/o-file-already-exists-error?) (jc502e core-prim . i/o-error?) (jc502d core-prim . i/o-error-position) (jc502c core-prim . i/o-error-port) (jc502b core-prim . i/o-error-filename) (jc502a core-prim . i/o-encoding-error?) (jc5029 core-prim . i/o-encoding-error-char) (jc5028 core-prim . i/o-decoding-error?) (jc5027 core-prim . get-u8) (jc5026 core-prim . get-string-n!) (jc5025 core-prim . get-string-n) (jc5024 core-prim . get-string-all) (jc5023 core-prim . get-line) (jc5022 core-prim . get-datum) (jc5021 core-prim . get-char) (jc5020 core-prim . get-bytevector-some) (jc501f core-prim . get-bytevector-n!) (jc501e core-prim . get-bytevector-n) (jc501d core-prim . get-bytevector-all) (jc501c core-prim . flush-output-port) (jc501b core-prim . close-port) (jc31c8 core-prim . scheme-report-environment) (jc501a core-prim . quotient) (jc31c6 core-prim . null-environment) (jc5019 core-prim . remainder) (jc5018 core-prim . modulo) (jc5017 core-prim . inexact->exact) (jc5016 core-prim . force) (jc5015 core-prim . exact->inexact) (jc5014 core-prim . make-promise) (jc5013 core-prim . exit) (jc4ca5 core-prim . command-line) (jc5012 core-prim . string-fill!) (jc5011 core-prim . string-set!) (jc5010 core-prim . set-cdr!) (jc500f core-prim . set-car!) (jc500e core-prim . remove) (jc500d core-prim . remv) (jc500c core-prim . remp) (jc500b core-prim . remq) (jc500a core-prim . partition) (jc5009 core-prim . memv) (jc5008 core-prim . memq) (jc5007 core-prim . memp) (jc5006 core-prim . member) (jc5005 core-prim . exists) (jc5004 core-prim . for-all) (jc5003 core-prim . fold-right) (jc5002 core-prim . fold-left) (jc5001 core-prim . find) (jc5000 core-prim . filter) (jc4fff core-prim . cons*) (jc4ffe core-prim . assv) (jc4ffd core-prim . assq) (jc4ffc core-prim . assp) (jc4ffb core-prim . assoc) (jc4ffa core-prim . call-with-string-output-port) (jc4ff9 core-prim . call-with-port) (jc4ff8 core-prim . call-with-bytevector-output-port) (jc4ff7 core-prim . bytevector->string) (jc4ff6 core-prim . buffer-mode?) (jc4ff5 core-prim . binary-port?) (jc4ff4 core-prim . with-exception-handler) (jc4ff3 core-prim . raise-continuable) (jc4ff2 core-prim . raise) (jc31cc core-prim . eval) (jc31c4 core-prim . environment) (jc4ff1 core-prim . make-enumeration) (jc4ff0 core-prim . enum-set=?) (jc4fef core-prim . enum-set-universe) (jc4fee core-prim . enum-set-union) (jc4fed core-prim . enum-set-subset?) (jc4fec core-prim . enum-set-projection) (jc4feb core-prim . enum-set-member?) (jc4fea core-prim . enum-set-intersection) (jc4fe9 core-prim . enum-set-indexer) (jc4fe8 core-prim . enum-set-difference) (jc4fe7 core-prim . enum-set-constructor) (jc4fe6 core-prim . enum-set-complement) (jc4fe5 core-prim . enum-set->list) (jc4fe4 core-prim . who-condition?) (jc4fe3 core-prim . warning?) (jc4fe2 core-prim . violation?) (jc4fe1 core-prim . undefined-violation?) (jc4fe0 core-prim . syntax-violation?) (jc4fdf core-prim . syntax-violation-subform) (jc4fde core-prim . syntax-violation-form) (jc31ec core-prim . syntax-violation) (jc4fdd core-prim . simple-conditions) (jc4fdc core-prim . serious-condition?) (jc4fdb core-prim . non-continuable-violation?) (jc4fda core-prim . message-condition?) (jc4fd9 core-prim . make-who-condition) (jc4fd8 core-prim . make-warning) (jc4fd7 core-prim . make-violation) (jc4fd6 core-prim . make-undefined-violation) (jc4fd5 core-prim . make-syntax-violation) (jc4fd4 core-prim . make-serious-condition) (jc4fd3 core-prim . make-non-continuable-violation) (jc4fd2 core-prim . make-message-condition) (jc4fd1 core-prim . make-lexical-violation) (jc4fd0 core-prim . make-irritants-condition) (jc4fcf core-prim . make-implementation-restriction-violation) (jc4fce core-prim . make-error) (jc4fcd core-prim . make-assertion-violation) (jc4fcc core-prim . lexical-violation?) (jc4fcb core-prim . irritants-condition?) (jc4fca core-prim . implementation-restriction-violation?) (jc4fc9 core-prim . error?) (jc4fc8 core-prim . condition-who) (jc4fc7 core-prim . condition-predicate) (jc4fc6 core-prim . condition-message) (jc4fc5 core-prim . condition-irritants) (jc4fc4 core-prim . condition-accessor) (jc4fc3 core-prim . condition) (jc4fc2 core-prim . assertion-violation?) (jc4fc1 core-prim . condition?) (jc4fc0 core-prim . utf32->string) (jc4fbf core-prim . utf16->string) (jc4fbe core-prim . utf8->string) (jc4fbd core-prim . uint-list->bytevector) (jc4fbc core-prim . u8-list->bytevector) (jc4fbb core-prim . string->utf8) (jc4fba core-prim . string->utf32) (jc4fb9 core-prim . string->utf16) (jc4fb8 core-prim . sint-list->bytevector) (jc4fb7 core-prim . native-endianness) (jc4fb6 core-prim . bytevector?) (jc4fb5 core-prim . bytevector=?) (jc4fb4 core-prim . bytevector-uint-set!) (jc4fb3 core-prim . bytevector-uint-ref) (jc4fb2 core-prim . bytevector-u8-set!) (jc4fb1 core-prim . bytevector-u8-ref) (jc4fb0 core-prim . bytevector-u64-set!) (jc4faf core-prim . bytevector-u64-ref) (jc4fae core-prim . bytevector-u64-native-set!) (jc4fad core-prim . bytevector-u64-native-ref) (jc4fac core-prim . bytevector-u32-set!) (jc4fab core-prim . bytevector-u32-ref) (jc4faa core-prim . bytevector-u32-native-set!) (jc4fa9 core-prim . bytevector-u32-native-ref) (jc4fa8 core-prim . bytevector-u16-set!) (jc4fa7 core-prim . bytevector-u16-ref) (jc4fa6 core-prim . bytevector-u16-native-set!) (jc4fa5 core-prim . bytevector-u16-native-ref) (jc4fa4 core-prim . bytevector-sint-set!) (jc4fa3 core-prim . bytevector-sint-ref) (jc4fa2 core-prim . bytevector-s8-set!) (jc4fa1 core-prim . bytevector-s8-ref) (jc4fa0 core-prim . bytevector-s64-set!) (jc4f9f core-prim . bytevector-s64-ref) (jc4f9e core-prim . bytevector-s64-native-set!) (jc4f9d core-prim . bytevector-s64-native-ref) (jc4f9c core-prim . bytevector-s32-set!) (jc4f9b core-prim . bytevector-s32-ref) (jc4f9a core-prim . bytevector-s32-native-set!) (jc4f99 core-prim . bytevector-s32-native-ref) (jc4f98 core-prim . bytevector-s16-set!) (jc4f97 core-prim . bytevector-s16-ref) (jc4f96 core-prim . bytevector-s16-native-set!) (jc4f95 core-prim . bytevector-s16-native-ref) (jc4f94 core-prim . bytevector-length) (jc4f93 core-prim . bytevector-ieee-single-ref) (jc4f92 core-prim . bytevector-ieee-single-set!) (jc4f91 core-prim . bytevector-ieee-single-native-set!) (jc4f90 core-prim . bytevector-ieee-single-native-ref) (jc4f8f core-prim . bytevector-ieee-double-set!) (jc4f8e core-prim . bytevector-ieee-double-ref) (jc4f8d core-prim . bytevector-ieee-double-native-set!) (jc4f8c core-prim . bytevector-ieee-double-native-ref) (jc4f8b core-prim . bytevector-fill!) (jc4f8a core-prim . bytevector-copy!) (jc4f89 core-prim . bytevector-copy) (jc4f88 core-prim . bytevector->uint-list) (jc4f87 core-prim . bytevector->u8-list) (jc4f86 core-prim . bytevector->sint-list) (jc4f85 core-prim . no-nans-violation?) (jc4f84 core-prim . no-infinities-violation?) (jc4f83 core-prim . make-no-nans-violation) (jc4f82 core-prim . make-no-infinities-violation) (jc4f81 core-prim . real->flonum) (jc4f80 core-prim . flzero?) (jc4f7f core-prim . fltruncate) (jc4f7e core-prim . fltan) (jc4f7d core-prim . flsqrt) (jc4f7c core-prim . flsin) (jc4f7b core-prim . flround) (jc4f7a core-prim . flpositive?) (jc4f79 core-prim . flonum?) (jc4f78 core-prim . flodd?) (jc4f77 core-prim . flnumerator) (jc4f76 core-prim . flnegative?) (jc4f75 core-prim . flnan?) (jc4f74 core-prim . flmod0) (jc4f73 core-prim . flmod) (jc4f72 core-prim . flmin) (jc4f71 core-prim . flmax) (jc4f70 core-prim . fllog) (jc4f6f core-prim . flinteger?) (jc4f6e core-prim . flinfinite?) (jc4f6d core-prim . flfloor) (jc4f6c core-prim . flfinite?) (jc4f6b core-prim . flexpt) (jc4f6a core-prim . flexp) (jc4f69 core-prim . fleven?) (jc4f68 core-prim . fldiv0-and-mod0) (jc4f67 core-prim . fldiv0) (jc4f66 core-prim . fldiv-and-mod) (jc4f65 core-prim . fldiv) (jc4f64 core-prim . fldenominator) (jc4f63 core-prim . flcos) (jc4f62 core-prim . flceiling) (jc4f61 core-prim . flatan) (jc4f60 core-prim . flasin) (jc4f5f core-prim . flacos) (jc4f5e core-prim . flabs) (jc4f5d core-prim . fl>?) (jc4f5c core-prim . fl>=?) (jc4f5b core-prim . fl=?) (jc4f5a core-prim . fl<?) (jc4f59 core-prim . fl<=?) (jc4f58 core-prim . fl/) (jc4f57 core-prim . fl-) (jc4f56 core-prim . fl+) (jc4f55 core-prim . fl*) (jc4f54 core-prim . fixnum->flonum) (jc4f53 core-prim . fxzero?) (jc4f52 core-prim . fxxor) (jc4f51 core-prim . fxrotate-bit-field) (jc4f50 core-prim . fxreverse-bit-field) (jc4f4f core-prim . fxpositive?) (jc4f4e core-prim . fxodd?) (jc4f4d core-prim . fxnot) (jc4f4c core-prim . fxnegative?) (jc4f4b core-prim . fxmod0) (jc4f4a core-prim . fxmod) (jc4f49 core-prim . fxmin) (jc4f48 core-prim . fxmax) (jc4f47 core-prim . fxlength) (jc4f46 core-prim . fxior) (jc4f45 core-prim . fxif) (jc4f44 core-prim . fxfirst-bit-set) (jc4f43 core-prim . fxeven?) (jc4f42 core-prim . fxdiv0-and-mod0) (jc4f41 core-prim . fxdiv0) (jc4f40 core-prim . fxdiv-and-mod) (jc4f3f core-prim . fxdiv) (jc4f3e core-prim . fxcopy-bit-field) (jc4f3d core-prim . fxcopy-bit) (jc4f3c core-prim . fxbit-set?) (jc4f3b core-prim . fxbit-field) (jc4f3a core-prim . fxbit-count) (jc4f39 core-prim . fxarithmetic-shift-right) (jc4f38 core-prim . fxarithmetic-shift-left) (jc4f37 core-prim . fxarithmetic-shift) (jc4f36 core-prim . fxand) (jc4f35 core-prim . fx>?) (jc4f34 core-prim . fx>=?) (jc4f33 core-prim . fx=?) (jc4f32 core-prim . fx<?) (jc4f31 core-prim . fx<=?) (jc4f30 core-prim . fx-/carry) (jc4f2f core-prim . fx-) (jc4f2e core-prim . fx+/carry) (jc4f2d core-prim . fx+) (jc4f2c core-prim . fx*/carry) (jc4f2b core-prim . fx*) (jc4f2a core-prim . greatest-fixnum) (jc4f29 core-prim . least-fixnum) (jc4f28 core-prim . fixnum-width) (jc4f27 core-prim . fixnum?) (jc4f26 core-prim . bitwise-rotate-bit-field) (jc4f25 core-prim . bitwise-reverse-bit-field) (jc4f24 core-prim . bitwise-length) (jc4f23 core-prim . bitwise-if) (jc4f22 core-prim . bitwise-first-bit-set) (jc4f21 core-prim . bitwise-copy-bit-field) (jc4f20 core-prim . bitwise-copy-bit) (jc4f1f core-prim . bitwise-bit-set?) (jc4f1e core-prim . bitwise-bit-field) (jc4f1d core-prim . bitwise-bit-count) (jc4f1c core-prim . bitwise-xor) (jc4f1b core-prim . bitwise-ior) (jc4f1a core-prim . bitwise-and) (jc4f19 core-prim . bitwise-not) (jc4f18 core-prim . bitwise-arithmetic-shift-right) (jc4f17 core-prim . bitwise-arithmetic-shift-left) (jc4f16 core-prim . bitwise-arithmetic-shift) (jc4f15 core-prim . zero?) (jc4f14 core-prim . vector?) (jc4f13 core-prim . vector-set!) (jc4f12 core-prim . vector-ref) (jc4f11 core-prim . vector-map) (jc4f10 core-prim . vector-length) (jc4f0f core-prim . vector-for-each) (jc4f0e core-prim . vector-fill!) (jc4f0d core-prim . vector->list) (jc4f0c core-prim . vector) (jc4f0b core-prim . values) (jc4f0a core-prim . truncate) (jc4f09 core-prim . tan) (jc4f08 core-prim . symbol?) (jc4f07 core-prim . symbol=?) (jc4f06 core-prim . symbol->string) (jc4f05 core-prim . substring) (jc4f04 core-prim . string?) (jc4f03 core-prim . string>?) (jc4f02 core-prim . string>=?) (jc4f01 core-prim . string=?) (jc4f00 core-prim . string<?) (jc4eff core-prim . string<=?) (jc4efe core-prim . string-ref) (jc4efd core-prim . string-length) (jc4efc core-prim . string-for-each) (jc4efb core-prim . string-copy) (jc4efa core-prim . string-append) (jc4ef9 core-prim . string->symbol) (jc4ef8 core-prim . string->number) (jc4ef7 core-prim . string->list) (jc4ef6 core-prim . string) (jc4ef5 core-prim . sqrt) (jc4ef4 core-prim . sin) (jc4ef3 core-prim . round) (jc4ef2 core-prim . reverse) (jc4ef1 core-prim . real?) (jc4ef0 core-prim . real-valued?) (jc4eef core-prim . real-part) (jc4eee core-prim . rationalize) (jc4eed core-prim . rational?) (jc4eec core-prim . rational-valued?) (jc4eeb core-prim . procedure?) (jc4eea core-prim . positive?) (jc4ee9 core-prim . pair?) (jc4ee8 core-prim . odd?) (jc4ee7 core-prim . numerator) (jc4ee6 core-prim . number?) (jc4ee5 core-prim . number->string) (jc4ee4 core-prim . null?) (jc4ee3 core-prim . not) (jc4ee2 core-prim . negative?) (jc4ee1 core-prim . nan?) (jc4ee0 core-prim . min) (jc4edf core-prim . max) (jc4ede core-prim . map) (jc4edd core-prim . make-vector) (jc4edc core-prim . make-string) (jc4edb core-prim . make-rectangular) (jc4eda core-prim . make-polar) (jc4ed9 core-prim . magnitude) (jc4ed8 core-prim . log) (jc4ed7 core-prim . list?) (jc4ed6 core-prim . list-tail) (jc4ed5 core-prim . list-ref) (jc4ed4 core-prim . list->vector) (jc4ed3 core-prim . list->string) (jc4ed2 core-prim . list) (jc4ed1 core-prim . length) (jc4ed0 core-prim . lcm) (jc4ecf core-prim . integer?) (jc4ece core-prim . integer-valued?) (jc4ecd core-prim . integer->char) (jc4ecc core-prim . infinite?) (jc4ecb core-prim . inexact?) (jc4eca core-prim . inexact) (jc4ec9 core-prim . imag-part) (jc4ec8 core-prim . gcd) (jc4ec7 core-prim . for-each) (jc4ec6 core-prim . floor) (jc4ec5 core-prim . finite?) (jc4ec4 core-prim . expt) (jc4ec3 core-prim . exp) (jc4ec2 core-prim . exact?) (jc4ec1 core-prim . exact-integer-sqrt) (jc4ec0 core-prim . exact) (jc4ebf core-prim . even?) (jc4ebe core-prim . error) (jc4ebd core-prim . eqv?) (jc4ebc core-prim . equal?) (jc4ebb core-prim . eq?) (jc4eba core-prim . dynamic-wind) (jc4eb9 core-prim . div0-and-mod0) (jc4eb8 core-prim . mod0) (jc4eb7 core-prim . div0) (jc4eb6 core-prim . div-and-mod) (jc4eb5 core-prim . mod) (jc4eb4 core-prim . div) (jc4eb3 core-prim . denominator) (jc4eb2 core-prim . cos) (jc4eb1 core-prim . cons) (jc4eb0 core-prim . complex?) (jc4eaf core-prim . char?) (jc4eae core-prim . char>?) (jc4ead core-prim . char>=?) (jc4eac core-prim . char=?) (jc4eab core-prim . char<?) (jc4eaa core-prim . char<=?) (jc4ea9 core-prim . char->integer) (jc4ea8 core-prim . ceiling) (jc4ea7 core-prim . call-with-values) (jc4ea6 core-prim . call/cc) (jc4ea5 core-prim . call-with-current-continuation) (jc4ea4 core-prim . cddddr) (jc4ea3 core-prim . cdddar) (jc4ea2 core-prim . cddadr) (jc4ea1 core-prim . cddaar) (jc4ea0 core-prim . cdaddr) (jc4e9f core-prim . cdadar) (jc4e9e core-prim . cdaadr) (jc4e9d core-prim . cdaaar) (jc4e9c core-prim . cadddr) (jc4e9b core-prim . caddar) (jc4e9a core-prim . cadadr) (jc4e99 core-prim . cadaar) (jc4e98 core-prim . caaddr) (jc4e97 core-prim . caadar) (jc4e96 core-prim . caaadr) (jc4e95 core-prim . caaaar) (jc4e94 core-prim . cdddr) (jc4e93 core-prim . cddar) (jc4e92 core-prim . cdadr) (jc4e91 core-prim . cdaar) (jc4e90 core-prim . caddr) (jc4e8f core-prim . cadar) (jc4e8e core-prim . caadr) (jc4e8d core-prim . caaar) (jc4e8c core-prim . cddr) (jc4e8b core-prim . cdar) (jc4e8a core-prim . cadr) (jc4e89 core-prim . caar) (jc4e88 core-prim . cdr) (jc4e87 core-prim . car) (jc4e86 core-prim . boolean?) (jc4e85 core-prim . boolean=?) (jc4e84 core-prim . atan) (jc4e83 core-prim . assertion-violation) (jc31e6 core-prim . assertion-error) (jc4e82 core-prim . asin) (jc4e81 core-prim . apply) (jc4e80 core-prim . append) (jc4e7f core-prim . angle) (jc4e7e core-prim . acos) (jc4e7d core-prim . abs) (jc4e7c core-prim . /) (jc4e7b core-prim . *) (jc4e7a core-prim . -) (jc4e79 core-prim . +) (jc4e78 core-prim . >=) (jc4e77 core-prim . >) (jc4e76 core-prim . =) (jc4e75 core-prim . <=) (jc4e74 core-prim . <) (jc4e73 core-prim . library) (jc4e72 $core-rtd &no-nans-rtd &no-nans-rcd) (jc4e71 $core-rtd &no-infinities-rtd &no-infinities-rcd) (jc4e70 $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (jc4e6f $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (jc4e6e $core-rtd &i/o-port-rtd &i/o-port-rcd) (jc4e6d $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (jc4e6c $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (jc4e6b $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (jc4e6a $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (jc4e69 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (jc4e68 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (jc4e67 $core-rtd &i/o-write-rtd &i/o-write-rcd) (jc4e66 $core-rtd &i/o-read-rtd &i/o-read-rcd) (jc4e65 $core-rtd &i/o-rtd &i/o-rcd) (jc4e64 $core-rtd &undefined-rtd &undefined-rcd) (jc4e63 $core-rtd &syntax-rtd &syntax-rcd) (jc4e62 $core-rtd &lexical-rtd &lexical-rcd) (jc4e61 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (jc4e60 $core-rtd &non-continuable-rtd &non-continuable-rcd) (jc4e5f $core-rtd &who-rtd &who-rcd) (jc4e5e $core-rtd &irritants-rtd &irritants-rcd) (jc4e5d $core-rtd &assertion-rtd &assertion-rcd) (jc4e5c $core-rtd &violation-rtd &violation-rcd) (jc4e5b $core-rtd &error-rtd &error-rcd) (jc4e5a $core-rtd &serious-rtd &serious-rcd) (jc4e59 $core-rtd &warning-rtd &warning-rcd) (jc4e58 $core-rtd &message-rtd &message-rcd) (jc4e57 $core-rtd &condition-rtd &condition-rcd) (jc4e56 macro . define-condition-type) (jc4e55 macro . define-enumeration) (jc4e54 macro . define-record-type) (jc4e53 macro . parent-rtd) (jc4e52 macro . nongenerative) (jc4e51 macro . opaque) (jc4e50 macro . sealed) (jc4e4f macro . protocol) (jc4e4e macro . parent) (jc4e4d macro . immutable) (jc4e4c macro . mutable) (jc4e4b macro . fields) (jc4e4a macro . error-handling-mode) (jc4e49 macro . file-options) (jc4e48 macro . buffer-mode) (jc4e47 macro . eol-style) (jc4e46 macro . guard) (jc4e45 macro . trace-define) (jc4e44 macro . trace-lambda) (jc4e43 macro . unsyntax-splicing) (jc4e42 macro . unsyntax) (jc4e41 macro . unquote-splicing) (jc4e40 macro . unquote) (jc4e3f macro . _) (jc4e3e macro . else) (jc4e3d macro . =>) (jc4e3c macro . ...) (jc4e3b macro . assert) (jc4e3a macro . endianness) (jc4e39 macro . delay) (jc4e38 macro . time) (jc4e37 macro . do) (jc4e36 macro . cond) (jc4e35 macro . let*) (jc4e34 macro . let*-values) (jc4e33 macro . let-values) (jc4e32 macro . identifier-syntax) (jc4e31 macro . with-syntax) (jc4e30 macro . quasisyntax) (jc4e2f macro . quasiquote) (jc4e2e macro . syntax-rules) (jc4e2d macro . include) (jc4e2c macro . define-struct) (jc4e2b core-macro . record-constructor-descriptor) (jc4e2a core-macro . record-type-descriptor) (jc4e29 macro . case) (jc4e28 macro . parameterize) (jc4e27 macro . unless) (jc4e26 macro . when) (jc4e25 core-macro . or) (jc4e24 core-macro . and) (jc4e23 core-macro . if) (jc4e22 core-macro . let) (jc4e21 core-macro . letrec*) (jc4e20 core-macro . letrec) (jc4e1f core-macro . type-descriptor) (jc4e1e core-macro . case-lambda) (jc4e1d core-macro . lambda) (jc4e1c core-macro . syntax) (jc4e1b core-macro . syntax-case) (jc4e1a core-macro . quote) (jc4e19 core-macro . foreign-call) (jc4e18 letrec-syntax) (jc4e17 let-syntax) (jc4e16 set!) (jc4e15 import) (jc4e14 begin) (jc4e13 module) (jc4e12 define-syntax) (jc4e11 define)) values values '#f '#f '#f '#f) (jc2d20@jc2b6c@install-library 'jc51ec '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . jc5193) (eval-core . jc5192) (set-symbol-value! . jc5191) (symbol-value . jc5190) (gensym . jc518f) (void . jc518e)) '() values values '#f '#f '#f '#f) (jc2d20@jc2b6c@install-library 'jc51ed '(mosh) '() '() '() '() '((set-symbol-value! . jc5191) (symbol-value . jc5190) (regexp? . jc518c) (read-line . jc518b) (ungensym . jc5189) (alist->eq-hash-table . jc5188) (assoc-ref . jc5187) (print . jc5186) (format . jc5185) (host-os . jc5184) (library-path . jc2b4b) (standard-library-path . jc5183) (file-newer? . jc5173) (stat-mtime . jc5172) (digit->integer . jc516e) (call-with-string-input-port . jc516d) (call-with-string-io . jc516c) (string-split . jc516b) (bytevector-for-each . jc516a) (string->regexp . jc5169) (rxmatch . jc5168) (regexp-replace-all . jc5167) (hashtable-fold-left . jc5166) (hashtable-for-each . jc5165) (set-current-directory! . jc515f) (expand-path . jc515e) (current-directory . jc515d) (p . jc511a) (get-timeofday . jc5101) (get-command-line . jc5100) (sys-display . jc50ff) (whereis . jc50fe) (register . jc50fd) (vm-join! . jc50fc) (vm-set-value! . jc50fb) (vm? . jc50fa) (main-vm? . jc50f9) (vm-eval . jc50f8) (vm-self . jc50f7) (vm-start! . jc50f6) (make-vm . jc50f5) (mutex-try-lock! . jc50f4) (mutex-unlock! . jc50f3) (mutex-lock! . jc50f2) (mutex? . jc50f1) (make-mutex . jc50f0) (condition-variable-notify-all! . jc50ef) (condition-variable-notify! . jc50ee) (condition-variable-wait! . jc50ed) (make-condition-variable . jc50ec) (write/ss . jc50eb) (mosh-executable-name . jc50ea) (mosh-executable-path . jc50e9) (make-file-options . jc50e8) (source-info . jc50e7) (make-compiler-instruction . jc50e6) (make-instruction . jc50e5) (set-annotation! . jc50e4) (get-annotation . jc50e3) (annotated-pair? . jc50e2) (annotated-cons . jc50e1) (set-source-info! . jc50e0) (bignum? . jc50df) (fast-equal? . jc50de) (fasl-read . jc50dd) (fasl-write . jc50dc) (time-usage . jc50db) (os-constant . jc50da) (condition-printer . jc50d9) (time . jc4e38) (include . jc4e2d)) '() values values '#f '#f '#f '#f) (jc2d20@jc2b6c@install-library 'jc51ee '(system) '() '() '() '() '((gensym-prefix-set! . jc518a) (ssl-supported? . jc5182) (ssl-socket? . jc5181) (socket-sslize! . jc5180) (%monapi-stream-read . jc517f) (%monapi-stream-write . jc517e) (%monapi-stream-handle . jc517d) (%monapi-make-stream . jc517c) (%monapi-name-add! . jc517b) (%monapi-message-receive . jc517a) (%monapi-name-whereis . jc5179) (%monapi-message-reply . jc5178) (%monapi-message-send-receive . jc5177) (%monapi-message-send . jc5176) (process-terminate! . jc5175) (process-list . jc5174) (write-to-file . jc5171) (file->list . jc5170) (file->string . jc516f) (mosh-cache-dir . jc2935) (%start-process . jc5164) (%call-process . jc5163) (local-tz-offset . jc5162) (microseconds . jc5161) (directory-list . jc5160) (expand-path . jc515e) (%getpid . jc515c) (%waitpid . jc515b) (simple-struct-name . jc515a) (simple-struct-set! . jc5159) (simple-struct-ref . jc5158) (make-simple-struct . jc5157) (simple-struct? . jc5156) (pointer-ref-c-int64 . jc5155) (pointer-ref-c-int32 . jc5154) (pointer-ref-c-int16 . jc5153) (pointer-ref-c-int8 . jc5152) (pointer-ref-c-uint64 . jc5151) (pointer-ref-c-uint32 . jc5150) (pointer-ref-c-uint16 . jc514f) (pointer-ref-c-uint8 . jc514e) (pointer-set-c-uint64! . jc514d) (pointer-set-c-uint32! . jc514c) (pointer-set-c-uint16! . jc514b) (pointer-set-c-uint8! . jc514a) (pointer-set-c-int64! . jc5149) (pointer-set-c-int32! . jc5148) (pointer-set-c-int16! . jc5147) (pointer-set-c-int8! . jc5146) (pointer-set-c-pointer! . jc5145) (pointer-set-c-double! . jc5144) (pointer-set-c-float! . jc5143) (pointer-set-c-long-long! . jc5142) (pointer-set-c-long! . jc5141) (pointer-set-c-int! . jc5140) (pointer-set-c-short! . jc513f) (pointer-set-c-char! . jc513e) (pointer-ref-c-pointer . jc513d) (pointer-ref-c-double . jc513c) (pointer-ref-c-float . jc513b) (pointer-ref-c-unsigned-long-long . jc513a) (pointer-ref-c-signed-long-long . jc5139) (pointer-ref-c-unsigned-long . jc5138) (pointer-ref-c-signed-long . jc5137) (pointer-ref-c-unsigned-int . jc5136) (pointer-ref-c-signed-int . jc5135) (pointer-ref-c-unsigned-short . jc5134) (pointer-ref-c-signed-short . jc5133) (pointer-ref-c-unsigned-char . jc5132) (pointer-ref-c-signed-char . jc5131) (pointer->integer . jc5130) (integer->pointer . jc512f) (pointer? . jc512e) (shared-errno . jc512d) (%ffi-error . jc512c) (%ffi-close . jc512b) (%ffi-free-c-callback-trampoline . jc512a) (%ffi-make-c-callback-trampoline . jc5129) (%ffi-free . jc5128) (%ffi-malloc . jc5127) (%ffi-supported? . jc5126) (%ffi-pointer->string . jc5125) (%ffi-call . jc5124) (%ffi-lookup . jc5123) (%ffi-open . jc5122) (null-terminated-utf8->string . jc5121) (null-terminated-bytevector->string . jc5120) (%exec . jc511f) (%fork . jc511e) (%pipe . jc511d) (%confstr . jc511c) (%dup . jc511b) (open-output-string . jc5119) (get-output-string . jc5118) (file-stat-ctime . jc5117) (file-stat-atime . jc5116) (file-stat-mtime . jc5115) (file-size-in-bytes . jc5114) (file-writable? . jc5113) (file-executable? . jc5112) (file-readable? . jc5111) (file-regular? . jc5110) (file-symbolic-link? . jc510f) (file-directory? . jc510e) (create-symbolic-link . jc510d) (rename-file . jc510c) (delete-directory . jc510b) (create-directory . jc510a) (create-mosh-cache-dir . jc5109) (get-environment-variables . jc5108) (current-exception-handler . jc5107) (get-environment-variable . jc5106) (join-wraps . jc5105) (id->real-label . jc5104) (same-marks? . jc5103) (same-marks*? . jc5102) (disasm . jc50d8) (make-parameter . jc2933) (socket-port . jc50d7) (socket-shutdown . jc50d6) (socket-close . jc50d5) (socket-send . jc50d4) (socket-recv! . jc50d3) (socket-recv . jc50d2) (make-server-socket . jc50d1) (make-client-socket . jc50d0) (socket-accept . jc50cf) (socket? . jc50ce) (parameterize . jc4e28)) '() values values '#f '#f '#f '#f)))
(begin (set! jc4c90@ref (unspecified)) (set! jc4c92@x* (unspecified)) (set! jc4c94@add-library-path! (unspecified)) (set! jc4c96@parse-and-add-library-path (unspecified)) (set! jc4c98@for-each-with-index (unspecified)) (set! jc4c9a@rpad (unspecified)) (set! jc4c9c@condition-printer/p (unspecified)) (set! jc4c9e@record->field-alist (unspecified)) (set! jc4ca0@map-with-index (unspecified)) (set! jc4ca2@repl (unspecified)) (set! jc4ca4@trace-printer (unspecified)) (set! jc4ca6@command-line (unspecified)) (set! jc4ca8@local-library-path (unspecified)) (set! jc4caa@load/args (unspecified)) (set! jc4cac@load (unspecified)) (set! jc4cae@ironscheme-build (unspecified)) (set! jc4cb0@eval-top-level (unspecified)) (set! jc4cb2@compile-system-libraries (unspecified)) (set! jc4cb4@compile (unspecified)) (set! jc4cb6@compile->closure (unspecified)) (set! jc4cb8@pre-compile-r6rs-file (unspecified)) (set! jc4cba@load-r6rs-top-level (unspecified)) (set! jc4cbc@load-r6rs-top-level-sexp (unspecified)) (set! jc4cbe@prefix-inc (unspecified)) (set! jc4cc0@prefix-inc! (unspecified)) (set! jc4c90@ref (lambda (jc4cfb@rtd jc4cfc@i jc4cfd@x) (let ((jc4d01@val ((record-accessor jc4cfb@rtd jc4cfc@i) jc4cfd@x))) (if (symbol? jc4d01@val) (ungensym jc4d01@val) jc4d01@val)))) (set! jc4df7@jc4c90@ref jc4c90@ref) (set! jc4c92@x* '()) (set! jc4df8@jc4c92@x* jc4c92@x*) (set! jc4c94@add-library-path! (lambda (jc4d03@path) (jc2d10@jc2b4c@library-path (append (jc2d10@jc2b4c@library-path) (list jc4d03@path))))) (set! jc4df9@jc4c94@add-library-path! jc4c94@add-library-path!) (set! jc4c96@parse-and-add-library-path (lambda (jc4d05@paths jc4d06@message) (letrec* ((jc4d0a@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((jc4d0b@t jc4d05@paths)) (if jc4d0b@t ((lambda (jc4d0d@paths) (for-each (lambda (jc4d0f@path) (if (file-exists? jc4d0f@path) (jc4c94@add-library-path! (expand-path jc4d0f@path)) (format (current-error-port) jc4d06@message jc4d0f@path))) (string-split jc4d0d@paths jc4d0a@separator))) jc4d0b@t) (void)))))) (set! jc4dfa@jc4c96@parse-and-add-library-path jc4c96@parse-and-add-library-path) (set! jc4c98@for-each-with-index (lambda (jc4d11@proc jc4d12@lst) (letrec ((jc4d15@loop (lambda (jc4d17@i jc4d18@lst) (if (null? jc4d18@lst) (if '#f '#f (void)) (begin (jc4d11@proc jc4d17@i (car jc4d18@lst)) (jc4d15@loop (+ jc4d17@i '1) (cdr jc4d18@lst))))))) (jc4d15@loop '1 jc4d12@lst)))) (set! jc4dfb@jc4c98@for-each-with-index jc4c98@for-each-with-index) (set! jc4c9a@rpad (lambda (jc4d1b@str jc4d1c@pad jc4d1d@n) (let ((jc4d21@rest (- jc4d1d@n (string-length (format '"~a" jc4d1b@str))))) (let jc4d27@loop ((jc4d23@rest jc4d21@rest) (jc4d24@ret (format '"~a" jc4d1b@str))) (if (<= jc4d23@rest '0) jc4d24@ret (jc4d27@loop (- jc4d23@rest '1) (string-append jc4d24@ret jc4d1c@pad))))))) (set! jc4dfc@jc4c9a@rpad jc4c9a@rpad) (set! jc4c9c@condition-printer/p (lambda (jc4d29@e jc4d2a@port) (letrec* ((jc4d2e@max-condition-len (apply max (map (lambda (jc4d3f@c) (string-length (symbol->string (record-type-name (record-rtd jc4d3f@c))))) (simple-conditions jc4d29@e))))) (begin (display '" Condition components:\n" jc4d2a@port) (jc4c98@for-each-with-index (lambda (jc4d2f@i jc4d30@x) (let ((jc4d33@rtd (record-rtd jc4d30@x)) (jc4d34@fields-alist (jc4c9e@record->field-alist jc4d30@x))) (begin (format jc4d2a@port '" ~d. ~a" jc4d2f@i (jc4c9a@rpad (symbol->string (record-type-name jc4d33@rtd)) '" " jc4d2e@max-condition-len)) (if (null? jc4d34@fields-alist) (newline jc4d2a@port) (void)) (let jc4d3b@loop ((jc4d37@first '#t) (jc4d38@fields-alist jc4d34@fields-alist)) (if (null? jc4d38@fields-alist) '() (let ((jc4d3d@field (car jc4d38@fields-alist))) (begin (if (not jc4d37@first) (display (jc4c9a@rpad '"" '" " (+ '4 jc4d2e@max-condition-len)) jc4d2a@port) (void)) (display '"       " jc4d2a@port) (display (car jc4d3d@field) jc4d2a@port) (display '": " jc4d2a@port) (write (cdr jc4d3d@field) jc4d2a@port) (newline jc4d2a@port) (jc4d3b@loop '#f (cdr jc4d38@fields-alist))))))))) (simple-conditions jc4d29@e)))))) (set! jc4dfd@jc4c9c@condition-printer/p jc4c9c@condition-printer/p) (set! jc4c9e@record->field-alist (lambda (jc4d41@r) (letrec* ((jc4d44@ref (lambda (jc4d4f@rtd jc4d50@i jc4d51@x) (let ((jc4d55@val ((record-accessor jc4d4f@rtd jc4d50@i) jc4d51@x))) (if (symbol? jc4d55@val) (ungensym jc4d55@val) jc4d55@val))))) (let jc4d49@loop ((jc4d45@ret '()) (jc4d46@rtd (record-rtd jc4d41@r))) (if jc4d46@rtd (jc4d49@loop (append jc4d45@ret (jc4ca0@map-with-index (lambda (jc4d4b@i jc4d4c@field) (cons jc4d4c@field (jc4d44@ref jc4d46@rtd jc4d4b@i jc4d41@r))) (vector->list (record-type-field-names jc4d46@rtd)))) (record-type-parent jc4d46@rtd)) jc4d45@ret))))) (set! jc4dfe@jc4c9e@record->field-alist jc4c9e@record->field-alist) (set! jc4ca0@map-with-index (lambda (jc4d57@proc jc4d58@lst) (let jc4d61@loop ((jc4d5b@i '0) (jc4d5c@lst jc4d58@lst) (jc4d5d@ret '())) (if (null? jc4d5c@lst) (reverse jc4d5d@ret) (jc4d61@loop (+ jc4d5b@i '1) (cdr jc4d5c@lst) (cons (jc4d57@proc jc4d5b@i (car jc4d5c@lst)) jc4d5d@ret)))))) (set! jc4dff@jc4ca0@map-with-index jc4ca0@map-with-index) (set! jc4ca2@repl (lambda jc4d63@x (letrec* ((jc4d66@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (jc4d69@jc4d67) (lambda () (with-exception-handler (lambda (jc4d6b@e) ((call/cc (lambda (jc4d6d@jc4d68) (jc4d69@jc4d67 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? jc4d6b@e) (jc4c9c@condition-printer/p jc4d6b@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" jc4d6b@e))) (jc4d6d@jc4d68 (lambda () (raise-continuable jc4d6b@e)))))))))) (lambda () (let jc4d73@loop ((jc4d6f@line (get-line (current-input-port))) (jc4d70@accum '"")) (letrec* ((jc4d76@parentheses-ok? (lambda (jc4d81@text) (let jc4d89@loop ((jc4d83@chars (string->list jc4d81@text)) (jc4d84@p0 '0) (jc4d85@p1 '0)) (if (null? jc4d83@chars) (= '0 jc4d84@p0 jc4d85@p1) (let ((jc4d8b@t (car jc4d83@chars))) (if (memv jc4d8b@t '(#\()) (jc4d89@loop (cdr jc4d83@chars) (+ jc4d84@p0 '1) jc4d85@p1) (if (memv jc4d8b@t '(#\))) (jc4d89@loop (cdr jc4d83@chars) (- jc4d84@p0 '1) jc4d85@p1) (if (memv jc4d8b@t '(#\[)) (jc4d89@loop (cdr jc4d83@chars) jc4d84@p0 (+ jc4d85@p1 '1)) (if (memv jc4d8b@t '(#\])) (jc4d89@loop (cdr jc4d83@chars) jc4d84@p0 (- jc4d85@p1 '1)) (jc4d89@loop (cdr jc4d83@chars) jc4d84@p0 jc4d85@p1)))))))))) (jc4d78@eval-string-print (lambda (jc4d7b@text) (if (not (or (string=? '"\n" jc4d7b@text) (= '0 (string-length jc4d7b@text)))) (call-with-values (lambda () (jc4cb0@eval-top-level (call-with-port (open-string-input-port jc4d7b@text) read))) (lambda jc4d7d@out* (for-each (lambda (jc4d7f@out) (begin (write/ss jc4d7f@out) (newline))) jc4d7d@out*))) (void))))) (if (eof-object? jc4d6f@line) (begin (jc4d78@eval-string-print jc4d70@accum) (exit)) (let ((jc4d79@current (string-append jc4d70@accum jc4d6f@line))) (if (jc4d76@parentheses-ok? jc4d79@current) (jc4d78@eval-string-print jc4d79@current) (jc4d73@loop (get-line (current-input-port)) jc4d79@current)))))))))))) (newline) (jc4d66@rec))))) (jc4d66@rec)))) (set! jc4e00@jc4ca2@repl jc4ca2@repl) (set! jc4ca4@trace-printer (jc2a56@jc2934@make-parameter write)) (set! jc4e01@jc4ca4@trace-printer jc4ca4@trace-printer) (set! jc4ca6@command-line (jc2a56@jc2934@make-parameter (get-command-line))) (set! jc4e02@jc4ca6@command-line jc4ca6@command-line) (set! jc4ca8@local-library-path (lambda (jc4d8d@filename) (jc2d10@jc2b4c@library-path))) (set! jc4e03@jc4ca8@local-library-path jc4ca8@local-library-path) (set! jc4caa@load/args (lambda (jc4d8f@filename . jc4d91@args) (begin (apply jc4cba@load-r6rs-top-level jc4d8f@filename 'load jc4d91@args) (void)))) (set! jc4e04@jc4caa@load/args jc4caa@load/args) (set! jc4cac@load (lambda (jc4d93@filename) (begin (apply jc4cba@load-r6rs-top-level jc4d93@filename 'load (jc4ca6@command-line)) (void)))) (set! jc4e05@jc4cac@load jc4cac@load) (set! jc4cae@ironscheme-build (lambda () (jc4cac@load '"ironscheme-buildscript.ss"))) (set! jc4e06@jc4cae@ironscheme-build jc4cae@ironscheme-build) (set! jc4cb0@eval-top-level (lambda (jc4d95@x) (jc4c6d@jc31cd@eval jc4d95@x (jc4c84@jc31fb@interaction-environment)))) (set! jc4e07@jc4cb0@eval-top-level jc4cb0@eval-top-level) (set! jc4cb2@compile-system-libraries (lambda () (jc4cb0@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! jc4e08@jc4cb2@compile-system-libraries jc4cb2@compile-system-libraries) (set! jc4cb4@compile (lambda (jc4d97@filename) (jc4cba@load-r6rs-top-level jc4d97@filename 'compile))) (set! jc4e09@jc4cb4@compile jc4cb4@compile) (set! jc4cb6@compile->closure (lambda (jc4d99@filename) (jc4cba@load-r6rs-top-level jc4d99@filename 'closure))) (set! jc4e0a@jc4cb6@compile->closure jc4cb6@compile->closure) (set! jc4cb8@pre-compile-r6rs-file (lambda (jc4d9b@filename) (jc4cba@load-r6rs-top-level jc4d9b@filename 'compile))) (set! jc4e0b@jc4cb8@pre-compile-r6rs-file jc4cb8@pre-compile-r6rs-file) (set! jc4cba@load-r6rs-top-level (lambda (jc4d9d@filename jc4d9e@how . jc4da1@args) (begin (jc2d10@jc2b4c@library-path (jc4ca8@local-library-path jc4d9d@filename)) (let ((jc4da3@x* (with-input-from-file jc4d9d@filename (lambda () (let jc4da5@f () (let ((jc4da7@x (jc2a48@jc2918@read-annotated))) (if (eof-object? jc4da7@x) '() (cons jc4da7@x (jc4da5@f))))))))) (let ((jc4da9@t jc4d9e@how)) (if (memv jc4da9@t '(closure)) (jc4c83@jc31f9@pre-compile-r6rs-top-level jc4da3@x*) (if (memv jc4da9@t '(load)) (begin (jc4ca6@command-line (cons jc4d9d@filename (car jc4da1@args))) (jc2a57@jc2936@mosh-cache-dir (create-mosh-cache-dir)) (if (jc2a57@jc2936@mosh-cache-dir) (gensym-prefix-set! (jc4cc0@prefix-inc! (string-append (jc2a57@jc2936@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (jc4dab@file) ((call/cc (lambda (jc4daf@jc4dad) (lambda () (with-exception-handler (lambda (jc4db1@c) ((call/cc (lambda (jc4db3@jc4dae) (jc4daf@jc4dad (lambda () (if '#t '#t (jc4db3@jc4dae (lambda () (raise-continuable jc4db1@c)))))))))) (lambda () (delete-file (string-append (jc2a57@jc2936@mosh-cache-dir) '"/" jc4dab@file))))))))) (directory-list (jc2a57@jc2936@mosh-cache-dir))) (void)) (let ((jc4db5@compiled (jc4c82@jc31f7@compile-r6rs-top-level jc4da3@x*))) (begin (if (and (jc2a57@jc2936@mosh-cache-dir) (not (symbol-value '%disable-acc))) (jc2d14@jc2b54@serialize-all jc2a51@jc292a@serialize-library jc2aad@jc2a66@compile-core-expr) (void)) (jc4db5@compiled)))) (if (memv jc4da9@t '(compile)) (begin (jc4c82@jc31f7@compile-r6rs-top-level jc4da3@x*) (jc2d14@jc2b54@serialize-all jc2a51@jc292a@serialize-library jc2aad@jc2a66@compile-core-expr)) (if '#f '#f (void)))))))))) (set! jc4e0c@jc4cba@load-r6rs-top-level jc4cba@load-r6rs-top-level) (set! jc4cbc@load-r6rs-top-level-sexp (lambda (jc4db7@import-spec jc4db8@thunk) (let ((jc4dc3@jc4dbc jc2d10@jc2b4c@library-path) (jc4dc4@jc4dbe jc2a57@jc2936@mosh-cache-dir) (jc4dc5@jc4dc0 (jc4ca8@local-library-path '"")) (jc4dc6@jc4dc2 (create-mosh-cache-dir))) (let ((jc4dcb@swap (lambda () (begin (let ((jc4dcd@t (jc4dc3@jc4dbc))) (begin (jc4dc3@jc4dbc jc4dc5@jc4dc0) (set! jc4dc5@jc4dc0 jc4dcd@t))) (let ((jc4dcf@t (jc4dc4@jc4dbe))) (begin (jc4dc4@jc4dbe jc4dc6@jc4dc2) (set! jc4dc6@jc4dc2 jc4dcf@t))))))) (dynamic-wind jc4dcb@swap (lambda () (begin (if (jc2a57@jc2936@mosh-cache-dir) (gensym-prefix-set! (jc4cc0@prefix-inc! (string-append (jc2a57@jc2936@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((jc4dd5@jc4dd2 jc4ca6@command-line) (jc4dd6@jc4dd4 '())) (let ((jc4dd9@swap (lambda () (let ((jc4ddb@t (jc4dd5@jc4dd2))) (begin (jc4dd5@jc4dd2 jc4dd6@jc4dd4) (set! jc4dd6@jc4dd4 jc4ddb@t)))))) (dynamic-wind jc4dd9@swap (lambda () ((jc4c82@jc31f7@compile-r6rs-top-level (list (cons 'import jc4db7@import-spec) (list jc4db8@thunk))))) jc4dd9@swap))))) jc4dcb@swap))))) (set! jc4e0d@jc4cbc@load-r6rs-top-level-sexp jc4cbc@load-r6rs-top-level-sexp) (set! jc4cbe@prefix-inc (lambda (jc4ddd@prefix-string) (let ((jc4ddf@prefix (symbol->string jc4ddd@prefix-string))) (let ((jc4de1@len (string-length jc4ddf@prefix))) (let jc4de9@loop ((jc4de3@i (- jc4de1@len '1)) (jc4de4@carry? '#t) (jc4de5@accum '())) (if (< jc4de3@i '0) (string->symbol (list->string (if jc4de4@carry? (cons '#\a jc4de5@accum) jc4de5@accum))) (if jc4de4@carry? (let ((jc4deb@next-integer (+ '1 (char->integer (string-ref jc4ddf@prefix jc4de3@i))))) (if (= jc4deb@next-integer '123) (jc4de9@loop (- jc4de3@i '1) '#f (cons '#\A jc4de5@accum)) (if (= jc4deb@next-integer '91) (jc4de9@loop (- jc4de3@i '1) '#t (cons '#\a jc4de5@accum)) (jc4de9@loop (- jc4de3@i '1) '#f (cons (integer->char jc4deb@next-integer) jc4de5@accum))))) (jc4de9@loop (- jc4de3@i '1) '#f (cons (string-ref jc4ddf@prefix jc4de3@i) jc4de5@accum))))))))) (set! jc4e0e@jc4cbe@prefix-inc jc4cbe@prefix-inc) (set! jc4cc0@prefix-inc! (lambda (jc4ded@file) (begin (if (not (file-exists? jc4ded@file)) (call-with-output-file jc4ded@file (lambda (jc4def@port) (write 'd jc4def@port))) (void)) (let ((jc4df1@prefix (call-with-input-file jc4ded@file read))) (if (main-vm?) (let ((jc4df3@next-prefix (jc4cbe@prefix-inc jc4df1@prefix))) (begin (call-with-port (open-file-output-port jc4ded@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (jc4df5@port) (write jc4df3@next-prefix jc4df5@port))) jc4df1@prefix)) jc4df1@prefix))))) (set! jc4e0f@jc4cc0@prefix-inc! jc4cc0@prefix-inc!) (begin (jc2d15@jc2b56@current-precompiled-library-loader jc2a52@jc292c@load-serialized-library) (set-symbol-value! 'load jc4cac@load) (set-symbol-value! 'pre-compile-r6rs-file jc4cb8@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs jc4cb0@eval-top-level) (set-symbol-value! 'int-env-syms jc4c64@jc31bb@interaction-environment-symbols) (set-symbol-value! 'expanded2core jc2aac@jc2a64@expanded->core) (set-symbol-value! 'trace-printer jc4ca4@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (jc4cc1@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list jc4cc1@c))))) (jc4c96@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (jc4c96@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (jc4c94@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (jc4c94@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (jc4c94@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((jc4cc3@prefix (lambda (jc4cc5@ext jc4cc6@ls) (append (map (lambda (jc4cc9@x) (string-append jc4cc5@ext jc4cc9@x)) jc4cc6@ls) jc4cc6@ls)))) (jc2d11@jc2b4e@library-extensions (jc4cc3@prefix '".mosh" (jc2d11@jc2b4e@library-extensions)))) (current-exception-handler (lambda (jc4ccb@c) (begin (if (condition? jc4ccb@c) (jc4c9c@condition-printer/p jc4ccb@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" jc4ccb@c)) jc4ccb@c))) (if ((call/cc (lambda (jc4ccf@jc4ccd) (lambda () (with-exception-handler (lambda (jc4cd1@c) ((call/cc (lambda (jc4cd3@jc4cce) (jc4ccf@jc4ccd (lambda () (if '#t '#f (jc4cd3@jc4cce (lambda () (raise-continuable jc4cd1@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (jc4cbc@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (jc4ca6@command-line)) (let ((jc4cdd@jc4cd6 jc4ca6@command-line) (jc4cde@jc4cd8 jc2a57@jc2936@mosh-cache-dir) (jc4cdf@jc4cda '()) (jc4ce0@jc4cdc (create-mosh-cache-dir))) (let ((jc4ce5@swap (lambda () (begin (let ((jc4ce7@t (jc4cdd@jc4cd6))) (begin (jc4cdd@jc4cd6 jc4cdf@jc4cda) (set! jc4cdf@jc4cda jc4ce7@t))) (let ((jc4ce9@t (jc4cde@jc4cd8))) (begin (jc4cde@jc4cd8 jc4ce0@jc4cdc) (set! jc4ce0@jc4cdc jc4ce9@t))))))) (dynamic-wind jc4ce5@swap (lambda () (begin (if (jc2a57@jc2936@mosh-cache-dir) (gensym-prefix-set! (jc4cc0@prefix-inc! (string-append (jc2a57@jc2936@mosh-cache-dir) '"/prefix.txt"))) (void)) (jc4ca2@repl))) jc4ce5@swap))) (begin (jc2d10@jc2b4c@library-path (jc4ca8@local-library-path (car (jc4ca6@command-line)))) (set! jc4c92@x* (with-input-from-file (car (jc4ca6@command-line)) (lambda () (let jc4ceb@f () (let ((jc4ced@x (jc2a48@jc2918@read-annotated))) (if (eof-object? jc4ced@x) '() (cons jc4ced@x (jc4ceb@f)))))))) (jc4ca6@command-line (cons (car (jc4ca6@command-line)) (cdr (jc4ca6@command-line)))) (jc2a57@jc2936@mosh-cache-dir (create-mosh-cache-dir)) (if (jc2a57@jc2936@mosh-cache-dir) (gensym-prefix-set! (jc4cc0@prefix-inc! (string-append (jc2a57@jc2936@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (jc4cef@file) ((call/cc (lambda (jc4cf3@jc4cf1) (lambda () (with-exception-handler (lambda (jc4cf5@c) ((call/cc (lambda (jc4cf7@jc4cf2) (jc4cf3@jc4cf1 (lambda () (if '#t '#t (jc4cf7@jc4cf2 (lambda () (raise-continuable jc4cf5@c)))))))))) (lambda () (delete-file (string-append (jc2a57@jc2936@mosh-cache-dir) '"/" jc4cef@file))))))))) (directory-list (jc2a57@jc2936@mosh-cache-dir))) (void)) (let ((jc4cf9@compiled (jc4c82@jc31f7@compile-r6rs-top-level jc4c92@x*))) (begin (if (and (jc2a57@jc2936@mosh-cache-dir) (not (symbol-value '%disable-acc))) (jc2d14@jc2b54@serialize-all jc2a51@jc292a@serialize-library jc2aad@jc2a66@compile-core-expr) (void)) (jc4cf9@compiled))))))))
