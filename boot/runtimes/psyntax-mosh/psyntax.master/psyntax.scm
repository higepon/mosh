;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (set! gb2915@library-file-path->cache-path (unspecified)) (set! gb2917@read-annotated (unspecified)) (set! gb2919@annotation-stripped (unspecified)) (set! gb291b@annotation? (unspecified)) (set! gb291d@annotation-source (unspecified)) (set! gb291f@annotation-expression (unspecified)) (set! gb2921@scm->fasl (unspecified)) (set! gb2923@fasl-save (unspecified)) (set! gb2925@fasl-load (unspecified)) (set! gb2927@verbose? (unspecified)) (set! gb2929@serialize-library (unspecified)) (set! gb292b@load-serialized-library (unspecified)) (set! gb292d@make-record-printer (unspecified)) (set! gb292f@compile-core (unspecified)) (set! gb2931@read-library-source-file (unspecified)) (set! gb2933@make-parameter (unspecified)) (set! gb2935@mosh-cache-dir (unspecified)) (set! gb29cb@file-options-spec (unspecified)) (set! gb2915@library-file-path->cache-path (lambda (gb29cc@x) (call-with-values (lambda () (open-string-output-port)) (lambda (gb29d2@gb29cf gb29d3@gb29d1) (let ((gb29d6@extract gb29d3@gb29d1) (gb29d7@p gb29d2@gb29cf)) (letrec* ((gb29db@display-hex (lambda (gb29e4@n) (if (<= '0 gb29e4@n '9) (display gb29e4@n gb29d7@p) (display (integer->char (+ (char->integer '#\a) (- gb29e4@n '10))) gb29d7@p))))) (begin (let gb29de@f ((gb29dc@ls (string-split gb29cc@x '#\/))) (if (not (null? gb29dc@ls)) (begin (display '"_" gb29d7@p) (for-each (lambda (gb29e0@c) (if (or (char<=? '#\a gb29e0@c '#\z) (char<=? '#\A gb29e0@c '#\Z) (char<=? '#\0 gb29e0@c '#\9) (memv gb29e0@c '(#\- #\. #\_ #\~))) (display gb29e0@c gb29d7@p) (begin (display '"%" gb29d7@p) (let ((gb29e2@n (char->integer gb29e0@c))) (begin (gb29db@display-hex (quotient gb29e2@n '16)) (gb29db@display-hex (remainder gb29e2@n '16))))))) (string->list (car gb29dc@ls))) (gb29de@f (cdr gb29dc@ls))) (void))) (gb29d6@extract)))))))) (set! gb2a46@gb2915@library-file-path->cache-path gb2915@library-file-path->cache-path) (set! gb2917@read-annotated read) (set! gb2a47@gb2917@read-annotated gb2917@read-annotated) (set! gb2919@annotation-stripped (lambda (gb29e6@x) (if (pair? gb29e6@x) (cons (gb2919@annotation-stripped (car gb29e6@x)) (gb2919@annotation-stripped (cdr gb29e6@x))) (if (procedure? gb29e6@x) (set-source-info! gb29e6@x '#f) gb29e6@x)))) (set! gb2a48@gb2919@annotation-stripped gb2919@annotation-stripped) (set! gb291b@annotation? (lambda (gb29e8@x) (or (and (annotated-pair? gb29e8@x) (source-info gb29e8@x)) (and (procedure? gb29e8@x) (source-info gb29e8@x))))) (set! gb2a49@gb291b@annotation? gb291b@annotation?) (set! gb291d@annotation-source (lambda (gb29ea@x) (source-info gb29ea@x))) (set! gb2a4a@gb291d@annotation-source gb291d@annotation-source) (set! gb291f@annotation-expression (lambda (gb29ec@x) (if (annotated-pair? gb29ec@x) (cons (car gb29ec@x) (cdr gb29ec@x)) (if (procedure? gb29ec@x) (set-source-info! gb29ec@x '#f) gb29ec@x)))) (set! gb2a4b@gb291f@annotation-expression gb291f@annotation-expression) (set! gb2921@scm->fasl (lambda (gb29ee@filename) (string-append (gb2935@mosh-cache-dir) '"/" (gb2915@library-file-path->cache-path gb29ee@filename) '".mosh-fasl"))) (set! gb2a4c@gb2921@scm->fasl gb2921@scm->fasl) (set! gb2923@fasl-save (lambda (gb29f0@filename gb29f1@obj) (call-with-port (open-file-output-port gb29f0@filename) (lambda (gb29f4@port) ((symbol-value 'fasl-write!) gb29f1@obj gb29f4@port))))) (set! gb2a4d@gb2923@fasl-save gb2923@fasl-save) (set! gb2925@fasl-load (lambda (gb29f6@filename) (call-with-port (open-file-input-port gb29f6@filename) (symbol-value 'fasl-read!)))) (set! gb2a4e@gb2925@fasl-load gb2925@fasl-load) (set! gb2927@verbose? (symbol-value '%verbose)) (set! gb2a4f@gb2927@verbose? gb2927@verbose?) (set! gb2929@serialize-library (lambda (gb29f8@filename gb29f9@obj) (begin (if gb2927@verbose? (format (current-error-port) '"serialize-library ~a\n..." gb29f8@filename) (void)) (let ((gb29fc@expanded2core (symbol-value 'expanded2core))) (let ((gb29fe@compile (symbol-value 'compile-w/o-halt))) (let ((gb2a00@code gb29f9@obj)) (let ((gb2a02@pivot (cddddr (cddddr gb2a00@code)))) (let ((gb2a04@visit (gb29fe@compile (gb29fc@expanded2core (car gb2a02@pivot))))) (begin (set-car! gb2a02@pivot gb2a04@visit) (let ((gb2a06@pivot (cdr gb2a02@pivot))) (let ((gb2a08@invoke (gb29fe@compile (gb29fc@expanded2core (car gb2a06@pivot))))) (set-car! gb2a06@pivot gb2a08@invoke))))))))) (let ((gb2a0a@fasl-file (gb2921@scm->fasl gb29f8@filename))) (begin (if (file-exists? gb2a0a@fasl-file) (delete-file gb2a0a@fasl-file) (void)) ((call/cc (lambda (gb2a0e@gb2a0c) (lambda () (with-exception-handler (lambda (gb2a10@c) ((call/cc (lambda (gb2a12@gb2a0d) (gb2a0e@gb2a0c (lambda () (if '#t (begin (if gb2927@verbose? (format (current-error-port) '"Warning:serialize-library failed ~a\n" gb29f8@filename) (void)) (if (file-exists? gb2a0a@fasl-file) (delete-file gb2a0a@fasl-file) (void)) '#f) (gb2a12@gb2a0d (lambda () (raise-continuable gb2a10@c)))))))))) (lambda () (gb2923@fasl-save gb2a0a@fasl-file gb29f9@obj)))))))))))) (set! gb2a50@gb2929@serialize-library gb2929@serialize-library) (set! gb292b@load-serialized-library (lambda (gb2a14@filename gb2a15@obj) (and (gb2935@mosh-cache-dir) (let ((gb2a18@fasl-file (gb2921@scm->fasl gb2a14@filename))) (if (and (file-exists? gb2a18@fasl-file) ((symbol-value 'file-newer?) gb2a18@fasl-file gb2a14@filename)) (let ((gb2a1a@expanded2core (symbol-value 'expanded2core))) (let ((gb2a1c@eval-compiled-core (symbol-value 'eval-compiled!))) (let ((gb2a1e@code (gb2925@fasl-load gb2a18@fasl-file))) (let ((gb2a20@pivot (cddddr (cddddr gb2a1e@code)))) (let ((gb2a22@visit (car gb2a20@pivot))) (let ((gb2a24@visit-proc (lambda () (gb2a1c@eval-compiled-core gb2a22@visit)))) (begin (set-car! gb2a20@pivot gb2a24@visit-proc) (let ((gb2a26@pivot (cdr gb2a20@pivot))) (let ((gb2a28@invoke (car gb2a26@pivot))) (begin (set-car! gb2a26@pivot (lambda () (gb2a1c@eval-compiled-core gb2a28@invoke))) (apply gb2a15@obj gb2a1e@code))))))))))) '#f))))) (set! gb2a51@gb292b@load-serialized-library gb292b@load-serialized-library) (set! gb292d@make-record-printer (lambda (gb2a2a@name gb2a2b@printer) (lambda gb2a2e@x (begin (display '"record printer") (for-each display gb2a2e@x))))) (set! gb2a52@gb292d@make-record-printer gb292d@make-record-printer) (set! gb292f@compile-core (lambda gb2a30@x (apply error 'comile-core '"not implementated" gb2a30@x))) (set! gb2a53@gb292f@compile-core gb292f@compile-core) (set! gb2931@read-library-source-file (lambda (gb2a32@file-name) (with-input-from-file gb2a32@file-name gb2917@read-annotated))) (set! gb2a54@gb2931@read-library-source-file gb2931@read-library-source-file) (set! gb2933@make-parameter (lambda gb2a42 (let ((gb2a43 (length gb2a42))) (if (= gb2a43 '1) (apply (lambda (gb2a34@x) (gb2933@make-parameter gb2a34@x (lambda (gb2a36@x) gb2a36@x))) gb2a42) (if (= gb2a43 '2) (apply (lambda (gb2a38@x gb2a39@fender) (let ((gb2a3c@x (gb2a39@fender gb2a38@x))) (lambda gb2a40 (let ((gb2a41 (length gb2a40))) (if (= gb2a41 '0) (apply (lambda () gb2a3c@x) gb2a40) (if (= gb2a41 '1) (apply (lambda (gb2a3e@v) (set! gb2a3c@x (gb2a39@fender gb2a3e@v))) gb2a40) (error 'apply '"invalid arg count"))))))) gb2a42) (error 'apply '"invalid arg count")))))) (set! gb2a55@gb2933@make-parameter gb2933@make-parameter) (set! gb2935@mosh-cache-dir (gb2933@make-parameter '#f)) (set! gb2a56@gb2935@mosh-cache-dir gb2935@mosh-cache-dir) (set! gb29cb@file-options-spec (lambda (gb2a44@x) gb2a44@x)) (set! gb2a57@gb29cb@file-options-spec gb29cb@file-options-spec) (void))
(begin (set! gb2a5d@current-primitive-locations (unspecified)) (set! gb2a5f@mutable? (unspecified)) (set! gb2a61@rewriter (unspecified)) (set! gb2a63@expanded->core (unspecified)) (set! gb2a65@compile-core-expr (unspecified)) (set! gb2a67@pretty-print (unspecified)) (set! gb2a69@compile-core-expr-to-port (unspecified)) (set! gb2a5d@current-primitive-locations (gb2a55@gb2933@make-parameter (lambda (gb2a6a@x) '#f) (lambda (gb2a6c@p) gb2a6c@p))) (set! gb2aa8@gb2a5d@current-primitive-locations gb2a5d@current-primitive-locations) (set! gb2a5f@mutable? (lambda (gb2a6e@x) (or (pair? gb2a6e@x) (vector? gb2a6e@x) (hashtable? gb2a6e@x)))) (set! gb2aa9@gb2a5f@mutable? gb2a5f@mutable?) (set! gb2a61@rewriter (lambda (gb2a70@quote-hack?) (letrec* ((gb2a73@f (lambda (gb2a74@x) (if (pair? gb2a74@x) (let ((gb2a76@t (car gb2a74@x))) (if (memv gb2a76@t '(quote)) (if (and gb2a70@quote-hack? (gb2a5f@mutable? (cadr gb2a74@x))) (let ((gb2a78@g (gensym))) (begin (set-symbol-value! gb2a78@g (cadr gb2a74@x)) gb2a78@g)) gb2a74@x) (if (memv gb2a76@t '(case-lambda)) (cons 'case-lambda (map (lambda (gb2a7a@x) (cons (car gb2a7a@x) (map gb2a73@f (cdr gb2a7a@x)))) (cdr gb2a74@x))) (if (memv gb2a76@t '(lambda)) (cons* 'lambda (cadr gb2a74@x) (map gb2a73@f (cddr gb2a74@x))) (if (memv gb2a76@t '(letrec)) (let ((gb2a7c@bindings (cadr gb2a74@x)) (gb2a7d@body* (cddr gb2a74@x))) (let ((gb2a80@lhs* (map car gb2a7c@bindings)) (gb2a81@rhs* (map cadr gb2a7c@bindings))) (cons* 'letrec (map list gb2a80@lhs* (map gb2a73@f gb2a81@rhs*)) (map gb2a73@f gb2a7d@body*)))) (if (memv gb2a76@t '(letrec*)) (let ((gb2a84@bindings (cadr gb2a74@x)) (gb2a85@body* (cddr gb2a74@x))) (let ((gb2a88@lhs* (map car gb2a84@bindings)) (gb2a89@rhs* (map cadr gb2a84@bindings))) (cons* 'letrec* (map list gb2a88@lhs* (map gb2a73@f gb2a89@rhs*)) (map gb2a73@f gb2a85@body*)))) (if (memv gb2a76@t '(library-letrec*)) (let ((gb2a8c@name (cadr gb2a74@x)) (gb2a8d@x (cdr gb2a74@x))) (let ((gb2a90@bindings (cadr gb2a8d@x)) (gb2a91@body* (cddr gb2a8d@x))) (let ((gb2a94@lhs* (map car gb2a90@bindings)) (gb2a95@lhs** (map cadr gb2a90@bindings)) (gb2a96@rhs* (map caddr gb2a90@bindings))) (cons* 'library-letrec* gb2a8c@name (map list gb2a94@lhs* gb2a95@lhs** (map gb2a73@f gb2a96@rhs*)) (map gb2a73@f gb2a91@body*))))) (if (memv gb2a76@t '(begin)) (cons 'begin (map gb2a73@f (cdr gb2a74@x))) (if (memv gb2a76@t '(set!)) (list 'set! (cadr gb2a74@x) (gb2a73@f (caddr gb2a74@x))) (if (memv gb2a76@t '(primitive)) (let ((gb2a9a@op (cadr gb2a74@x))) (let ((gb2a9c@t ((gb2a5d@current-primitive-locations) gb2a9a@op))) (if gb2a9c@t ((lambda (gb2a9e@loc) gb2a9e@loc) gb2a9c@t) gb2a9a@op))) (if (memv gb2a76@t '(define)) gb2a74@x (if (list? gb2a74@x) (map gb2a73@f gb2a74@x) (error 'rewrite '"invalid form ~s ~s" gb2a74@x (list? gb2a74@x)))))))))))))) gb2a74@x)))) gb2a73@f))) (set! gb2aaa@gb2a61@rewriter gb2a61@rewriter) (set! gb2a63@expanded->core (lambda (gb2aa0@x) ((gb2a61@rewriter '#f) gb2aa0@x))) (set! gb2aab@gb2a63@expanded->core gb2a63@expanded->core) (set! gb2a65@compile-core-expr (lambda (gb2aa2@x) ((gb2a61@rewriter '#f) gb2aa2@x))) (set! gb2aac@gb2a65@compile-core-expr gb2a65@compile-core-expr) (set! gb2a67@pretty-print write) (set! gb2aad@gb2a67@pretty-print gb2a67@pretty-print) (set! gb2a69@compile-core-expr-to-port (lambda (gb2aa4@x gb2aa5@p) (gb2a67@pretty-print ((gb2a61@rewriter '#f) gb2aa4@x) gb2aa5@p))) (set! gb2aae@gb2a69@compile-core-expr-to-port gb2a69@compile-core-expr-to-port) (void))
(begin (void))
(begin (set! gb2afd@make-collection (unspecified)) (set! gb2aff@current-library-collection (unspecified)) (set! gb2b01@rp (unspecified)) (set! gb2b0b@library? (unspecified)) (set! gb2b0d@library-id (unspecified)) (set! gb2b0f@set-library-id! (unspecified)) (set! gb2b11@library-name (unspecified)) (set! gb2b13@set-library-name! (unspecified)) (set! gb2b15@library-version (unspecified)) (set! gb2b17@set-library-version! (unspecified)) (set! gb2b19@library-imp* (unspecified)) (set! gb2b1b@set-library-imp*! (unspecified)) (set! gb2b1d@library-vis* (unspecified)) (set! gb2b1f@set-library-vis*! (unspecified)) (set! gb2b21@library-inv* (unspecified)) (set! gb2b23@set-library-inv*! (unspecified)) (set! gb2b25@library-subst (unspecified)) (set! gb2b27@set-library-subst! (unspecified)) (set! gb2b29@library-env (unspecified)) (set! gb2b2b@set-library-env! (unspecified)) (set! gb2b2d@library-visit-state (unspecified)) (set! gb2b2f@set-library-visit-state! (unspecified)) (set! gb2b31@library-invoke-state (unspecified)) (set! gb2b33@set-library-invoke-state! (unspecified)) (set! gb2b35@library-visit-code (unspecified)) (set! gb2b37@set-library-visit-code! (unspecified)) (set! gb2b39@library-invoke-code (unspecified)) (set! gb2b3b@set-library-invoke-code! (unspecified)) (set! gb2b3d@library-visible? (unspecified)) (set! gb2b3f@set-library-visible?! (unspecified)) (set! gb2b41@library-source-file-name (unspecified)) (set! gb2b43@set-library-source-file-name! (unspecified)) (set! gb2b45@dummy (unspecified)) (set! gb2b47@find-dependencies (unspecified)) (set! gb2b49@find-library-by (unspecified)) (set! gb2b4b@library-path (unspecified)) (set! gb2b4d@library-extensions (unspecified)) (set! gb2b4f@library-name->file-name (unspecified)) (set! gb2b51@file-locator (unspecified)) (set! gb2b53@serialize-all (unspecified)) (set! gb2b55@current-precompiled-library-loader (unspecified)) (set! gb2b57@try-load-from-file (unspecified)) (set! gb2b59@library-loader (unspecified)) (set! gb2b5b@current-library-expander (unspecified)) (set! gb2b5d@external-pending-libraries (unspecified)) (set! gb2b5f@find-external-library (unspecified)) (set! gb2b61@find-library-by-name (unspecified)) (set! gb2b63@library-exists? (unspecified)) (set! gb2b65@find-library-by-spec/die (unspecified)) (set! gb2b67@label->binding-table (unspecified)) (set! gb2b69@install-library-record (unspecified)) (set! gb2b6b@install-library (unspecified)) (set! gb2b6d@imported-label->binding (unspecified)) (set! gb2b6f@invoke-library (unspecified)) (set! gb2b71@visit-library (unspecified)) (set! gb2b73@invoke-library-by-spec (unspecified)) (set! gb2b75@installed-libraries (unspecified)) (set! gb2b77@library-spec (unspecified)) (set! gb2afd@make-collection (lambda () (let ((gb2b78@set '())) (letrec* ((gb2b7b@set-cons (lambda (gb2b80@x gb2b81@ls) (if (memq gb2b80@x gb2b81@ls) gb2b81@ls (cons gb2b80@x gb2b81@ls))))) (lambda gb2b7e (let ((gb2b7f (length gb2b7e))) (if (= gb2b7f '0) (apply (lambda () gb2b78@set) gb2b7e) (if (= gb2b7f '1) (apply (lambda (gb2b7c@x) (set! gb2b78@set (gb2b7b@set-cons gb2b7c@x gb2b78@set))) gb2b7e) (error 'apply '"invalid arg count"))))))))) (set! gb2cec@gb2afd@make-collection gb2afd@make-collection) (set! gb2aff@current-library-collection (gb2a55@gb2933@make-parameter (gb2afd@make-collection) (lambda (gb2b84@x) (begin (if (not (procedure? gb2b84@x)) (assertion-violation 'current-library-collection '"not a procedure" gb2b84@x) (void)) gb2b84@x)))) (set! gb2ced@gb2aff@current-library-collection gb2aff@current-library-collection) (set! gb2b01@rp (gb2a52@gb292d@make-record-printer 'library (lambda (gb2b86@x gb2b87@p gb2b88@wr) (begin (if (not (gb2b0b@library? gb2b86@x)) (assertion-violation 'record-type-printer '"not a library") (void)) (display (format '"#<library ~s>" (if (null? (gb2b15@library-version gb2b86@x)) (gb2b11@library-name gb2b86@x) (append (gb2b11@library-name gb2b86@x) (list (gb2b15@library-version gb2b86@x))))) gb2b87@p))))) (set! gb2cee@gb2b01@rp gb2b01@rp) (set! gb2b0b@library? (lambda (gb2b8c@x) (and (simple-struct? gb2b8c@x) (eq? (simple-struct-name gb2b8c@x) 'library)))) (set! gb2cef@gb2b0b@library? gb2b0b@library?) (set! gb2b0d@library-id (lambda (gb2b8e@x) (simple-struct-ref gb2b8e@x '0))) (set! gb2cf0@gb2b0d@library-id gb2b0d@library-id) (set! gb2b0f@set-library-id! (lambda (gb2b90@x gb2b91@val) (simple-struct-set! gb2b90@x '0 gb2b91@val))) (set! gb2cf1@gb2b0f@set-library-id! gb2b0f@set-library-id!) (set! gb2b11@library-name (lambda (gb2b94@x) (simple-struct-ref gb2b94@x '1))) (set! gb2cf2@gb2b11@library-name gb2b11@library-name) (set! gb2b13@set-library-name! (lambda (gb2b96@x gb2b97@val) (simple-struct-set! gb2b96@x '1 gb2b97@val))) (set! gb2cf3@gb2b13@set-library-name! gb2b13@set-library-name!) (set! gb2b15@library-version (lambda (gb2b9a@x) (simple-struct-ref gb2b9a@x '2))) (set! gb2cf4@gb2b15@library-version gb2b15@library-version) (set! gb2b17@set-library-version! (lambda (gb2b9c@x gb2b9d@val) (simple-struct-set! gb2b9c@x '2 gb2b9d@val))) (set! gb2cf5@gb2b17@set-library-version! gb2b17@set-library-version!) (set! gb2b19@library-imp* (lambda (gb2ba0@x) (simple-struct-ref gb2ba0@x '3))) (set! gb2cf6@gb2b19@library-imp* gb2b19@library-imp*) (set! gb2b1b@set-library-imp*! (lambda (gb2ba2@x gb2ba3@val) (simple-struct-set! gb2ba2@x '3 gb2ba3@val))) (set! gb2cf7@gb2b1b@set-library-imp*! gb2b1b@set-library-imp*!) (set! gb2b1d@library-vis* (lambda (gb2ba6@x) (simple-struct-ref gb2ba6@x '4))) (set! gb2cf8@gb2b1d@library-vis* gb2b1d@library-vis*) (set! gb2b1f@set-library-vis*! (lambda (gb2ba8@x gb2ba9@val) (simple-struct-set! gb2ba8@x '4 gb2ba9@val))) (set! gb2cf9@gb2b1f@set-library-vis*! gb2b1f@set-library-vis*!) (set! gb2b21@library-inv* (lambda (gb2bac@x) (simple-struct-ref gb2bac@x '5))) (set! gb2cfa@gb2b21@library-inv* gb2b21@library-inv*) (set! gb2b23@set-library-inv*! (lambda (gb2bae@x gb2baf@val) (simple-struct-set! gb2bae@x '5 gb2baf@val))) (set! gb2cfb@gb2b23@set-library-inv*! gb2b23@set-library-inv*!) (set! gb2b25@library-subst (lambda (gb2bb2@x) (simple-struct-ref gb2bb2@x '6))) (set! gb2cfc@gb2b25@library-subst gb2b25@library-subst) (set! gb2b27@set-library-subst! (lambda (gb2bb4@x gb2bb5@val) (simple-struct-set! gb2bb4@x '6 gb2bb5@val))) (set! gb2cfd@gb2b27@set-library-subst! gb2b27@set-library-subst!) (set! gb2b29@library-env (lambda (gb2bb8@x) (simple-struct-ref gb2bb8@x '7))) (set! gb2cfe@gb2b29@library-env gb2b29@library-env) (set! gb2b2b@set-library-env! (lambda (gb2bba@x gb2bbb@val) (simple-struct-set! gb2bba@x '7 gb2bbb@val))) (set! gb2cff@gb2b2b@set-library-env! gb2b2b@set-library-env!) (set! gb2b2d@library-visit-state (lambda (gb2bbe@x) (simple-struct-ref gb2bbe@x '8))) (set! gb2d00@gb2b2d@library-visit-state gb2b2d@library-visit-state) (set! gb2b2f@set-library-visit-state! (lambda (gb2bc0@x gb2bc1@val) (simple-struct-set! gb2bc0@x '8 gb2bc1@val))) (set! gb2d01@gb2b2f@set-library-visit-state! gb2b2f@set-library-visit-state!) (set! gb2b31@library-invoke-state (lambda (gb2bc4@x) (simple-struct-ref gb2bc4@x '9))) (set! gb2d02@gb2b31@library-invoke-state gb2b31@library-invoke-state) (set! gb2b33@set-library-invoke-state! (lambda (gb2bc6@x gb2bc7@val) (simple-struct-set! gb2bc6@x '9 gb2bc7@val))) (set! gb2d03@gb2b33@set-library-invoke-state! gb2b33@set-library-invoke-state!) (set! gb2b35@library-visit-code (lambda (gb2bca@x) (simple-struct-ref gb2bca@x '10))) (set! gb2d04@gb2b35@library-visit-code gb2b35@library-visit-code) (set! gb2b37@set-library-visit-code! (lambda (gb2bcc@x gb2bcd@val) (simple-struct-set! gb2bcc@x '10 gb2bcd@val))) (set! gb2d05@gb2b37@set-library-visit-code! gb2b37@set-library-visit-code!) (set! gb2b39@library-invoke-code (lambda (gb2bd0@x) (simple-struct-ref gb2bd0@x '11))) (set! gb2d06@gb2b39@library-invoke-code gb2b39@library-invoke-code) (set! gb2b3b@set-library-invoke-code! (lambda (gb2bd2@x gb2bd3@val) (simple-struct-set! gb2bd2@x '11 gb2bd3@val))) (set! gb2d07@gb2b3b@set-library-invoke-code! gb2b3b@set-library-invoke-code!) (set! gb2b3d@library-visible? (lambda (gb2bd6@x) (simple-struct-ref gb2bd6@x '12))) (set! gb2d08@gb2b3d@library-visible? gb2b3d@library-visible?) (set! gb2b3f@set-library-visible?! (lambda (gb2bd8@x gb2bd9@val) (simple-struct-set! gb2bd8@x '12 gb2bd9@val))) (set! gb2d09@gb2b3f@set-library-visible?! gb2b3f@set-library-visible?!) (set! gb2b41@library-source-file-name (lambda (gb2bdc@x) (simple-struct-ref gb2bdc@x '13))) (set! gb2d0a@gb2b41@library-source-file-name gb2b41@library-source-file-name) (set! gb2b43@set-library-source-file-name! (lambda (gb2bde@x gb2bdf@val) (simple-struct-set! gb2bde@x '13 gb2bdf@val))) (set! gb2d0b@gb2b43@set-library-source-file-name! gb2b43@set-library-source-file-name!) (set! gb2b45@dummy '3) (set! gb2d0c@gb2b45@dummy gb2b45@dummy) (set! gb2b47@find-dependencies (lambda (gb2be2@ls) (if (null? gb2be2@ls) '() (assertion-violation 'find-dependencies '"cannot handle deps yet")))) (set! gb2d0d@gb2b47@find-dependencies gb2b47@find-dependencies) (set! gb2b49@find-library-by (lambda (gb2be4@pred) (let gb2be8@f ((gb2be6@ls ((gb2aff@current-library-collection)))) (if (null? gb2be6@ls) '#f (if (gb2be4@pred (car gb2be6@ls)) (car gb2be6@ls) (gb2be8@f (cdr gb2be6@ls))))))) (set! gb2d0e@gb2b49@find-library-by gb2b49@find-library-by) (set! gb2b4b@library-path (gb2a55@gb2933@make-parameter '(".") (lambda (gb2bea@x) (if (and (list? gb2bea@x) (for-all string? gb2bea@x)) (map (lambda (gb2bec@x) gb2bec@x) gb2bea@x) (assertion-violation 'library-path '"not a list of strings" gb2bea@x))))) (set! gb2d0f@gb2b4b@library-path gb2b4b@library-path) (set! gb2b4d@library-extensions (gb2a55@gb2933@make-parameter '(".sls" ".ss" ".scm") (lambda (gb2bee@x) (if (and (list? gb2bee@x) (for-all string? gb2bee@x)) (map (lambda (gb2bf0@x) gb2bf0@x) gb2bee@x) (assertion-violation 'library-extensions '"not a list of strings" gb2bee@x))))) (set! gb2d10@gb2b4d@library-extensions gb2b4d@library-extensions) (set! gb2b4f@library-name->file-name (lambda (gb2bf2@x) (call-with-values (lambda () (open-string-output-port)) (lambda (gb2bf8@gb2bf5 gb2bf9@gb2bf7) (let ((gb2bfc@extract gb2bf9@gb2bf7) (gb2bfd@p gb2bf8@gb2bf5)) (letrec* ((gb2c01@display-hex (lambda (gb2c0a@n) (if (<= '0 gb2c0a@n '9) (display gb2c0a@n gb2bfd@p) (display (integer->char (+ (char->integer '#\a) (- gb2c0a@n '10))) gb2bfd@p))))) (begin (let gb2c04@f ((gb2c02@ls gb2bf2@x)) (if (not (null? gb2c02@ls)) (begin (display '"/" gb2bfd@p) (for-each (lambda (gb2c06@c) (if (or (char<=? '#\a gb2c06@c '#\z) (char<=? '#\A gb2c06@c '#\Z) (char<=? '#\0 gb2c06@c '#\9) (memv gb2c06@c '(#\- #\. #\_ #\~))) (display gb2c06@c gb2bfd@p) (begin (display '"%" gb2bfd@p) (let ((gb2c08@n (char->integer gb2c06@c))) (begin (gb2c01@display-hex (quotient gb2c08@n '16)) (gb2c01@display-hex (remainder gb2c08@n '16))))))) (string->list (symbol->string (car gb2c02@ls)))) (gb2c04@f (cdr gb2c02@ls))) (void))) (gb2bfc@extract)))))))) (set! gb2d11@gb2b4f@library-name->file-name gb2b4f@library-name->file-name) (set! gb2b51@file-locator (gb2a55@gb2933@make-parameter (lambda (gb2c0c@x) (let ((gb2c0e@str (gb2b4f@library-name->file-name gb2c0c@x))) (let gb2c16@f ((gb2c10@ls (gb2b4b@library-path)) (gb2c11@exts (gb2b4d@library-extensions)) (gb2c12@failed-list '())) (if (null? gb2c10@ls) (letrec* ((gb2c20@gb2c1b (make-record-type-descriptor '&library-resolution &condition-rtd 'gb2c1e '#f '#f '#((immutable library) (immutable files)))) (gb2c22@gb2c1d '#f) (gb2c24@gb2c1c (make-record-constructor-descriptor gb2c20@gb2c1b &condition-rcd gb2c22@gb2c1d)) (gb2c27@gb2c1a (record-predicate gb2c20@gb2c1b)) (gb2c29@make-library-resolution-condition (record-constructor gb2c24@gb2c1c)) (gb2c2b@gb2c18 (record-accessor gb2c20@gb2c1b '0)) (gb2c2d@gb2c19 (record-accessor gb2c20@gb2c1b '1)) (gb2c2f@library-resolution-condition? (condition-predicate gb2c20@gb2c1b)) (gb2c31@condition-library (condition-accessor gb2c20@gb2c1b gb2c2b@gb2c18)) (gb2c33@condition-files (condition-accessor gb2c20@gb2c1b gb2c2d@gb2c19))) (raise (condition (make-error) (make-who-condition 'expander) (make-message-condition '"cannot locate library in library-path") (gb2c29@make-library-resolution-condition gb2c0c@x (reverse gb2c12@failed-list))))) (if (null? gb2c11@exts) (gb2c16@f (cdr gb2c10@ls) (gb2b4d@library-extensions) gb2c12@failed-list) (let ((gb2c34@name (string-append (car gb2c10@ls) gb2c0e@str (car gb2c11@exts)))) (if (file-exists? gb2c34@name) gb2c34@name (gb2c16@f gb2c10@ls (cdr gb2c11@exts) (cons gb2c34@name gb2c12@failed-list))))))))) (lambda (gb2c36@f) (if (procedure? gb2c36@f) gb2c36@f (assertion-violation 'file-locator '"not a procedure" gb2c36@f))))) (set! gb2d12@gb2b51@file-locator gb2b51@file-locator) (set! gb2b53@serialize-all (lambda (gb2c38@serialize gb2c39@compile) (letrec* ((gb2c3d@library-desc (lambda (gb2c40@x) (list (gb2b0d@library-id gb2c40@x) (gb2b11@library-name gb2c40@x))))) (for-each (lambda (gb2c3e@x) (if (gb2b41@library-source-file-name gb2c3e@x) (gb2c38@serialize (gb2b41@library-source-file-name gb2c3e@x) (list (gb2b0d@library-id gb2c3e@x) (gb2b11@library-name gb2c3e@x) (gb2b15@library-version gb2c3e@x) (map gb2c3d@library-desc (gb2b19@library-imp* gb2c3e@x)) (map gb2c3d@library-desc (gb2b1d@library-vis* gb2c3e@x)) (map gb2c3d@library-desc (gb2b21@library-inv* gb2c3e@x)) (gb2b25@library-subst gb2c3e@x) (gb2b29@library-env gb2c3e@x) (gb2c39@compile (gb2b35@library-visit-code gb2c3e@x)) (gb2c39@compile (gb2b39@library-invoke-code gb2c3e@x)) (gb2b3d@library-visible? gb2c3e@x))) (void))) ((gb2aff@current-library-collection)))))) (set! gb2d13@gb2b53@serialize-all gb2b53@serialize-all) (set! gb2b55@current-precompiled-library-loader (gb2a55@gb2933@make-parameter (lambda (gb2c42@filename gb2c43@sk) '#f))) (set! gb2d14@gb2b55@current-precompiled-library-loader gb2b55@current-precompiled-library-loader) (set! gb2b57@try-load-from-file (lambda (gb2c46@filename) ((gb2b55@current-precompiled-library-loader) gb2c46@filename (lambda gb2c6c (let ((gb2c6d (length gb2c6c))) (if (= gb2c6d '11) (apply (lambda (gb2c48@id gb2c49@name gb2c4a@ver gb2c4b@imp* gb2c4c@vis* gb2c4d@inv* gb2c4e@exp-subst gb2c4f@exp-env gb2c50@visit-proc gb2c51@invoke-proc gb2c52@visible?) (let gb2c60@f ((gb2c5e@deps (append gb2c4b@imp* gb2c4c@vis* gb2c4d@inv*))) (if (null? gb2c5e@deps) (begin (gb2b6b@install-library gb2c48@id gb2c49@name gb2c4a@ver gb2c4b@imp* gb2c4c@vis* gb2c4d@inv* gb2c4e@exp-subst gb2c4f@exp-env gb2c50@visit-proc gb2c51@invoke-proc '#f '#f gb2c52@visible? '#f) '#t) (let ((gb2c62@d (car gb2c5e@deps))) (let ((gb2c64@label (car gb2c62@d)) (gb2c65@dname (cadr gb2c62@d))) (let ((gb2c68@l (gb2b61@find-library-by-name gb2c65@dname))) (if (and (gb2b0b@library? gb2c68@l) (eq? gb2c64@label (gb2b0d@library-id gb2c68@l))) (gb2c60@f (cdr gb2c5e@deps)) (begin (if gb2a4f@gb2927@verbose? (format (current-error-port) '"WARNING: library ~e has an inconsistent dependency on library ~e; file ~e will be recompiled from source. \n" gb2c49@name gb2c65@dname gb2c46@filename) (void)) '#f)))))))) gb2c6c) (if (>= gb2c6d '0) (apply (lambda gb2c6a@others '#f) gb2c6c) (error 'apply '"invalid arg count")))))))) (set! gb2d15@gb2b57@try-load-from-file gb2b57@try-load-from-file) (set! gb2b59@library-loader (gb2a55@gb2933@make-parameter (lambda (gb2c6e@x) (let ((gb2c70@file-name ((gb2b51@file-locator) gb2c6e@x))) (if (not gb2c70@file-name) (assertion-violation '#f '"cannot file library" gb2c6e@x) (or (gb2b57@try-load-from-file gb2c70@file-name) ((gb2b5b@current-library-expander) (gb2a54@gb2931@read-library-source-file gb2c70@file-name) gb2c70@file-name (lambda (gb2c72@name) (if (not (fast-equal? gb2c72@name gb2c6e@x)) (assertion-violation 'import (call-with-values (lambda () (open-string-output-port)) (lambda (gb2c78@gb2c75 gb2c79@gb2c77) (let ((gb2c7c@e gb2c79@gb2c77) (gb2c7d@p gb2c78@gb2c75)) (begin (display '"expected to find library " gb2c7d@p) (write gb2c6e@x gb2c7d@p) (display '" in file " gb2c7d@p) (display gb2c70@file-name gb2c7d@p) (display '", found " gb2c7d@p) (write gb2c72@name gb2c7d@p) (display '" instead" gb2c7d@p) (gb2c7c@e)))))) (void)))))))) (lambda (gb2c80@f) (if (procedure? gb2c80@f) gb2c80@f (assertion-violation 'library-locator '"not a procedure" gb2c80@f))))) (set! gb2d16@gb2b59@library-loader gb2b59@library-loader) (set! gb2b5b@current-library-expander (gb2a55@gb2933@make-parameter (lambda (gb2c82@x) (assertion-violation 'library-expander '"not initialized")) (lambda (gb2c84@f) (if (procedure? gb2c84@f) gb2c84@f (assertion-violation 'library-expander '"not a procedure" gb2c84@f))))) (set! gb2d17@gb2b5b@current-library-expander gb2b5b@current-library-expander) (set! gb2b5d@external-pending-libraries (gb2a55@gb2933@make-parameter '())) (set! gb2d18@gb2b5d@external-pending-libraries gb2b5d@external-pending-libraries) (set! gb2b5f@find-external-library (lambda (gb2c86@name) (begin (if (member gb2c86@name (gb2b5d@external-pending-libraries)) (assertion-violation '#f '"circular attempt to import library was detected" gb2c86@name) (void)) (let ((gb2c8c@gb2c89 gb2b5d@external-pending-libraries) (gb2c8d@gb2c8b (cons gb2c86@name (gb2b5d@external-pending-libraries)))) (let ((gb2c90@swap (lambda () (let ((gb2c92@t (gb2c8c@gb2c89))) (begin (gb2c8c@gb2c89 gb2c8d@gb2c8b) (set! gb2c8d@gb2c8b gb2c92@t)))))) (dynamic-wind gb2c90@swap (lambda () (begin ((gb2b59@library-loader) gb2c86@name) (or (gb2b49@find-library-by (lambda (gb2c94@x) (fast-equal? (gb2b11@library-name gb2c94@x) gb2c86@name))) (assertion-violation '#f '"handling external library did not yield the correct library" gb2c86@name)))) gb2c90@swap)))))) (set! gb2d19@gb2b5f@find-external-library gb2b5f@find-external-library) (set! gb2b61@find-library-by-name (lambda (gb2c96@name) (or (gb2b49@find-library-by (lambda (gb2c98@x) (fast-equal? (gb2b11@library-name gb2c98@x) gb2c96@name))) (gb2b5f@find-external-library gb2c96@name)))) (set! gb2d1a@gb2b61@find-library-by-name gb2b61@find-library-by-name) (set! gb2b63@library-exists? (lambda (gb2c9a@name) (and (gb2b49@find-library-by (lambda (gb2c9c@x) (fast-equal? (gb2b11@library-name gb2c9c@x) gb2c9a@name))) '#t))) (set! gb2d1b@gb2b63@library-exists? gb2b63@library-exists?) (set! gb2b65@find-library-by-spec/die (lambda (gb2c9e@spec) (let ((gb2ca0@id (car gb2c9e@spec))) (or (gb2b49@find-library-by (lambda (gb2ca2@x) (eq? gb2ca0@id (gb2b0d@library-id gb2ca2@x)))) (assertion-violation '#f '"cannot find library with required spec" gb2c9e@spec))))) (set! gb2d1c@gb2b65@find-library-by-spec/die gb2b65@find-library-by-spec/die) (set! gb2b67@label->binding-table (make-eq-hashtable)) (set! gb2d1d@gb2b67@label->binding-table gb2b67@label->binding-table) (set! gb2b69@install-library-record (lambda (gb2ca4@lib) (begin (let ((gb2ca6@exp-env (gb2b29@library-env gb2ca4@lib))) (for-each (lambda (gb2ca8@x) (let ((gb2caa@label (car gb2ca8@x)) (gb2cab@binding (cdr gb2ca8@x))) (let ((gb2cae@binding (let ((gb2cb0@t (car gb2cab@binding))) (if (memv gb2cb0@t '(global)) (cons 'global (cons gb2ca4@lib (cdr gb2cab@binding))) (if (memv gb2cb0@t '(global-macro)) (cons 'global-macro (cons gb2ca4@lib (cdr gb2cab@binding))) (if (memv gb2cb0@t '(global-macro!)) (cons 'global-macro! (cons gb2ca4@lib (cdr gb2cab@binding))) gb2cab@binding)))))) (begin (if (hashtable-ref gb2b67@label->binding-table gb2caa@label '#f) (begin (format (current-error-port) '"FATAL overwrite !! key=~a value=~a to ~a\n" gb2caa@label (hashtable-ref gb2b67@label->binding-table gb2caa@label '#f) gb2cae@binding) (exit)) (void)) (hashtable-set! gb2b67@label->binding-table gb2caa@label gb2cae@binding))))) gb2ca6@exp-env)) ((gb2aff@current-library-collection) gb2ca4@lib)))) (set! gb2d1e@gb2b69@install-library-record gb2b69@install-library-record) (set! gb2b6b@install-library (lambda (gb2cb2@id gb2cb3@name gb2cb4@ver gb2cb5@imp* gb2cb6@vis* gb2cb7@inv* gb2cb8@exp-subst gb2cb9@exp-env gb2cba@visit-proc gb2cbb@invoke-proc gb2cbc@visit-code gb2cbd@invoke-code gb2cbe@visible? gb2cbf@source-file-name) (let ((gb2cce@imp-lib* (map gb2b65@find-library-by-spec/die gb2cb5@imp*)) (gb2ccf@vis-lib* (map gb2b65@find-library-by-spec/die gb2cb6@vis*)) (gb2cd0@inv-lib* (map gb2b65@find-library-by-spec/die gb2cb7@inv*))) (begin (if (not (and (symbol? gb2cb2@id) (list? gb2cb3@name) (list? gb2cb4@ver))) (assertion-violation 'install-library '"invalid spec with id/name/ver" gb2cb2@id gb2cb3@name gb2cb4@ver) (void)) (if (gb2b63@library-exists? gb2cb3@name) (assertion-violation 'install-library '"library is already installed" gb2cb3@name) (void)) (let ((gb2cd4@lib (make-simple-struct 'library '15 (list gb2cb2@id gb2cb3@name gb2cb4@ver gb2cce@imp-lib* gb2ccf@vis-lib* gb2cd0@inv-lib* gb2cb8@exp-subst gb2cb9@exp-env gb2cba@visit-proc gb2cbb@invoke-proc gb2cbc@visit-code gb2cbd@invoke-code gb2cbe@visible? gb2cbf@source-file-name)))) (gb2b69@install-library-record gb2cd4@lib)))))) (set! gb2d1f@gb2b6b@install-library gb2b6b@install-library) (set! gb2b6d@imported-label->binding (lambda (gb2cd6@lab) (hashtable-ref gb2b67@label->binding-table gb2cd6@lab '#f))) (set! gb2d20@gb2b6d@imported-label->binding gb2b6d@imported-label->binding) (set! gb2b6f@invoke-library (lambda (gb2cd8@lib) (let ((gb2cda@invoke (gb2b31@library-invoke-state gb2cd8@lib))) (if (procedure? gb2cda@invoke) (begin (gb2b33@set-library-invoke-state! gb2cd8@lib (lambda () (assertion-violation 'invoke '"circularity detected" gb2cd8@lib))) (for-each gb2b6f@invoke-library (gb2b21@library-inv* gb2cd8@lib)) (gb2b33@set-library-invoke-state! gb2cd8@lib (lambda () (assertion-violation 'invoke '"first invoke did not return" gb2cd8@lib))) (gb2cda@invoke) (gb2b33@set-library-invoke-state! gb2cd8@lib '#t)) (void))))) (set! gb2d21@gb2b6f@invoke-library gb2b6f@invoke-library) (set! gb2b71@visit-library (lambda (gb2cdc@lib) (let ((gb2cde@visit (gb2b2d@library-visit-state gb2cdc@lib))) (if (procedure? gb2cde@visit) (begin (gb2b2f@set-library-visit-state! gb2cdc@lib (lambda () (assertion-violation 'visit '"circularity detected" gb2cdc@lib))) (for-each gb2b6f@invoke-library (gb2b1d@library-vis* gb2cdc@lib)) (gb2b2f@set-library-visit-state! gb2cdc@lib (lambda () (assertion-violation 'invoke '"first visit did not return" gb2cdc@lib))) (gb2cde@visit) (gb2b2f@set-library-visit-state! gb2cdc@lib '#t)) (void))))) (set! gb2d22@gb2b71@visit-library gb2b71@visit-library) (set! gb2b73@invoke-library-by-spec (lambda (gb2ce0@spec) (gb2b6f@invoke-library (gb2b65@find-library-by-spec/die gb2ce0@spec)))) (set! gb2d23@gb2b73@invoke-library-by-spec gb2b73@invoke-library-by-spec) (set! gb2b75@installed-libraries (lambda gb2ce8 (let ((gb2ce9 (length gb2ce8))) (if (= gb2ce9 '1) (apply (lambda (gb2ce2@all?) (let gb2ce6@f ((gb2ce4@ls ((gb2aff@current-library-collection)))) (if (null? gb2ce4@ls) '() (if (or gb2ce2@all? (gb2b3d@library-visible? (car gb2ce4@ls))) (cons (car gb2ce4@ls) (gb2ce6@f (cdr gb2ce4@ls))) (gb2ce6@f (cdr gb2ce4@ls)))))) gb2ce8) (if (= gb2ce9 '0) (apply (lambda () (gb2b75@installed-libraries '#f)) gb2ce8) (error 'apply '"invalid arg count")))))) (set! gb2d24@gb2b75@installed-libraries gb2b75@installed-libraries) (set! gb2b77@library-spec (lambda (gb2cea@x) (begin (if (not (gb2b0b@library? gb2cea@x)) (assertion-violation 'library-spec '"not a library" gb2cea@x) (void)) (list (gb2b0d@library-id gb2cea@x) (gb2b11@library-name gb2cea@x) (gb2b15@library-version gb2cea@x))))) (set! gb2d25@gb2b77@library-spec gb2b77@library-spec) (void))
(begin (set! gb2d29@build-global-define (unspecified)) (set! gb2d9a@build-lambda (unspecified)) (set! gb2d9c@build-case-lambda (unspecified)) (set! gb2dca@build-sequence (unspecified)) (set! gb2dcc@build-void (unspecified)) (set! gb2dce@build-letrec (unspecified)) (set! gb2dd0@build-let (unspecified)) (set! gb2dd2@build-named-let (unspecified)) (set! gb2dd4@build-letrec* (unspecified)) (set! gb2dd6@build-library-letrec* (unspecified)) (set! gb2dd8@build-receive (unspecified)) (set! gb2d29@build-global-define (lambda (gb2dd9@x) (gb2dcc@build-void))) (set! gb2e67@gb2d29@build-global-define gb2d29@build-global-define) (set! gb2d9a@build-lambda (lambda (gb2ddb@ae gb2ddc@vars gb2ddd@exp) (list 'lambda gb2ddc@vars gb2ddd@exp))) (set! gb2e68@gb2d9a@build-lambda gb2d9a@build-lambda) (set! gb2d9c@build-case-lambda (lambda (gb2de1@ae gb2de2@vars* gb2de3@exp*) (letrec* ((gb2de8@build-error (lambda (gb2e1f@ae) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (gb2dea@build-pred (lambda (gb2e07@ae gb2e08@n gb2e09@vars) (call-with-values (lambda () (let gb2e15@f ((gb2e11@vars gb2e09@vars) (gb2e12@count '0)) (if (pair? gb2e11@vars) (gb2e15@f (cdr gb2e11@vars) (+ gb2e12@count '1)) (if (null? gb2e11@vars) (values gb2e12@count '=) (values gb2e12@count '>=))))) (lambda (gb2e17@gb2e0e gb2e18@gb2e10) (let ((gb2e1b@pred gb2e18@gb2e10) (gb2e1c@count gb2e17@gb2e0e)) (list (list 'primitive gb2e1b@pred) gb2e08@n (list 'quote gb2e1c@count))))))) (gb2dec@build-apply (lambda (gb2dff@ae gb2e00@g gb2e01@vars gb2e02@exp) (list '(primitive apply) (gb2d9a@build-lambda gb2dff@ae gb2e01@vars gb2e02@exp) gb2e00@g))) (gb2dee@expand-case-lambda (lambda (gb2def@ae gb2df0@vars gb2df1@exp*) (let ((gb2df5@g (gensym)) (gb2df6@n (gensym))) (list 'lambda gb2df5@g (gb2dd0@build-let gb2def@ae (list gb2df6@n) (list (list '(primitive length) gb2df5@g)) (let gb2dfd@f ((gb2df9@vars* gb2de2@vars*) (gb2dfa@exp* gb2df1@exp*)) (if (null? gb2df9@vars*) (gb2de8@build-error gb2def@ae) (list 'if (gb2dea@build-pred gb2def@ae gb2df6@n (car gb2df9@vars*)) (gb2dec@build-apply gb2def@ae gb2df5@g (car gb2df9@vars*) (car gb2dfa@exp*)) (gb2dfd@f (cdr gb2df9@vars*) (cdr gb2dfa@exp*))))))))))) (if (= (length gb2de3@exp*) '1) (gb2d9a@build-lambda gb2de1@ae (car gb2de2@vars*) (car gb2de3@exp*)) (gb2dee@expand-case-lambda gb2de1@ae gb2de2@vars* gb2de3@exp*))))) (set! gb2e69@gb2d9c@build-case-lambda gb2d9c@build-case-lambda) (set! gb2dca@build-sequence (lambda (gb2e21@ae gb2e22@exps) (let gb2e27@loop ((gb2e25@exps gb2e22@exps)) (if (null? (cdr gb2e25@exps)) (car gb2e25@exps) (if (equal? (car gb2e25@exps) (gb2dcc@build-void)) (gb2e27@loop (cdr gb2e25@exps)) (cons 'begin gb2e25@exps)))))) (set! gb2e6a@gb2dca@build-sequence gb2dca@build-sequence) (set! gb2dcc@build-void (lambda () '((primitive void)))) (set! gb2e6b@gb2dcc@build-void gb2dcc@build-void) (set! gb2dce@build-letrec (lambda (gb2e29@ae gb2e2a@vars gb2e2b@val-exps gb2e2c@body-exp) (if (null? gb2e2a@vars) gb2e2c@body-exp (list 'letrec (map list gb2e2a@vars gb2e2b@val-exps) gb2e2c@body-exp)))) (set! gb2e6c@gb2dce@build-letrec gb2dce@build-letrec) (set! gb2dd0@build-let (lambda (gb2e31@ae gb2e32@vars gb2e33@val-exps gb2e34@body-exp) (if (null? gb2e32@vars) gb2e34@body-exp (list 'let (map list gb2e32@vars gb2e33@val-exps) gb2e34@body-exp)))) (set! gb2e6d@gb2dd0@build-let gb2dd0@build-let) (set! gb2dd2@build-named-let (lambda (gb2e39@ae gb2e3a@name gb2e3b@vars gb2e3c@val-exps gb2e3d@body-exp) (list 'let gb2e3a@name (map list gb2e3b@vars gb2e3c@val-exps) gb2e3d@body-exp))) (set! gb2e6e@gb2dd2@build-named-let gb2dd2@build-named-let) (set! gb2dd4@build-letrec* (lambda (gb2e43@ae gb2e44@vars gb2e45@val-exps gb2e46@body-exp) (if (null? gb2e44@vars) gb2e46@body-exp (list 'letrec* (map list gb2e44@vars gb2e45@val-exps) gb2e46@body-exp)))) (set! gb2e6f@gb2dd4@build-letrec* gb2dd4@build-letrec*) (set! gb2dd6@build-library-letrec* (lambda (gb2e4b@ae gb2e4c@name gb2e4d@vars gb2e4e@locs gb2e4f@val-exps gb2e50@body-exp) (cons 'begin (append (map (lambda (gb2e57@var) (cons 'set! (cons gb2e57@var '((unspecified))))) gb2e4d@vars) (append (apply append (map (lambda (gb2e59@var gb2e5a@loc gb2e5b@val-exp) (list (list 'set! gb2e59@var gb2e5b@val-exp) (list 'set! gb2e5a@loc gb2e59@var))) gb2e4d@vars gb2e4e@locs gb2e4f@val-exps)) (list gb2e50@body-exp)))))) (set! gb2e70@gb2dd6@build-library-letrec* gb2dd6@build-library-letrec*) (set! gb2dd8@build-receive (lambda (gb2e5f@ae gb2e60@vars gb2e61@producer gb2e62@body*) (begin (display '"************** in ") (cons 'receive (cons gb2e60@vars (cons gb2e61@producer gb2e62@body*)))))) (set! gb2e71@gb2dd8@build-receive gb2dd8@build-receive) (void))
(begin (set! gb2e80@file-options-macro (unspecified)) (set! gb2e82@set-cons (unspecified)) (set! gb2e84@set-union (unspecified)) (set! gb2e89@top-mark* (unspecified)) (set! gb2e8b@top-marked? (unspecified)) (set! gb2e8d@gen-lexical (unspecified)) (set! gb2e8f@gen-global (unspecified)) (set! gb2e91@gen-label (unspecified)) (set! gb2e93@gen-top-level-label (unspecified)) (set! gb2e95@gen-define-label+loc (unspecified)) (set! gb2e97@gen-define-label (unspecified)) (set! gb2ea1@rib? (unspecified)) (set! gb2ea3@rib-sym* (unspecified)) (set! gb2ea5@set-rib-sym*! (unspecified)) (set! gb2ea7@rib-mark** (unspecified)) (set! gb2ea9@set-rib-mark**! (unspecified)) (set! gb2eab@rib-label* (unspecified)) (set! gb2ead@set-rib-label*! (unspecified)) (set! gb2eaf@rib-sealed/freq (unspecified)) (set! gb2eb1@set-rib-sealed/freq! (unspecified)) (set! gb2eb3@rib-cache (unspecified)) (set! gb2eb5@set-rib-cache! (unspecified)) (set! gb2eb7@dummy (unspecified)) (set! gb2eb9@make-empty-rib (unspecified)) (set! gb2ebb@extend-rib! (unspecified)) (set! gb2ebd@extend-rib/nc! (unspecified)) (set! gb2ebf@make-rib-map (unspecified)) (set! gb2ec1@seal-rib! (unspecified)) (set! gb2ec3@unseal-rib! (unspecified)) (set! gb2ec5@make-full-rib (unspecified)) (set! gb2ec7@rp (unspecified)) (set! gb2ed1@stx? (unspecified)) (set! gb2ed3@stx-expr (unspecified)) (set! gb2ed5@set-stx-expr! (unspecified)) (set! gb2ed7@stx-mark* (unspecified)) (set! gb2ed9@set-stx-mark*! (unspecified)) (set! gb2edb@stx-subst* (unspecified)) (set! gb2edd@set-stx-subst*! (unspecified)) (set! gb2edf@stx-ae* (unspecified)) (set! gb2ee1@set-stx-ae*! (unspecified)) (set! gb2ee3@dummy (unspecified)) (set! gb2ee5@datum->stx (unspecified)) (set! gb2ee7@gen-mark (unspecified)) (set! gb2ee9@anti-mark (unspecified)) (set! gb2eeb@anti-mark? (unspecified)) (set! gb2eed@mkstx (unspecified)) (set! gb2eef@add-subst (unspecified)) (set! gb2ef1@add-mark (unspecified)) (set! gb2ef3@syntax-kind? (unspecified)) (set! gb2ef5@syntax-vector->list (unspecified)) (set! gb2ef7@syntax-pair? (unspecified)) (set! gb2ef9@syntax-vector? (unspecified)) (set! gb2efb@syntax-null? (unspecified)) (set! gb2efd@syntax-list? (unspecified)) (set! gb2eff@syntax-car (unspecified)) (set! gb2f01@syntax-cdr (unspecified)) (set! gb2f03@syntax->list (unspecified)) (set! gb2f05@id? (unspecified)) (set! gb2f07@id->sym (unspecified)) (set! gb2f09@bound-id=? (unspecified)) (set! gb2f0b@free-id=? (unspecified)) (set! gb2f0d@valid-bound-ids? (unspecified)) (set! gb2f0f@distinct-bound-ids? (unspecified)) (set! gb2f11@bound-id-member? (unspecified)) (set! gb2f13@self-evaluating? (unspecified)) (set! gb2f15@strip-annotations (unspecified)) (set! gb2f17@strip (unspecified)) (set! gb2f19@stx->datum (unspecified)) (set! gb2f1b@id->label (unspecified)) (set! gb2f1d@label->binding (unspecified)) (set! gb2f1f@make-binding (unspecified)) (set! gb2f21@binding-type (unspecified)) (set! gb2f23@binding-value (unspecified)) (set! gb2f25@raise-unbound-error (unspecified)) (set! gb2f27@syntax-type (unspecified)) (set! gb2f35@sanitize-binding (unspecified)) (set! gb2f37@make-variable-transformer (unspecified)) (set! gb2f39@variable-transformer? (unspecified)) (set! gb2f3b@variable-transformer-procedure (unspecified)) (set! gb2f3d@make-eval-transformer (unspecified)) (set! gb308e@parse-define (unspecified)) (set! gb3090@parse-define-syntax (unspecified)) (set! gb3092@scheme-stx-hashtable (unspecified)) (set! gb3094@scheme-stx (unspecified)) (set! gb3096@lexical-var (unspecified)) (set! gb3098@lexical-mutable? (unspecified)) (set! gb309a@set-lexical-mutable! (unspecified)) (set! gb309c@add-lexical (unspecified)) (set! gb309e@add-lexicals (unspecified)) (set! gb30a0@letrec-helper (unspecified)) (set! gb30a2@let-transformer (unspecified)) (set! gb30a4@letrec-transformer (unspecified)) (set! gb30a6@letrec*-transformer (unspecified)) (set! gb30a8@fluid-let-syntax-transformer (unspecified)) (set! gb30aa@type-descriptor-transformer (unspecified)) (set! gb30ac@record-type-descriptor-transformer (unspecified)) (set! gb30ae@record-constructor-descriptor-transformer (unspecified)) (set! gb30b0@when-macro (unspecified)) (set! gb30b2@unless-macro (unspecified)) (set! gb30b4@if-transformer (unspecified)) (set! gb30b6@and-transformer (unspecified)) (set! gb30b8@or-transformer (unspecified)) (set! gb30ba@case-macro (unspecified)) (set! gb30bc@quote-transformer (unspecified)) (set! gb30be@case-lambda-transformer (unspecified)) (set! gb30c0@lambda-transformer (unspecified)) (set! gb30c2@bless (unspecified)) (set! gb30c4@with-syntax-macro (unspecified)) (set! gb30c6@invalid-fmls-error (unspecified)) (set! gb30c8@let-macro (unspecified)) (set! gb30ca@let-values-macro (unspecified)) (set! gb30cc@let*-values-macro (unspecified)) (set! gb30ce@trace-lambda-macro (unspecified)) (set! gb30d0@trace-define-macro (unspecified)) (set! gb30d2@trace-define-syntax-macro (unspecified)) (set! gb30d4@trace-let/rec-syntax (unspecified)) (set! gb30d6@trace-let-syntax-macro (unspecified)) (set! gb30d8@trace-letrec-syntax-macro (unspecified)) (set! gb30da@guard-macro (unspecified)) (set! gb30dc@define-enumeration-macro (unspecified)) (set! gb30de@time-macro (unspecified)) (set! gb30e0@delay-macro (unspecified)) (set! gb30e2@assert-macro (unspecified)) (set! gb30e4@endianness-macro (unspecified)) (set! gb30e6@identifier-syntax-macro (unspecified)) (set! gb30e8@do-macro (unspecified)) (set! gb30ea@let*-macro (unspecified)) (set! gb30ec@or-macro (unspecified)) (set! gb30ee@and-macro (unspecified)) (set! gb30f0@cond-macro (unspecified)) (set! gb30f2@do-include (unspecified)) (set! gb30f4@include-macro (unspecified)) (set! gb30f6@include-into-macro (unspecified)) (set! gb30f8@syntax-rules-macro (unspecified)) (set! gb30fa@quasiquote-macro (unspecified)) (set! gb30fc@quasisyntax-macro (unspecified)) (set! gb30fe@define-struct-macro (unspecified)) (set! gb3100@define-record-type-macro (unspecified)) (set! gb3102@define-condition-type-macro (unspecified)) (set! gb3104@incorrect-usage-macro (unspecified)) (set! gb3106@parameterize-macro (unspecified)) (set! gb3108@foreign-call-transformer (unspecified)) (set! gb310a@convert-pattern (unspecified)) (set! gb310c@syntax-dispatch (unspecified)) (set! gb310e@ellipsis? (unspecified)) (set! gb3110@underscore? (unspecified)) (set! gb3112@verify-literals (unspecified)) (set! gb3114@syntax-case-transformer (unspecified)) (set! gb3116@ellipsis-map (unspecified)) (set! gb3118@syntax-transformer (unspecified)) (set! gb311a@core-macro-transformer (unspecified)) (set! gb311c@symbol-macro (unspecified)) (set! gb311e@macro-transformer (unspecified)) (set! gb3120@local-macro-transformer (unspecified)) (set! gb3122@do-macro-call (unspecified)) (set! gb3124@chi-macro (unspecified)) (set! gb3126@chi-local-macro (unspecified)) (set! gb3128@chi-global-macro (unspecified)) (set! gb312a@chi-expr* (unspecified)) (set! gb312c@chi-application (unspecified)) (set! gb312e@chi-expr (unspecified)) (set! gb3130@chi-set! (unspecified)) (set! gb3132@verify-formals (unspecified)) (set! gb3134@chi-lambda-clause (unspecified)) (set! gb3136@chi-lambda-clause* (unspecified)) (set! gb3138@chi-defun (unspecified)) (set! gb313a@chi-rhs (unspecified)) (set! gb313c@expand-interaction-rhs*/init* (unspecified)) (set! gb313e@chi-rhs* (unspecified)) (set! gb3140@find-bound=? (unspecified)) (set! gb3142@find-dups (unspecified)) (set! gb3144@chi-internal (unspecified)) (set! gb3146@parse-module (unspecified)) (set! gb3150@module-interface? (unspecified)) (set! gb3152@module-interface-first-mark (unspecified)) (set! gb3154@set-module-interface-first-mark! (unspecified)) (set! gb3156@module-interface-exp-id-vec (unspecified)) (set! gb3158@set-module-interface-exp-id-vec! (unspecified)) (set! gb315a@module-interface-exp-lab-vec (unspecified)) (set! gb315c@set-module-interface-exp-lab-vec! (unspecified)) (set! gb315e@dummy (unspecified)) (set! gb3160@module-interface-exp-id* (unspecified)) (set! gb3162@chi-internal-module (unspecified)) (set! gb3164@chi-body* (unspecified)) (set! gb3166@expand-transformer (unspecified)) (set! gb3168@parse-exports (unspecified)) (set! gb316a@parse-library-name (unspecified)) (set! gb316c@parse-library (unspecified)) (set! gb316e@parse-import-spec* (unspecified)) (set! gb3170@make-top-rib (unspecified)) (set! gb3172@make-collector (unspecified)) (set! gb3174@inv-collector (unspecified)) (set! gb3176@vis-collector (unspecified)) (set! gb3178@imp-collector (unspecified)) (set! gb317a@chi-library-internal (unspecified)) (set! gb317c@chi-interaction-expr (unspecified)) (set! gb317e@library-body-expander (unspecified)) (set! gb3180@core-library-expander (unspecified)) (set! gb3182@parse-top-level-program (unspecified)) (set! gb3184@top-level-expander (unspecified)) (set! gb3186@rp (unspecified)) (set! gb3190@env? (unspecified)) (set! gb3192@env-names (unspecified)) (set! gb3194@set-env-names! (unspecified)) (set! gb3196@env-labels (unspecified)) (set! gb3198@set-env-labels! (unspecified)) (set! gb319a@env-itc (unspecified)) (set! gb319c@set-env-itc! (unspecified)) (set! gb319e@dummy (unspecified)) (set! gb31a0@rp (unspecified)) (set! gb31aa@interaction-env? (unspecified)) (set! gb31ac@interaction-env-rib (unspecified)) (set! gb31ae@set-interaction-env-rib! (unspecified)) (set! gb31b0@interaction-env-r (unspecified)) (set! gb31b2@set-interaction-env-r! (unspecified)) (set! gb31b4@interaction-env-locs (unspecified)) (set! gb31b6@set-interaction-env-locs! (unspecified)) (set! gb31b8@dummy (unspecified)) (set! gb31ba@interaction-environment-symbols (unspecified)) (set! gb31bc@environment-bindings (unspecified)) (set! gb31be@parse-binding (unspecified)) (set! gb31c0@environment? (unspecified)) (set! gb31c2@environment-symbols (unspecified)) (set! gb31c4@environment (unspecified)) (set! gb31c6@null-environment (unspecified)) (set! gb31c8@scheme-report-environment (unspecified)) (set! gb31ca@expand (unspecified)) (set! gb31cc@eval (unspecified)) (set! gb31ce@library-expander (unspecified)) (set! gb31d0@boot-library-expand (unspecified)) (set! gb31d2@rev-map-append (unspecified)) (set! gb31d4@build-exports (unspecified)) (set! gb31d6@make-export-subst (unspecified)) (set! gb31d8@make-export-env/macros (unspecified)) (set! gb31da@generate-temporaries (unspecified)) (set! gb31dc@free-identifier=? (unspecified)) (set! gb31de@bound-identifier=? (unspecified)) (set! gb31e0@make-source-condition (unspecified)) (set! gb31e2@extract-position-condition (unspecified)) (set! gb31e4@expression-position (unspecified)) (set! gb31e6@assertion-error (unspecified)) (set! gb31e8@syntax-error (unspecified)) (set! gb31ea@syntax-violation* (unspecified)) (set! gb31ec@syntax-violation (unspecified)) (set! gb31ee@identifier? (unspecified)) (set! gb31f0@datum->syntax (unspecified)) (set! gb31f2@syntax->datum (unspecified)) (set! gb31f4@ungensym-all (unspecified)) (set! gb31f6@compile-r6rs-top-level (unspecified)) (set! gb31f8@pre-compile-r6rs-top-level (unspecified)) (set! gb31fa@interaction-environment (unspecified)) (set! gb31fc@top-level-context (unspecified)) (set! gb2e80@file-options-macro (lambda (gb31fd@x) (letrec* ((gb3200@valid-option? (lambda (gb3209@x) (and (gb2f05@id? gb3209@x) (memq (gb2f07@id->sym gb3209@x) '(no-fail no-create no-truncate)))))) (let ((gb3201@t gb31fd@x)) (let ((gb3203@ls/false (gb310c@syntax-dispatch gb3201@t '(_ . each-any)))) (if (and gb3203@ls/false (apply (lambda (gb3205@opt*) (for-all gb3200@valid-option? gb3205@opt*)) gb3203@ls/false)) (apply (lambda (gb3207@opt*) (gb30c2@bless (list 'make-file-options (list 'quote gb3207@opt*)))) gb3203@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3201@t))))))) (set! gb4b89@gb2e80@file-options-macro gb2e80@file-options-macro) (set! gb2e82@set-cons (lambda (gb320b@x gb320c@ls) (if (memq gb320b@x gb320c@ls) gb320c@ls (cons gb320b@x gb320c@ls)))) (set! gb4b8a@gb2e82@set-cons gb2e82@set-cons) (set! gb2e84@set-union (lambda (gb320f@ls1 gb3210@ls2) (if (null? gb320f@ls1) gb3210@ls2 (if (memq (car gb320f@ls1) gb3210@ls2) (gb2e84@set-union (cdr gb320f@ls1) gb3210@ls2) (cons (car gb320f@ls1) (gb2e84@set-union (cdr gb320f@ls1) gb3210@ls2)))))) (set! gb4b8b@gb2e84@set-union gb2e84@set-union) (set! gb2e89@top-mark* '(top)) (set! gb4b8c@gb2e89@top-mark* gb2e89@top-mark*) (set! gb2e8b@top-marked? (lambda (gb3213@m*) (memq 'top gb3213@m*))) (set! gb4b8d@gb2e8b@top-marked? gb2e8b@top-marked?) (set! gb2e8d@gen-lexical (lambda (gb3215@sym) (if (symbol? gb3215@sym) (gensym gb3215@sym) (if (gb2ed1@stx? gb3215@sym) (gb2e8d@gen-lexical (gb2f07@id->sym gb3215@sym)) (assertion-violation 'gen-lexical '"BUG: invalid arg" gb3215@sym))))) (set! gb4b8e@gb2e8d@gen-lexical gb2e8d@gen-lexical) (set! gb2e8f@gen-global (lambda (gb3217@x) (gb2e8d@gen-lexical gb3217@x))) (set! gb4b8f@gb2e8f@gen-global gb2e8f@gen-global) (set! gb2e91@gen-label (lambda (gb3219@_) (gensym))) (set! gb4b90@gb2e91@gen-label gb2e91@gen-label) (set! gb2e93@gen-top-level-label (lambda (gb321b@id gb321c@rib) (letrec* ((gb3220@find (lambda (gb322b@sym gb322c@mark* gb322d@sym* gb322e@mark** gb322f@label*) (and (pair? gb322d@sym*) (if (and (eq? gb322b@sym (car gb322d@sym*)) (same-marks? gb322c@mark* (car gb322e@mark**))) (car gb322f@label*) (gb3220@find gb322b@sym gb322c@mark* (cdr gb322d@sym*) (cdr gb322e@mark**) (cdr gb322f@label*))))))) (let ((gb3221@sym (gb2f07@id->sym gb321b@id)) (gb3222@mark* (gb2ed7@stx-mark* gb321b@id))) (let ((gb3225@sym* (gb2ea3@rib-sym* gb321c@rib))) (let ((gb3227@t (and (memq gb3221@sym (gb2ea3@rib-sym* gb321c@rib)) (gb3220@find gb3221@sym gb3222@mark* gb3225@sym* (gb2ea7@rib-mark** gb321c@rib) (gb2eab@rib-label* gb321c@rib))))) (if gb3227@t ((lambda (gb3229@label) (if (gb2d20@gb2b6d@imported-label->binding gb3229@label) (gensym) gb3229@label)) gb3227@t) (gensym)))))))) (set! gb4b91@gb2e93@gen-top-level-label gb2e93@gen-top-level-label) (set! gb2e95@gen-define-label+loc (lambda (gb3235@id gb3236@rib) (let ((gb3239@t (gb31fc@top-level-context))) (if gb3239@t ((lambda (gb323b@env) (let ((gb323d@label (gb2e93@gen-top-level-label gb3235@id gb3236@rib)) (gb323e@locs (gb31b4@interaction-env-locs gb323b@env))) (values gb323d@label (let ((gb3241@t (assq gb323d@label gb323e@locs))) (if gb3241@t (cdr gb3241@t) (let ((gb3243@loc (gb2e8d@gen-lexical gb3235@id))) (begin (gb31b6@set-interaction-env-locs! gb323b@env (cons (cons gb323d@label gb3243@loc) gb323e@locs)) gb3243@loc))))))) gb3239@t) (values (gensym) (gb2e8d@gen-lexical gb3235@id)))))) (set! gb4b92@gb2e95@gen-define-label+loc gb2e95@gen-define-label+loc) (set! gb2e97@gen-define-label (lambda (gb3245@id gb3246@rib) (if (gb31fc@top-level-context) (gb2e93@gen-top-level-label gb3245@id gb3246@rib) (gensym)))) (set! gb4b93@gb2e97@gen-define-label gb2e97@gen-define-label) (set! gb2ea1@rib? (lambda (gb3249@x) (and (simple-struct? gb3249@x) (eq? (simple-struct-name gb3249@x) 'rib)))) (set! gb4b94@gb2ea1@rib? gb2ea1@rib?) (set! gb2ea3@rib-sym* (lambda (gb324b@x) (simple-struct-ref gb324b@x '0))) (set! gb4b95@gb2ea3@rib-sym* gb2ea3@rib-sym*) (set! gb2ea5@set-rib-sym*! (lambda (gb324d@x gb324e@val) (simple-struct-set! gb324d@x '0 gb324e@val))) (set! gb4b96@gb2ea5@set-rib-sym*! gb2ea5@set-rib-sym*!) (set! gb2ea7@rib-mark** (lambda (gb3251@x) (simple-struct-ref gb3251@x '1))) (set! gb4b97@gb2ea7@rib-mark** gb2ea7@rib-mark**) (set! gb2ea9@set-rib-mark**! (lambda (gb3253@x gb3254@val) (simple-struct-set! gb3253@x '1 gb3254@val))) (set! gb4b98@gb2ea9@set-rib-mark**! gb2ea9@set-rib-mark**!) (set! gb2eab@rib-label* (lambda (gb3257@x) (simple-struct-ref gb3257@x '2))) (set! gb4b99@gb2eab@rib-label* gb2eab@rib-label*) (set! gb2ead@set-rib-label*! (lambda (gb3259@x gb325a@val) (simple-struct-set! gb3259@x '2 gb325a@val))) (set! gb4b9a@gb2ead@set-rib-label*! gb2ead@set-rib-label*!) (set! gb2eaf@rib-sealed/freq (lambda (gb325d@x) (simple-struct-ref gb325d@x '3))) (set! gb4b9b@gb2eaf@rib-sealed/freq gb2eaf@rib-sealed/freq) (set! gb2eb1@set-rib-sealed/freq! (lambda (gb325f@x gb3260@val) (simple-struct-set! gb325f@x '3 gb3260@val))) (set! gb4b9c@gb2eb1@set-rib-sealed/freq! gb2eb1@set-rib-sealed/freq!) (set! gb2eb3@rib-cache (lambda (gb3263@x) (simple-struct-ref gb3263@x '4))) (set! gb4b9d@gb2eb3@rib-cache gb2eb3@rib-cache) (set! gb2eb5@set-rib-cache! (lambda (gb3265@x gb3266@val) (simple-struct-set! gb3265@x '4 gb3266@val))) (set! gb4b9e@gb2eb5@set-rib-cache! gb2eb5@set-rib-cache!) (set! gb2eb7@dummy '3) (set! gb4b9f@gb2eb7@dummy gb2eb7@dummy) (set! gb2eb9@make-empty-rib (lambda () (make-simple-struct 'rib '6 (list '() '() '() '#f '#f)))) (set! gb4ba0@gb2eb9@make-empty-rib gb2eb9@make-empty-rib) (set! gb2ebb@extend-rib! (lambda (gb3269@rib gb326a@id gb326b@label) (letrec* ((gb3270@find (lambda (gb327d@sym gb327e@mark* gb327f@sym* gb3280@mark** gb3281@label*) (and (pair? gb327f@sym*) (if (and (eq? gb327d@sym (car gb327f@sym*)) (same-marks? gb327e@mark* (car gb3280@mark**))) gb3281@label* (gb3270@find gb327d@sym gb327e@mark* (cdr gb327f@sym*) (cdr gb3280@mark**) (cdr gb3281@label*))))))) (begin (if (gb2eaf@rib-sealed/freq gb3269@rib) (assertion-violation 'extend-rib! '"BUG: rib is sealed" gb3269@rib) (void)) (let ((gb3271@sym (gb2f07@id->sym gb326a@id)) (gb3272@mark* (gb2ed7@stx-mark* gb326a@id))) (let ((gb3275@sym* (gb2ea3@rib-sym* gb3269@rib))) (let ((gb3277@t (and (memq gb3271@sym (gb2ea3@rib-sym* gb3269@rib)) (gb3270@find gb3271@sym gb3272@mark* gb3275@sym* (gb2ea7@rib-mark** gb3269@rib) (gb2eab@rib-label* gb3269@rib))))) (if gb3277@t ((lambda (gb3279@p) (if (not (eq? gb326b@label (car gb3279@p))) (if (gb31fc@top-level-context) (set-car! gb3279@p gb326b@label) (gb31ec@syntax-violation '#f '"multiple definitions of identifier" gb326a@id)) (void))) gb3277@t) (begin (if (gb2eb3@rib-cache gb3269@rib) (hashtable-update! (gb2eb3@rib-cache gb3269@rib) gb3271@sym (lambda (gb327b@e) (cons (cons gb3272@mark* gb326b@label) gb327b@e)) '()) (void)) (gb2ea5@set-rib-sym*! gb3269@rib (cons gb3271@sym gb3275@sym*)) (gb2ea9@set-rib-mark**! gb3269@rib (cons gb3272@mark* (gb2ea7@rib-mark** gb3269@rib))) (gb2ead@set-rib-label*! gb3269@rib (cons gb326b@label (gb2eab@rib-label* gb3269@rib)))))))))))) (set! gb4ba1@gb2ebb@extend-rib! gb2ebb@extend-rib!) (set! gb2ebd@extend-rib/nc! (lambda (gb3287@rib gb3288@id gb3289@label) (let ((gb328d@sym (gb2f07@id->sym gb3288@id)) (gb328e@mark* (gb2ed7@stx-mark* gb3288@id))) (let ((gb3291@sym* (gb2ea3@rib-sym* gb3287@rib))) (begin (if (gb2eb3@rib-cache gb3287@rib) (hashtable-update! (gb2eb3@rib-cache gb3287@rib) gb328d@sym (lambda (gb3293@e) (cons (cons gb328e@mark* gb3289@label) gb3293@e)) '()) (void)) (gb2ea5@set-rib-sym*! gb3287@rib (cons gb328d@sym gb3291@sym*)) (gb2ea9@set-rib-mark**! gb3287@rib (cons gb328e@mark* (gb2ea7@rib-mark** gb3287@rib))) (gb2ead@set-rib-label*! gb3287@rib (cons gb3289@label (gb2eab@rib-label* gb3287@rib)))))))) (set! gb4ba2@gb2ebd@extend-rib/nc! gb2ebd@extend-rib/nc!) (set! gb2ebf@make-rib-map (lambda (gb3295@sym*) (let ((gb3297@ht (make-eq-hashtable))) (let gb329d@f ((gb3299@i '0) (gb329a@sym* gb3295@sym*)) (if (null? gb329a@sym*) gb3297@ht (begin (hashtable-update! gb3297@ht (car gb329a@sym*) (lambda (gb329f@x) (cons gb3299@i gb329f@x)) '()) (gb329d@f (+ gb3299@i '1) (cdr gb329a@sym*)))))))) (set! gb4ba3@gb2ebf@make-rib-map gb2ebf@make-rib-map) (set! gb2ec1@seal-rib! (lambda (gb32a1@rib) (let ((gb32a3@sym* (gb2ea3@rib-sym* gb32a1@rib))) (if (not (null? gb32a3@sym*)) (begin (gb2ea5@set-rib-sym*! gb32a1@rib (list->vector gb32a3@sym*)) (gb2ea9@set-rib-mark**! gb32a1@rib (list->vector (gb2ea7@rib-mark** gb32a1@rib))) (gb2ead@set-rib-label*! gb32a1@rib (list->vector (gb2eab@rib-label* gb32a1@rib))) (gb2eb1@set-rib-sealed/freq! gb32a1@rib (gb2ebf@make-rib-map gb32a3@sym*))) (void))))) (set! gb4ba4@gb2ec1@seal-rib! gb2ec1@seal-rib!) (set! gb2ec3@unseal-rib! (lambda (gb32a5@rib) (if (gb2eaf@rib-sealed/freq gb32a5@rib) (begin (gb2eb1@set-rib-sealed/freq! gb32a5@rib '#f) (gb2ea5@set-rib-sym*! gb32a5@rib (vector->list (gb2ea3@rib-sym* gb32a5@rib))) (gb2ea9@set-rib-mark**! gb32a5@rib (vector->list (gb2ea7@rib-mark** gb32a5@rib))) (gb2ead@set-rib-label*! gb32a5@rib (vector->list (gb2eab@rib-label* gb32a5@rib)))) (void)))) (set! gb4ba5@gb2ec3@unseal-rib! gb2ec3@unseal-rib!) (set! gb2ec5@make-full-rib (lambda (gb32a7@id* gb32a8@label*) (let ((gb32ab@r (make-simple-struct 'rib '6 (list (map gb2f07@id->sym gb32a7@id*) (map gb2ed7@stx-mark* gb32a7@id*) gb32a8@label* '#f '#f)))) (begin (gb2ec1@seal-rib! gb32ab@r) gb32ab@r)))) (set! gb4ba6@gb2ec5@make-full-rib gb2ec5@make-full-rib) (set! gb2ec7@rp (gb2a52@gb292d@make-record-printer 'stx (lambda (gb32ad@x gb32ae@p gb32af@wr) (begin (display '"#<syntax " gb32ae@p) (write (gb2f19@stx->datum gb32ad@x) gb32ae@p) (let ((gb32b3@expr (gb2ed3@stx-expr gb32ad@x))) (if (gb2a49@gb291b@annotation? gb32b3@expr) (let ((gb32b5@src (gb2a4a@gb291d@annotation-source gb32b3@expr))) (if (pair? gb32b5@src) (begin (display '" [" gb32ae@p) (display (cdr gb32b5@src) gb32ae@p) (display '" of " gb32ae@p) (display (car gb32b5@src) gb32ae@p) (display '"]" gb32ae@p)) (void))) (void))) (display '">" gb32ae@p))))) (set! gb4ba7@gb2ec7@rp gb2ec7@rp) (set! gb2ed1@stx? (lambda (gb32b7@x) (and (simple-struct? gb32b7@x) (eq? (simple-struct-name gb32b7@x) 'stx)))) (set! gb4ba8@gb2ed1@stx? gb2ed1@stx?) (set! gb2ed3@stx-expr (lambda (gb32b9@x) (simple-struct-ref gb32b9@x '0))) (set! gb4ba9@gb2ed3@stx-expr gb2ed3@stx-expr) (set! gb2ed5@set-stx-expr! (lambda (gb32bb@x gb32bc@val) (simple-struct-set! gb32bb@x '0 gb32bc@val))) (set! gb4baa@gb2ed5@set-stx-expr! gb2ed5@set-stx-expr!) (set! gb2ed7@stx-mark* (lambda (gb32bf@x) (simple-struct-ref gb32bf@x '1))) (set! gb4bab@gb2ed7@stx-mark* gb2ed7@stx-mark*) (set! gb2ed9@set-stx-mark*! (lambda (gb32c1@x gb32c2@val) (simple-struct-set! gb32c1@x '1 gb32c2@val))) (set! gb4bac@gb2ed9@set-stx-mark*! gb2ed9@set-stx-mark*!) (set! gb2edb@stx-subst* (lambda (gb32c5@x) (simple-struct-ref gb32c5@x '2))) (set! gb4bad@gb2edb@stx-subst* gb2edb@stx-subst*) (set! gb2edd@set-stx-subst*! (lambda (gb32c7@x gb32c8@val) (simple-struct-set! gb32c7@x '2 gb32c8@val))) (set! gb4bae@gb2edd@set-stx-subst*! gb2edd@set-stx-subst*!) (set! gb2edf@stx-ae* (lambda (gb32cb@x) (simple-struct-ref gb32cb@x '3))) (set! gb4baf@gb2edf@stx-ae* gb2edf@stx-ae*) (set! gb2ee1@set-stx-ae*! (lambda (gb32cd@x gb32ce@val) (simple-struct-set! gb32cd@x '3 gb32ce@val))) (set! gb4bb0@gb2ee1@set-stx-ae*! gb2ee1@set-stx-ae*!) (set! gb2ee3@dummy '3) (set! gb4bb1@gb2ee3@dummy gb2ee3@dummy) (set! gb2ee5@datum->stx (lambda (gb32d1@id gb32d2@datum) (make-simple-struct 'stx '5 (list gb32d2@datum (gb2ed7@stx-mark* gb32d1@id) (gb2edb@stx-subst* gb32d1@id) (gb2edf@stx-ae* gb32d1@id))))) (set! gb4bb2@gb2ee5@datum->stx gb2ee5@datum->stx) (set! gb2ee7@gen-mark (lambda () (string '#\m))) (set! gb4bb3@gb2ee7@gen-mark gb2ee7@gen-mark) (set! gb2ee9@anti-mark '#f) (set! gb4bb4@gb2ee9@anti-mark gb2ee9@anti-mark) (set! gb2eeb@anti-mark? not) (set! gb4bb5@gb2eeb@anti-mark? gb2eeb@anti-mark?) (set! gb2eed@mkstx (lambda (gb32d5@e gb32d6@m* gb32d7@s* gb32d8@ae*) (if (and (gb2ed1@stx? gb32d5@e) (not (gb2e8b@top-marked? gb32d6@m*))) (call-with-values (lambda () (join-wraps gb32d6@m* gb32d7@s* gb32d8@ae* gb32d5@e)) (lambda (gb32e3@gb32de gb32e4@gb32e0 gb32e5@gb32e2) (let ((gb32e9@ae* gb32e5@gb32e2) (gb32ea@s* gb32e4@gb32e0) (gb32eb@m* gb32e3@gb32de)) (make-simple-struct 'stx '5 (list (gb2ed3@stx-expr gb32d5@e) gb32eb@m* gb32ea@s* gb32e9@ae*))))) (make-simple-struct 'stx '5 (list gb32d5@e gb32d6@m* gb32d7@s* gb32d8@ae*))))) (set! gb4bb6@gb2eed@mkstx gb2eed@mkstx) (set! gb2eef@add-subst (lambda (gb32ef@subst gb32f0@e) (gb2eed@mkstx gb32f0@e '() (list gb32ef@subst) '()))) (set! gb4bb7@gb2eef@add-subst gb2eef@add-subst) (set! gb2ef1@add-mark (lambda (gb32f3@mark gb32f4@subst gb32f5@expr gb32f6@ae) (letrec* ((gb32fc@merge-ae* (lambda (gb3323@ls1 gb3324@ls2) (if (and (pair? gb3323@ls1) (pair? gb3324@ls2) (not (car gb3324@ls2))) (gb32fe@cancel gb3323@ls1 gb3324@ls2) (append gb3323@ls1 gb3324@ls2)))) (gb32fe@cancel (lambda (gb3319@ls1 gb331a@ls2) (let gb3321@f ((gb331d@x (car gb3319@ls1)) (gb331e@ls1 (cdr gb3319@ls1))) (if (null? gb331e@ls1) (cdr gb331a@ls2) (cons gb331d@x (gb3321@f (car gb331e@ls1) (cdr gb331e@ls1))))))) (gb3300@f (lambda (gb3301@e gb3302@m gb3303@s1* gb3304@ae*) (if (pair? gb3301@e) (let ((gb3309@a (gb3300@f (car gb3301@e) gb3302@m gb3303@s1* gb3304@ae*)) (gb330a@d (gb3300@f (cdr gb3301@e) gb3302@m gb3303@s1* gb3304@ae*))) (if (eq? gb3309@a gb330a@d) gb3301@e (cons gb3309@a gb330a@d))) (if (vector? gb3301@e) (let ((gb330d@ls1 (vector->list gb3301@e))) (let ((gb330f@ls2 (map (lambda (gb3311@x) (gb3300@f gb3311@x gb3302@m gb3303@s1* gb3304@ae*)) gb330d@ls1))) (if (for-all eq? gb330d@ls1 gb330f@ls2) gb3301@e (list->vector gb330f@ls2)))) (if (gb2ed1@stx? gb3301@e) (let ((gb3313@m* (gb2ed7@stx-mark* gb3301@e)) (gb3314@s2* (gb2edb@stx-subst* gb3301@e))) (if (null? gb3313@m*) (gb3300@f (gb2ed3@stx-expr gb3301@e) gb3302@m (append gb3303@s1* gb3314@s2*) (gb32fc@merge-ae* gb3304@ae* (gb2edf@stx-ae* gb3301@e))) (if (eq? (car gb3313@m*) gb2ee9@anti-mark) (make-simple-struct 'stx '5 (list (gb2ed3@stx-expr gb3301@e) (cdr gb3313@m*) (cdr (append gb3303@s1* gb3314@s2*)) (gb32fc@merge-ae* gb3304@ae* (gb2edf@stx-ae* gb3301@e)))) (make-simple-struct 'stx '5 (list (gb2ed3@stx-expr gb3301@e) (cons gb3302@m gb3313@m*) (let ((gb3317@s* (cons 'shift (append gb3303@s1* gb3314@s2*)))) (if gb32f4@subst (cons gb32f4@subst gb3317@s*) gb3317@s*)) (gb32fc@merge-ae* gb3304@ae* (gb2edf@stx-ae* gb3301@e))))))) (if (symbol? gb3301@e) (gb31ec@syntax-violation '#f '"raw symbol encountered in output of macro" gb32f5@expr gb3301@e) (make-simple-struct 'stx '5 (list gb3301@e (list gb3302@m) gb3303@s1* gb3304@ae*))))))))) (gb2eed@mkstx (gb3300@f gb32f5@expr gb32f3@mark '() '()) '() '() (list gb32f6@ae))))) (set! gb4bb8@gb2ef1@add-mark gb2ef1@add-mark) (set! gb2ef3@syntax-kind? (lambda (gb3327@x gb3328@p?) (if (gb2ed1@stx? gb3327@x) (gb2ef3@syntax-kind? (gb2ed3@stx-expr gb3327@x) gb3328@p?) (if (gb2a49@gb291b@annotation? gb3327@x) (gb2ef3@syntax-kind? (gb2a4b@gb291f@annotation-expression gb3327@x) gb3328@p?) (gb3328@p? gb3327@x))))) (set! gb4bb9@gb2ef3@syntax-kind? gb2ef3@syntax-kind?) (set! gb2ef5@syntax-vector->list (lambda (gb332b@x) (if (gb2ed1@stx? gb332b@x) (let ((gb332d@ls (gb2ef5@syntax-vector->list (gb2ed3@stx-expr gb332b@x))) (gb332e@m* (gb2ed7@stx-mark* gb332b@x)) (gb332f@s* (gb2edb@stx-subst* gb332b@x)) (gb3330@ae* (gb2edf@stx-ae* gb332b@x))) (map (lambda (gb3335@x) (gb2eed@mkstx gb3335@x gb332e@m* gb332f@s* gb3330@ae*)) gb332d@ls)) (if (gb2a49@gb291b@annotation? gb332b@x) (gb2ef5@syntax-vector->list (gb2a4b@gb291f@annotation-expression gb332b@x)) (if (vector? gb332b@x) (vector->list gb332b@x) (assertion-violation 'syntax-vector->list '"BUG: not a syntax vector" gb332b@x)))))) (set! gb4bba@gb2ef5@syntax-vector->list gb2ef5@syntax-vector->list) (set! gb2ef7@syntax-pair? (lambda (gb3337@x) (gb2ef3@syntax-kind? gb3337@x pair?))) (set! gb4bbb@gb2ef7@syntax-pair? gb2ef7@syntax-pair?) (set! gb2ef9@syntax-vector? (lambda (gb3339@x) (gb2ef3@syntax-kind? gb3339@x vector?))) (set! gb4bbc@gb2ef9@syntax-vector? gb2ef9@syntax-vector?) (set! gb2efb@syntax-null? (lambda (gb333b@x) (gb2ef3@syntax-kind? gb333b@x null?))) (set! gb4bbd@gb2efb@syntax-null? gb2efb@syntax-null?) (set! gb2efd@syntax-list? (lambda (gb333d@x) (or (gb2efb@syntax-null? gb333d@x) (and (gb2ef7@syntax-pair? gb333d@x) (gb2efd@syntax-list? (gb2f01@syntax-cdr gb333d@x)))))) (set! gb4bbe@gb2efd@syntax-list? gb2efd@syntax-list?) (set! gb2eff@syntax-car (lambda (gb333f@x) (if (gb2ed1@stx? gb333f@x) (gb2eed@mkstx (gb2eff@syntax-car (gb2ed3@stx-expr gb333f@x)) (gb2ed7@stx-mark* gb333f@x) (gb2edb@stx-subst* gb333f@x) (gb2edf@stx-ae* gb333f@x)) (if (gb2a49@gb291b@annotation? gb333f@x) (gb2eff@syntax-car (gb2a4b@gb291f@annotation-expression gb333f@x)) (if (pair? gb333f@x) (car gb333f@x) (assertion-violation 'syntax-car '"BUG: not a pair" gb333f@x)))))) (set! gb4bbf@gb2eff@syntax-car gb2eff@syntax-car) (set! gb2f01@syntax-cdr (lambda (gb3341@x) (if (gb2ed1@stx? gb3341@x) (gb2eed@mkstx (gb2f01@syntax-cdr (gb2ed3@stx-expr gb3341@x)) (gb2ed7@stx-mark* gb3341@x) (gb2edb@stx-subst* gb3341@x) (gb2edf@stx-ae* gb3341@x)) (if (gb2a49@gb291b@annotation? gb3341@x) (gb2f01@syntax-cdr (gb2a4b@gb291f@annotation-expression gb3341@x)) (if (pair? gb3341@x) (cdr gb3341@x) (assertion-violation 'syntax-cdr '"BUG: not a pair" gb3341@x)))))) (set! gb4bc0@gb2f01@syntax-cdr gb2f01@syntax-cdr) (set! gb2f03@syntax->list (lambda (gb3343@x) (if (gb2ef7@syntax-pair? gb3343@x) (cons (gb2eff@syntax-car gb3343@x) (gb2f03@syntax->list (gb2f01@syntax-cdr gb3343@x))) (if (gb2efb@syntax-null? gb3343@x) '() (assertion-violation 'syntax->list '"BUG: invalid argument" gb3343@x))))) (set! gb4bc1@gb2f03@syntax->list gb2f03@syntax->list) (set! gb2f05@id? (lambda (gb3345@x) (and (gb2ed1@stx? gb3345@x) (symbol? (gb2ed3@stx-expr gb3345@x))))) (set! gb4bc2@gb2f05@id? gb2f05@id?) (set! gb2f07@id->sym (lambda (gb3347@x) (gb2ed3@stx-expr gb3347@x))) (set! gb4bc3@gb2f07@id->sym gb2f07@id->sym) (set! gb2f09@bound-id=? (lambda (gb3349@x gb334a@y) (and (eq? (gb2f07@id->sym gb3349@x) (gb2f07@id->sym gb334a@y)) (same-marks? (gb2ed7@stx-mark* gb3349@x) (gb2ed7@stx-mark* gb334a@y))))) (set! gb4bc4@gb2f09@bound-id=? gb2f09@bound-id=?) (set! gb2f0b@free-id=? (lambda (gb334d@i gb334e@j) (let ((gb3351@t0 (id->real-label gb334d@i)) (gb3352@t1 (id->real-label gb334e@j))) (if (or gb3351@t0 gb3352@t1) (eq? gb3351@t0 gb3352@t1) (eq? (gb2f07@id->sym gb334d@i) (gb2f07@id->sym gb334e@j)))))) (set! gb4bc5@gb2f0b@free-id=? gb2f0b@free-id=?) (set! gb2f0d@valid-bound-ids? (lambda (gb3355@id*) (and (for-all gb2f05@id? gb3355@id*) (gb2f0f@distinct-bound-ids? gb3355@id*)))) (set! gb4bc6@gb2f0d@valid-bound-ids? gb2f0d@valid-bound-ids?) (set! gb2f0f@distinct-bound-ids? (lambda (gb3357@id*) (or (null? gb3357@id*) (and (not (gb2f11@bound-id-member? (car gb3357@id*) (cdr gb3357@id*))) (gb2f0f@distinct-bound-ids? (cdr gb3357@id*)))))) (set! gb4bc7@gb2f0f@distinct-bound-ids? gb2f0f@distinct-bound-ids?) (set! gb2f11@bound-id-member? (lambda (gb3359@id gb335a@id*) (and (pair? gb335a@id*) (or (gb2f09@bound-id=? gb3359@id (car gb335a@id*)) (gb2f11@bound-id-member? gb3359@id (cdr gb335a@id*)))))) (set! gb4bc8@gb2f11@bound-id-member? gb2f11@bound-id-member?) (set! gb2f13@self-evaluating? (lambda (gb335d@x) (or (number? gb335d@x) (string? gb335d@x) (char? gb335d@x) (boolean? gb335d@x) (regexp? gb335d@x) (bytevector? gb335d@x)))) (set! gb4bc9@gb2f13@self-evaluating? gb2f13@self-evaluating?) (set! gb2f15@strip-annotations (lambda (gb335f@x) (if (pair? gb335f@x) (cons (gb2f15@strip-annotations (car gb335f@x)) (gb2f15@strip-annotations (cdr gb335f@x))) (if (vector? gb335f@x) (vector-map gb2f15@strip-annotations gb335f@x) (if (gb2a49@gb291b@annotation? gb335f@x) (gb2a48@gb2919@annotation-stripped gb335f@x) gb335f@x))))) (set! gb4bca@gb2f15@strip-annotations gb2f15@strip-annotations) (set! gb2f17@strip (lambda (gb3361@x gb3362@m*) (if (gb2e8b@top-marked? gb3362@m*) (if (or (gb2a49@gb291b@annotation? gb3361@x) (and (pair? gb3361@x) (gb2a49@gb291b@annotation? (car gb3361@x))) (and (vector? gb3361@x) (> (vector-length gb3361@x) '0) (gb2a49@gb291b@annotation? (vector-ref gb3361@x '0)))) (gb2f15@strip-annotations gb3361@x) gb3361@x) (let gb3367@f ((gb3365@x gb3361@x)) (if (gb2ed1@stx? gb3365@x) (begin (if (pair? (gb2ed3@stx-expr gb3365@x)) (begin (set-source-info! (gb2ed3@stx-expr gb3365@x) '#f) (set-source-info! (cdr (gb2ed3@stx-expr gb3365@x)) '#f) (set-source-info! (car (gb2ed3@stx-expr gb3365@x)) '#f)) (void)) (gb2f17@strip (gb2ed3@stx-expr gb3365@x) (gb2ed7@stx-mark* gb3365@x))) (if (gb2a49@gb291b@annotation? gb3365@x) (gb2a48@gb2919@annotation-stripped gb3365@x) (if (pair? gb3365@x) (let ((gb3369@a (gb3367@f (car gb3365@x))) (gb336a@d (gb3367@f (cdr gb3365@x)))) (if (and (eq? gb3369@a (car gb3365@x)) (eq? gb336a@d (cdr gb3365@x))) gb3365@x (cons gb3369@a gb336a@d))) (if (vector? gb3365@x) (let ((gb336d@old (vector->list gb3365@x))) (let ((gb336f@new (map gb3367@f gb336d@old))) (if (for-all eq? gb336d@old gb336f@new) gb3365@x (list->vector gb336f@new)))) gb3365@x)))))))) (set! gb4bcb@gb2f17@strip gb2f17@strip) (set! gb2f19@stx->datum (lambda (gb3371@x) (gb2f17@strip gb3371@x '()))) (set! gb4bcc@gb2f19@stx->datum gb2f19@stx->datum) (set! gb2f1b@id->label (lambda (gb3373@id) (or (id->real-label gb3373@id) (let ((gb3375@t (gb31fc@top-level-context))) (if gb3375@t ((lambda (gb3377@env) (let ((gb3379@rib (gb31ac@interaction-env-rib gb3377@env))) (call-with-values (lambda () (gb2e95@gen-define-label+loc gb3373@id gb3379@rib)) (lambda (gb337f@gb337c gb3380@gb337e) (let ((gb3383@loc_ gb3380@gb337e) (gb3384@lab gb337f@gb337c)) (begin (gb2ebb@extend-rib! gb3379@rib gb3373@id gb3384@lab) gb3384@lab)))))) gb3375@t) '#f))))) (set! gb4bcd@gb2f1b@id->label gb2f1b@id->label) (set! gb2f1d@label->binding (lambda (gb3387@x gb3388@r) (let ((gb338b@t (gb2d20@gb2b6d@imported-label->binding gb3387@x))) (if gb338b@t ((lambda (gb338d@b) (if (and (pair? gb338d@b) (eq? (car gb338d@b) '$core-rtd)) (cons '$rtd (map gb30c2@bless (cdr gb338d@b))) (if (and (pair? gb338d@b) (eq? (car gb338d@b) 'global-rtd)) (let ((gb338f@lib (cadr gb338d@b)) (gb3390@loc (cddr gb338d@b))) (cons '$rtd (symbol-value gb3390@loc))) gb338d@b))) gb338b@t) (let ((gb3393@t (assq gb3387@x gb3388@r))) (if gb3393@t (cdr gb3393@t) (let ((gb3395@t (gb31fc@top-level-context))) (if gb3395@t ((lambda (gb3397@env) (let ((gb3399@t (assq gb3387@x (gb31b4@interaction-env-locs gb3397@env)))) (if gb3399@t ((lambda (gb339b@p) (cons* 'lexical (cdr gb339b@p) '#f)) gb3399@t) '(displaced-lexical . #f)))) gb3395@t) '(displaced-lexical . #f))))))))) (set! gb4bce@gb2f1d@label->binding gb2f1d@label->binding) (set! gb2f1f@make-binding cons) (set! gb4bcf@gb2f1f@make-binding gb2f1f@make-binding) (set! gb2f21@binding-type car) (set! gb4bd0@gb2f21@binding-type gb2f21@binding-type) (set! gb2f23@binding-value cdr) (set! gb4bd1@gb2f23@binding-value gb2f23@binding-value) (set! gb2f25@raise-unbound-error (lambda (gb339d@id) (gb31ea@syntax-violation* '#f '"unbound identifier" gb339d@id (make-undefined-violation)))) (set! gb4bd2@gb2f25@raise-unbound-error gb2f25@raise-unbound-error) (set! gb2f27@syntax-type (lambda (gb339f@e gb33a0@r) (if (gb2f05@id? gb339f@e) (let ((gb33a3@id gb339f@e)) (let ((gb33a5@label (gb2f1b@id->label gb33a3@id))) (let ((gb33a7@b (gb2f1d@label->binding gb33a5@label gb33a0@r))) (let ((gb33a9@type (gb2f21@binding-type gb33a7@b))) (begin (if (not gb33a5@label) (gb2f25@raise-unbound-error gb33a3@id) (void)) (let ((gb33ab@t gb33a9@type)) (if (memv gb33ab@t '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import export $module $core-rtd library mutable)) (values gb33a9@type (gb2f23@binding-value gb33a7@b) gb33a3@id) (values 'other '#f '#f)))))))) (if (gb2ef7@syntax-pair? gb339f@e) (let ((gb33ad@id (gb2eff@syntax-car gb339f@e))) (if (gb2f05@id? gb33ad@id) (let ((gb33af@label (gb2f1b@id->label gb33ad@id))) (let ((gb33b1@b (gb2f1d@label->binding gb33af@label gb33a0@r))) (let ((gb33b3@type (gb2f21@binding-type gb33b1@b))) (begin (if (not gb33af@label) (gb2f25@raise-unbound-error gb33ad@id) (void)) (let ((gb33b5@t gb33b3@type)) (if (memv gb33b5@t '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module library set! let-syntax letrec-syntax import export $core-rtd)) (values gb33b3@type (gb2f23@binding-value gb33b1@b) gb33ad@id) (values 'call '#f '#f))))))) (values 'call '#f '#f))) (let ((gb33b7@d (gb2f19@stx->datum gb339f@e))) (if (gb2f13@self-evaluating? gb33b7@d) (values 'constant gb33b7@d '#f) (values 'other '#f '#f))))))) (set! gb4bd3@gb2f27@syntax-type gb2f27@syntax-type) (set! gb2f35@sanitize-binding (lambda (gb33b9@x gb33ba@src) (if (procedure? gb33b9@x) (cons* 'local-macro gb33b9@x gb33ba@src) (if (and (pair? gb33b9@x) (eq? (car gb33b9@x) 'macro!) (procedure? (cdr gb33b9@x))) (cons* 'local-macro! (cdr gb33b9@x) gb33ba@src) (if (and (pair? gb33b9@x) (eq? (car gb33b9@x) '$rtd)) gb33b9@x (assertion-violation 'expand '"invalid transformer" gb33b9@x)))))) (set! gb4bd4@gb2f35@sanitize-binding gb2f35@sanitize-binding) (set! gb2f37@make-variable-transformer (lambda (gb33bd@x) (if (procedure? gb33bd@x) (cons 'macro! gb33bd@x) (assertion-violation 'make-variable-transformer '"not a procedure" gb33bd@x)))) (set! gb4bd5@gb2f37@make-variable-transformer gb2f37@make-variable-transformer) (set! gb2f39@variable-transformer? (lambda (gb33bf@x) (and (pair? gb33bf@x) (eq? (car gb33bf@x) 'macro!) (procedure? (cdr gb33bf@x))))) (set! gb4bd6@gb2f39@variable-transformer? gb2f39@variable-transformer?) (set! gb2f3b@variable-transformer-procedure (lambda (gb33c1@x) (if (gb2f39@variable-transformer? gb33c1@x) (cdr gb33c1@x) (assertion-violation 'variable-transformer-procedure '"not a variable transformer" gb33c1@x)))) (set! gb4bd7@gb2f3b@variable-transformer-procedure gb2f3b@variable-transformer-procedure) (set! gb2f3d@make-eval-transformer (lambda (gb33c3@x) (gb2f35@sanitize-binding (eval-core (gb2aab@gb2a63@expanded->core gb33c3@x)) gb33c3@x))) (set! gb4bd8@gb2f3d@make-eval-transformer gb2f3d@make-eval-transformer) (set! gb308e@parse-define (lambda (gb33c5@x) (let ((gb33c7@t gb33c5@x)) (let ((gb33c9@ls/false (gb310c@syntax-dispatch gb33c7@t '(_ (any . any) any . each-any)))) (if (and gb33c9@ls/false (apply (lambda (gb33cb@id gb33cc@fmls gb33cd@b gb33ce@b*) (gb2f05@id? gb33cb@id)) gb33c9@ls/false)) (apply (lambda (gb33d3@id gb33d4@fmls gb33d5@b gb33d6@b*) (begin (gb3132@verify-formals gb33d4@fmls gb33c5@x) (values gb33d3@id (cons 'defun (cons gb33d4@fmls (cons gb33d5@b gb33d6@b*)))))) gb33c9@ls/false) (let ((gb33db@t gb33c7@t)) (let ((gb33dd@ls/false (gb310c@syntax-dispatch gb33db@t '(_ any any)))) (if (and gb33dd@ls/false (apply (lambda (gb33df@id gb33e0@val) (gb2f05@id? gb33df@id)) gb33dd@ls/false)) (apply (lambda (gb33e3@id gb33e4@val) (values gb33e3@id (cons 'expr gb33e4@val))) gb33dd@ls/false) (let ((gb33e7@t gb33db@t)) (let ((gb33e9@ls/false (gb310c@syntax-dispatch gb33e7@t '(_ any)))) (if (and gb33e9@ls/false (apply (lambda (gb33eb@id) (gb2f05@id? gb33eb@id)) gb33e9@ls/false)) (apply (lambda (gb33ed@id) (values gb33ed@id (cons 'expr (gb30c2@bless '(void))))) gb33e9@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb33e7@t)))))))))))) (set! gb4bd9@gb308e@parse-define gb308e@parse-define) (set! gb3090@parse-define-syntax (lambda (gb33ef@x) (let ((gb33f1@t gb33ef@x)) (let ((gb33f3@ls/false (gb310c@syntax-dispatch gb33f1@t '(_ any any)))) (if (and gb33f3@ls/false (apply (lambda (gb33f5@id gb33f6@val) (gb2f05@id? gb33f5@id)) gb33f3@ls/false)) (apply (lambda (gb33f9@id gb33fa@val) (values gb33f9@id gb33fa@val)) gb33f3@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb33f1@t)))))) (set! gb4bda@gb3090@parse-define-syntax gb3090@parse-define-syntax) (set! gb3092@scheme-stx-hashtable (make-eq-hashtable)) (set! gb4bdb@gb3092@scheme-stx-hashtable gb3092@scheme-stx-hashtable) (set! gb3094@scheme-stx (lambda (gb33fd@sym) (or (hashtable-ref gb3092@scheme-stx-hashtable gb33fd@sym '#f) (let ((gb33ff@subst (gb2cfc@gb2b25@library-subst (gb2d1a@gb2b61@find-library-by-name '(psyntax system $all))))) (let ((gb3401@stx (make-simple-struct 'stx '5 (list gb33fd@sym gb2e89@top-mark* '() '())))) (let ((gb3403@stx (let ((gb3405@t (assq gb33fd@sym gb33ff@subst))) (if gb3405@t ((lambda (gb3407@x) (let ((gb3409@name (car gb3407@x)) (gb340a@label (cdr gb3407@x))) (gb2eef@add-subst (make-simple-struct 'rib '6 (list (list gb3409@name) (list gb2e89@top-mark*) (list gb340a@label) '#f '#f)) gb3401@stx))) gb3405@t) gb3401@stx)))) (begin (hashtable-set! gb3092@scheme-stx-hashtable gb33fd@sym gb3403@stx) gb3403@stx))))))) (set! gb4bdc@gb3094@scheme-stx gb3094@scheme-stx) (set! gb3096@lexical-var car) (set! gb4bdd@gb3096@lexical-var gb3096@lexical-var) (set! gb3098@lexical-mutable? cdr) (set! gb4bde@gb3098@lexical-mutable? gb3098@lexical-mutable?) (set! gb309a@set-lexical-mutable! set-cdr!) (set! gb4bdf@gb309a@set-lexical-mutable! gb309a@set-lexical-mutable!) (set! gb309c@add-lexical (lambda (gb340d@lab gb340e@lex gb340f@r) (cons (cons* gb340d@lab 'lexical gb340e@lex '#f) gb340f@r))) (set! gb4be0@gb309c@add-lexical gb309c@add-lexical) (set! gb309e@add-lexicals (lambda (gb3413@lab* gb3414@lex* gb3415@r) (if (null? gb3413@lab*) gb3415@r (gb309e@add-lexicals (cdr gb3413@lab*) (cdr gb3414@lex*) (gb309c@add-lexical (car gb3413@lab*) (car gb3414@lex*) gb3415@r))))) (set! gb4be1@gb309e@add-lexicals gb309e@add-lexicals) (set! gb30a0@letrec-helper (lambda (gb3419@e gb341a@r gb341b@mr gb341c@build) (let ((gb3421@t gb3419@e)) (let ((gb3423@ls/false (gb310c@syntax-dispatch gb3421@t '(_ #(each (any any)) any . each-any)))) (if gb3423@ls/false (apply (lambda (gb3425@lhs* gb3426@rhs* gb3427@b gb3428@b*) (if (not (gb2f0d@valid-bound-ids? gb3425@lhs*)) (gb30c6@invalid-fmls-error gb3419@e gb3425@lhs*) (let ((gb342d@lex* (map gb2e8d@gen-lexical gb3425@lhs*)) (gb342e@lab* (map gb2e91@gen-label gb3425@lhs*))) (let ((gb3431@rib (gb2ec5@make-full-rib gb3425@lhs* gb342e@lab*)) (gb3432@r (gb309e@add-lexicals gb342e@lab* gb342d@lex* gb341a@r))) (let ((gb3435@body (gb3144@chi-internal (gb2eef@add-subst gb3431@rib (cons gb3427@b gb3428@b*)) gb3432@r gb341b@mr)) (gb3436@rhs* (gb312a@chi-expr* (map (lambda (gb3439@x) (gb2eef@add-subst gb3431@rib gb3439@x)) gb3426@rhs*) gb3432@r gb341b@mr))) (gb341c@build '#f gb342d@lex* gb3436@rhs* gb3435@body)))))) gb3423@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3421@t)))))) (set! gb4be2@gb30a0@letrec-helper gb30a0@letrec-helper) (set! gb30a2@let-transformer (lambda (gb343b@e gb343c@r gb343d@mr) (let ((gb3441@t gb343b@e)) (let ((gb3443@ls/false (gb310c@syntax-dispatch gb3441@t '(_ #(each (any any)) any . each-any)))) (if gb3443@ls/false (apply (lambda (gb3445@lhs* gb3446@rhs* gb3447@b gb3448@b*) (if (not (gb2f0d@valid-bound-ids? gb3445@lhs*)) (gb30c6@invalid-fmls-error gb343b@e gb3445@lhs*) (let ((gb344d@lex* (map gb2e8d@gen-lexical gb3445@lhs*)) (gb344e@lab* (map gb2e91@gen-label gb3445@lhs*)) (gb344f@rhs* (gb312a@chi-expr* gb3446@rhs* gb343c@r gb343d@mr))) (let ((gb3453@rib (gb2ec5@make-full-rib gb3445@lhs* gb344e@lab*)) (gb3454@r (gb309e@add-lexicals gb344e@lab* gb344d@lex* gb343c@r))) (let ((gb3457@body (gb3144@chi-internal (gb2eef@add-subst gb3453@rib (cons gb3447@b gb3448@b*)) gb3454@r gb343d@mr))) (gb2e6d@gb2dd0@build-let '#f gb344d@lex* gb344f@rhs* gb3457@body)))))) gb3443@ls/false) (let ((gb3459@t gb3441@t)) (let ((gb345b@ls/false (gb310c@syntax-dispatch gb3459@t '(_ any #(each (any any)) any . each-any)))) (if gb345b@ls/false (apply (lambda (gb345d@loop gb345e@lhs* gb345f@rhs* gb3460@b gb3461@b*) (if (not (gb2f0d@valid-bound-ids? gb345e@lhs*)) (gb30c6@invalid-fmls-error gb343b@e gb345e@lhs*) (let ((gb3467@lex* (map gb2e8d@gen-lexical gb345e@lhs*)) (gb3468@lab* (map gb2e91@gen-label gb345e@lhs*)) (gb3469@rhs* (gb312a@chi-expr* gb345f@rhs* gb343c@r gb343d@mr)) (gb346a@loop-lex (gb2e8d@gen-lexical gb345d@loop)) (gb346b@loop-lab (gb2e91@gen-label gb345d@loop))) (let ((gb3471@loop-rib (gb2ec5@make-full-rib (list gb345d@loop) (list gb346b@loop-lab))) (gb3472@rib (gb2ec5@make-full-rib gb345e@lhs* gb3468@lab*)) (gb3473@r (gb309e@add-lexicals (cons gb346b@loop-lab gb3468@lab*) (cons gb346a@loop-lex gb3467@lex*) gb343c@r))) (let ((gb3477@body (gb3144@chi-internal (gb2eef@add-subst gb3471@loop-rib (gb2eef@add-subst gb3472@rib (cons gb3460@b gb3461@b*))) gb3473@r gb343d@mr))) (gb2e6e@gb2dd2@build-named-let '#f gb346a@loop-lex gb3467@lex* gb3469@rhs* gb3477@body)))))) gb345b@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3459@t))))))))) (set! gb4be3@gb30a2@let-transformer gb30a2@let-transformer) (set! gb30a4@letrec-transformer (lambda (gb3479@e gb347a@r gb347b@mr) (gb30a0@letrec-helper gb3479@e gb347a@r gb347b@mr gb2e6c@gb2dce@build-letrec))) (set! gb4be4@gb30a4@letrec-transformer gb30a4@letrec-transformer) (set! gb30a6@letrec*-transformer (lambda (gb347f@e gb3480@r gb3481@mr) (gb30a0@letrec-helper gb347f@e gb3480@r gb3481@mr gb2e6f@gb2dd4@build-letrec*))) (set! gb4be5@gb30a6@letrec*-transformer gb30a6@letrec*-transformer) (set! gb30a8@fluid-let-syntax-transformer (lambda (gb3485@e gb3486@r gb3487@mr) (letrec* ((gb348c@lookup (lambda (gb349f@x) (or (gb2f1b@id->label gb349f@x) (gb31ec@syntax-violation '#f '"unbound identifier" gb3485@e gb349f@x))))) (let ((gb348d@t gb3485@e)) (let ((gb348f@ls/false (gb310c@syntax-dispatch gb348d@t '(_ #(each (any any)) any . each-any)))) (if gb348f@ls/false (apply (lambda (gb3491@lhs* gb3492@rhs* gb3493@b gb3494@b*) (if (not (gb2f0d@valid-bound-ids? gb3491@lhs*)) (gb30c6@invalid-fmls-error gb3485@e gb3491@lhs*) (let ((gb3499@lab* (map gb348c@lookup gb3491@lhs*)) (gb349a@rhs* (map (lambda (gb349d@x) (gb2f3d@make-eval-transformer (gb3166@expand-transformer gb349d@x gb3487@mr))) gb3492@rhs*))) (gb3144@chi-internal (cons gb3493@b gb3494@b*) (append (map cons gb3499@lab* gb349a@rhs*) gb3486@r) (append (map cons gb3499@lab* gb349a@rhs*) gb3487@mr))))) gb348f@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb348d@t))))))) (set! gb4be6@gb30a8@fluid-let-syntax-transformer gb30a8@fluid-let-syntax-transformer) (set! gb30aa@type-descriptor-transformer (lambda (gb34a1@e gb34a2@r gb34a3@mr) (let ((gb34a7@t gb34a1@e)) (let ((gb34a9@ls/false (gb310c@syntax-dispatch gb34a7@t '(_ any)))) (if (and gb34a9@ls/false (apply (lambda (gb34ab@id) (gb2f05@id? gb34ab@id)) gb34a9@ls/false)) (apply (lambda (gb34ad@id) (let ((gb34af@lab (gb2f1b@id->label gb34ad@id))) (let ((gb34b1@b (gb2f1d@label->binding gb34af@lab gb34a2@r))) (let ((gb34b3@type (gb2f21@binding-type gb34b1@b))) (begin (if (not gb34af@lab) (gb2f25@raise-unbound-error gb34ad@id) (void)) (if (not (and (eq? gb34b3@type '$rtd) (not (list? (gb2f23@binding-value gb34b1@b))))) (gb31ec@syntax-violation '#f '"not a record type" gb34a1@e) (void)) (list 'quote (gb2f23@binding-value gb34b1@b))))))) gb34a9@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb34a7@t)))))) (set! gb4be7@gb30aa@type-descriptor-transformer gb30aa@type-descriptor-transformer) (set! gb30ac@record-type-descriptor-transformer (lambda (gb34b5@e gb34b6@r gb34b7@mr) (let ((gb34bb@t gb34b5@e)) (let ((gb34bd@ls/false (gb310c@syntax-dispatch gb34bb@t '(_ any)))) (if (and gb34bd@ls/false (apply (lambda (gb34bf@id) (gb2f05@id? gb34bf@id)) gb34bd@ls/false)) (apply (lambda (gb34c1@id) (let ((gb34c3@lab (gb2f1b@id->label gb34c1@id))) (let ((gb34c5@b (gb2f1d@label->binding gb34c3@lab gb34b6@r))) (let ((gb34c7@type (gb2f21@binding-type gb34c5@b))) (begin (if (not gb34c3@lab) (gb2f25@raise-unbound-error gb34c1@id) (void)) (if (not (and (eq? gb34c7@type '$rtd) (list? (gb2f23@binding-value gb34c5@b)))) (gb31ec@syntax-violation '#f '"not a record type" gb34b5@e) (void)) (gb312e@chi-expr (car (gb2f23@binding-value gb34c5@b)) gb34b6@r gb34b7@mr)))))) gb34bd@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb34bb@t)))))) (set! gb4be8@gb30ac@record-type-descriptor-transformer gb30ac@record-type-descriptor-transformer) (set! gb30ae@record-constructor-descriptor-transformer (lambda (gb34c9@e gb34ca@r gb34cb@mr) (let ((gb34cf@t gb34c9@e)) (let ((gb34d1@ls/false (gb310c@syntax-dispatch gb34cf@t '(_ any)))) (if (and gb34d1@ls/false (apply (lambda (gb34d3@id) (gb2f05@id? gb34d3@id)) gb34d1@ls/false)) (apply (lambda (gb34d5@id) (let ((gb34d7@lab (gb2f1b@id->label gb34d5@id))) (let ((gb34d9@b (gb2f1d@label->binding gb34d7@lab gb34ca@r))) (let ((gb34db@type (gb2f21@binding-type gb34d9@b))) (begin (if (not gb34d7@lab) (gb2f25@raise-unbound-error gb34d5@id) (void)) (if (not (and (eq? gb34db@type '$rtd) (list? (gb2f23@binding-value gb34d9@b)))) (gb31ec@syntax-violation '#f '"invalid type" gb34c9@e) (void)) (gb312e@chi-expr (cadr (gb2f23@binding-value gb34d9@b)) gb34ca@r gb34cb@mr)))))) gb34d1@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb34cf@t)))))) (set! gb4be9@gb30ae@record-constructor-descriptor-transformer gb30ae@record-constructor-descriptor-transformer) (set! gb30b0@when-macro (lambda (gb34dd@e) (let ((gb34df@t gb34dd@e)) (let ((gb34e1@ls/false (gb310c@syntax-dispatch gb34df@t '(_ any any . each-any)))) (if gb34e1@ls/false (apply (lambda (gb34e3@test gb34e4@e gb34e5@e*) (gb30c2@bless (list 'if gb34e3@test (cons 'begin (cons gb34e4@e gb34e5@e*))))) gb34e1@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb34df@t)))))) (set! gb4bea@gb30b0@when-macro gb30b0@when-macro) (set! gb30b2@unless-macro (lambda (gb34e9@e) (let ((gb34eb@t gb34e9@e)) (let ((gb34ed@ls/false (gb310c@syntax-dispatch gb34eb@t '(_ any any . each-any)))) (if gb34ed@ls/false (apply (lambda (gb34ef@test gb34f0@e gb34f1@e*) (gb30c2@bless (list 'if (list 'not gb34ef@test) (cons 'begin (cons gb34f0@e gb34f1@e*))))) gb34ed@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb34eb@t)))))) (set! gb4beb@gb30b2@unless-macro gb30b2@unless-macro) (set! gb30b4@if-transformer (lambda (gb34f5@e gb34f6@r gb34f7@mr) (let ((gb34fb@t gb34f5@e)) (let ((gb34fd@ls/false (gb310c@syntax-dispatch gb34fb@t '(_ any any any)))) (if gb34fd@ls/false (apply (lambda (gb34ff@e0 gb3500@e1 gb3501@e2) (list 'if (gb312e@chi-expr gb34ff@e0 gb34f6@r gb34f7@mr) (gb312e@chi-expr gb3500@e1 gb34f6@r gb34f7@mr) (gb312e@chi-expr gb3501@e2 gb34f6@r gb34f7@mr))) gb34fd@ls/false) (let ((gb3505@t gb34fb@t)) (let ((gb3507@ls/false (gb310c@syntax-dispatch gb3505@t '(_ any any)))) (if gb3507@ls/false (apply (lambda (gb3509@e0 gb350a@e1) (list 'if (gb312e@chi-expr gb3509@e0 gb34f6@r gb34f7@mr) (gb312e@chi-expr gb350a@e1 gb34f6@r gb34f7@mr) (gb2e6b@gb2dcc@build-void))) gb3507@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3505@t))))))))) (set! gb4bec@gb30b4@if-transformer gb30b4@if-transformer) (set! gb30b6@and-transformer (lambda (gb350d@e gb350e@r gb350f@mr) (let ((gb3513@t gb350d@e)) (let ((gb3515@ls/false (gb310c@syntax-dispatch gb3513@t '(_ . each-any)))) (if gb3515@ls/false (apply (lambda (gb3517@e*) (cons 'and (gb312a@chi-expr* gb3517@e* gb350e@r gb350f@mr))) gb3515@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3513@t)))))) (set! gb4bed@gb30b6@and-transformer gb30b6@and-transformer) (set! gb30b8@or-transformer (lambda (gb3519@e gb351a@r gb351b@mr) (let ((gb351f@t gb3519@e)) (let ((gb3521@ls/false (gb310c@syntax-dispatch gb351f@t '(_ . each-any)))) (if gb3521@ls/false (apply (lambda (gb3523@e*) (cons 'or (gb312a@chi-expr* gb3523@e* gb351a@r gb351b@mr))) gb3521@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb351f@t)))))) (set! gb4bee@gb30b8@or-transformer gb30b8@or-transformer) (set! gb30ba@case-macro (lambda (gb3525@e) (letrec* ((gb3528@build-last (lambda (gb354f@cls) (let ((gb3551@t gb354f@cls)) (let ((gb3553@ls/false (gb310c@syntax-dispatch gb3551@t '(#(scheme-id else) any . each-any)))) (if gb3553@ls/false (apply (lambda (gb3555@e gb3556@e*) (cons 'begin (cons gb3555@e gb3556@e*))) gb3553@ls/false) (let ((gb3559@t gb3551@t)) (let ((gb355b@ls/false (gb310c@syntax-dispatch gb3559@t '_))) (if gb355b@ls/false (apply (lambda () (gb352a@build-one gb354f@cls '(if #f #f))) gb355b@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3559@t))))))))) (gb352a@build-one (lambda (gb3541@cls gb3542@k) (let ((gb3545@t gb3541@cls)) (let ((gb3547@ls/false (gb310c@syntax-dispatch gb3545@t '(each-any any . each-any)))) (if gb3547@ls/false (apply (lambda (gb3549@d* gb354a@e gb354b@e*) (list 'if (list 'memv 't (list 'quote gb3549@d*)) (cons 'begin (cons gb354a@e gb354b@e*)) gb3542@k)) gb3547@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3545@t))))))) (let ((gb352b@t gb3525@e)) (let ((gb352d@ls/false (gb310c@syntax-dispatch gb352b@t '(_ any)))) (if gb352d@ls/false (apply (lambda (gb352f@expr) (gb30c2@bless (cons 'let (cons (list (list 't gb352f@expr)) '((if #f #f)))))) gb352d@ls/false) (let ((gb3531@t gb352b@t)) (let ((gb3533@ls/false (gb310c@syntax-dispatch gb3531@t '(_ any any . each-any)))) (if gb3533@ls/false (apply (lambda (gb3535@expr gb3536@cls gb3537@cls*) (gb30c2@bless (list 'let (list (list 't gb3535@expr)) (let gb353f@f ((gb353b@cls gb3536@cls) (gb353c@cls* gb3537@cls*)) (if (null? gb353c@cls*) (gb3528@build-last gb353b@cls) (gb352a@build-one gb353b@cls (gb353f@f (car gb353c@cls*) (cdr gb353c@cls*)))))))) gb3533@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3531@t)))))))))) (set! gb4bef@gb30ba@case-macro gb30ba@case-macro) (set! gb30bc@quote-transformer (lambda (gb355d@e gb355e@r gb355f@mr) (let ((gb3563@t gb355d@e)) (let ((gb3565@ls/false (gb310c@syntax-dispatch gb3563@t '(_ any)))) (if gb3565@ls/false (apply (lambda (gb3567@datum) (list 'quote (gb2f19@stx->datum gb3567@datum))) gb3565@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3563@t)))))) (set! gb4bf0@gb30bc@quote-transformer gb30bc@quote-transformer) (set! gb30be@case-lambda-transformer (lambda (gb3569@e gb356a@r gb356b@mr) (let ((gb356f@t gb3569@e)) (let ((gb3571@ls/false (gb310c@syntax-dispatch gb356f@t '(_ . #(each (any any . each-any)))))) (if gb3571@ls/false (apply (lambda (gb3573@fmls* gb3574@b* gb3575@b**) (call-with-values (lambda () (gb3136@chi-lambda-clause* gb3569@e gb3573@fmls* (map cons gb3574@b* gb3575@b**) gb356a@r gb356b@mr)) (lambda (gb357d@gb357a gb357e@gb357c) (let ((gb3581@body* gb357e@gb357c) (gb3582@fmls* gb357d@gb357a)) (gb2e69@gb2d9c@build-case-lambda '#f gb3582@fmls* gb3581@body*))))) gb3571@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb356f@t)))))) (set! gb4bf1@gb30be@case-lambda-transformer gb30be@case-lambda-transformer) (set! gb30c0@lambda-transformer (lambda (gb3585@e gb3586@r gb3587@mr) (let ((gb358b@t gb3585@e)) (let ((gb358d@ls/false (gb310c@syntax-dispatch gb358b@t '(_ any any . each-any)))) (if gb358d@ls/false (apply (lambda (gb358f@fmls gb3590@b gb3591@b*) (call-with-values (lambda () (gb3134@chi-lambda-clause gb3585@e gb358f@fmls (cons gb3590@b gb3591@b*) gb3586@r gb3587@mr)) (lambda (gb3599@gb3596 gb359a@gb3598) (let ((gb359d@body gb359a@gb3598) (gb359e@fmls gb3599@gb3596)) (gb2e68@gb2d9a@build-lambda '#f gb359e@fmls gb359d@body))))) gb358d@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb358b@t)))))) (set! gb4bf2@gb30c0@lambda-transformer gb30c0@lambda-transformer) (set! gb30c2@bless (lambda (gb35a1@x) (gb2eed@mkstx (let gb35a5@f ((gb35a3@x gb35a1@x)) (if (gb2ed1@stx? gb35a3@x) gb35a3@x (if (pair? gb35a3@x) (cons (gb35a5@f (car gb35a3@x)) (gb35a5@f (cdr gb35a3@x))) (if (symbol? gb35a3@x) (gb3094@scheme-stx gb35a3@x) (if (vector? gb35a3@x) (vector-map gb35a5@f gb35a3@x) gb35a3@x))))) '() '() '()))) (set! gb4bf3@gb30c2@bless gb30c2@bless) (set! gb30c4@with-syntax-macro (lambda (gb35a7@e) (let ((gb35a9@t gb35a7@e)) (let ((gb35ab@ls/false (gb310c@syntax-dispatch gb35a9@t '(_ #(each (any any)) any . each-any)))) (if gb35ab@ls/false (apply (lambda (gb35ad@pat* gb35ae@expr* gb35af@b gb35b0@b*) (let ((gb35b5@idn* (let gb35b9@f ((gb35b7@pat* gb35ad@pat*)) (if (null? gb35b7@pat*) '() (call-with-values (lambda () (gb310a@convert-pattern (car gb35b7@pat*) '())) (lambda (gb35bf@gb35bc gb35c0@gb35be) (let ((gb35c3@idn* gb35c0@gb35be) (gb35c4@pat gb35bf@gb35bc)) (append gb35c3@idn* (gb35b9@f (cdr gb35b7@pat*)))))))))) (begin (gb3132@verify-formals (map car gb35b5@idn*) gb35a7@e) (let ((gb35c7@t* (gb31da@generate-temporaries gb35ae@expr*))) (gb30c2@bless (list 'let (map list gb35c7@t* gb35ae@expr*) (let gb35cd@f ((gb35c9@pat* gb35ad@pat*) (gb35ca@t* gb35c7@t*)) (if (null? gb35c9@pat*) (cons 'let (cons '() (cons gb35af@b gb35b0@b*))) (list 'syntax-case (car gb35ca@t*) '() (list (car gb35c9@pat*) (gb35cd@f (cdr gb35c9@pat*) (cdr gb35ca@t*))) (list '_ (list 'assertion-violation ''with-syntax '"pattern does not match value" (list 'quote (car gb35c9@pat*)) (car gb35ca@t*)))))))))))) gb35ab@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb35a9@t)))))) (set! gb4bf4@gb30c4@with-syntax-macro gb30c4@with-syntax-macro) (set! gb30c6@invalid-fmls-error (lambda (gb35cf@stx gb35d0@fmls) (let ((gb35d3@t gb35d0@fmls)) (let ((gb35d5@ls/false (gb310c@syntax-dispatch gb35d3@t '#(each+ any () any)))) (if gb35d5@ls/false (apply (lambda (gb35d7@id* gb35d8@last) (let gb35dd@f ((gb35db@id* (if (gb2f05@id? gb35d8@last) (cons gb35d8@last gb35d7@id*) (if (gb2efb@syntax-null? gb35d8@last) gb35d7@id* (gb31ec@syntax-violation '#f '"not an identifier" gb35cf@stx gb35d8@last))))) (if (null? gb35db@id*) (values) (if (not (gb2f05@id? (car gb35db@id*))) (gb31ec@syntax-violation '#f '"not an identifier" gb35cf@stx (car gb35db@id*)) (begin (gb35dd@f (cdr gb35db@id*)) (if (gb2f11@bound-id-member? (car gb35db@id*) (cdr gb35db@id*)) (gb31ec@syntax-violation '#f '"duplicate binding" gb35cf@stx (car gb35db@id*)) (void))))))) gb35d5@ls/false) (let ((gb35df@t gb35d3@t)) (let ((gb35e1@ls/false (gb310c@syntax-dispatch gb35df@t '_))) (if gb35e1@ls/false (apply (lambda () (gb31ec@syntax-violation '#f '"malformed binding form" gb35cf@stx gb35d0@fmls)) gb35e1@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb35df@t))))))))) (set! gb4bf5@gb30c6@invalid-fmls-error gb30c6@invalid-fmls-error) (set! gb30c8@let-macro (lambda (gb35e3@stx) (let ((gb35e5@t gb35e3@stx)) (let ((gb35e7@ls/false (gb310c@syntax-dispatch gb35e5@t '(_ #(each (any any)) any . each-any)))) (if gb35e7@ls/false (apply (lambda (gb35e9@lhs* gb35ea@rhs* gb35eb@b gb35ec@b*) (if (gb2f0d@valid-bound-ids? gb35e9@lhs*) (gb30c2@bless (cons (cons 'lambda (cons gb35e9@lhs* (cons gb35eb@b gb35ec@b*))) gb35ea@rhs*)) (gb30c6@invalid-fmls-error gb35e3@stx gb35e9@lhs*))) gb35e7@ls/false) (let ((gb35f1@t gb35e5@t)) (let ((gb35f3@ls/false (gb310c@syntax-dispatch gb35f1@t '(_ any #(each (any any)) any . each-any)))) (if (and gb35f3@ls/false (apply (lambda (gb35f5@f gb35f6@lhs* gb35f7@rhs* gb35f8@b gb35f9@b*) (gb2f05@id? gb35f5@f)) gb35f3@ls/false)) (apply (lambda (gb35ff@f gb3600@lhs* gb3601@rhs* gb3602@b gb3603@b*) (if (gb2f0d@valid-bound-ids? gb3600@lhs*) (gb30c2@bless (cons (list 'letrec (list (list gb35ff@f (cons 'lambda (cons gb3600@lhs* (cons gb3602@b gb3603@b*))))) gb35ff@f) gb3601@rhs*)) (gb30c6@invalid-fmls-error gb35e3@stx gb3600@lhs*))) gb35f3@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb35f1@t))))))))) (set! gb4bf6@gb30c8@let-macro gb30c8@let-macro) (set! gb30ca@let-values-macro (lambda (gb3609@stx) (letrec* ((gb360c@rename (lambda (gb3671@x gb3672@old* gb3673@new*) (begin (if (not (gb2f05@id? gb3671@x)) (gb31ec@syntax-violation '#f '"not an indentifier" gb3609@stx gb3671@x) (void)) (if (gb2f11@bound-id-member? gb3671@x gb3672@old*) (gb31ec@syntax-violation '#f '"duplicate binding" gb3609@stx gb3671@x) (void)) (let ((gb3677@y (gensym (gb31f2@syntax->datum gb3671@x)))) (values gb3677@y (cons gb3671@x gb3672@old*) (cons gb3677@y gb3673@new*)))))) (gb360e@rename* (lambda (gb365f@x* gb3660@old* gb3661@new*) (if (null? gb365f@x*) (values '() gb3660@old* gb3661@new*) (call-with-values (lambda () (gb360c@rename (car gb365f@x*) gb3660@old* gb3661@new*)) (lambda (gb3665@x gb3666@old* gb3667@new*) (call-with-values (lambda () (gb360e@rename* (cdr gb365f@x*) gb3666@old* gb3667@new*)) (lambda (gb366b@x* gb366c@old* gb366d@new*) (values (cons gb3665@x gb366b@x*) gb366c@old* gb366d@new*))))))))) (let ((gb360f@t gb3609@stx)) (let ((gb3611@ls/false (gb310c@syntax-dispatch gb360f@t '(_ () any . each-any)))) (if gb3611@ls/false (apply (lambda (gb3613@b gb3614@b*) (cons* (gb30c2@bless 'let) '() gb3613@b gb3614@b*)) gb3611@ls/false) (let ((gb3617@t gb360f@t)) (let ((gb3619@ls/false (gb310c@syntax-dispatch gb3617@t '(_ #(each (any any)) any . each-any)))) (if gb3619@ls/false (apply (lambda (gb361b@lhs* gb361c@rhs* gb361d@b gb361e@b*) (gb30c2@bless (let gb362b@f ((gb3623@lhs* gb361b@lhs*) (gb3624@rhs* gb361c@rhs*) (gb3625@old* '()) (gb3626@new* '())) (if (null? gb3623@lhs*) (cons 'let (cons (map list gb3625@old* gb3626@new*) (cons gb361d@b gb361e@b*))) (let ((gb362d@t (car gb3623@lhs*))) (let ((gb362f@ls/false (gb310c@syntax-dispatch gb362d@t 'each-any))) (if gb362f@ls/false (apply (lambda (gb3631@x*) (call-with-values (lambda () (gb360e@rename* gb3631@x* gb3625@old* gb3626@new*)) (lambda (gb3639@gb3634 gb363a@gb3636 gb363b@gb3638) (let ((gb363f@new* gb363b@gb3638) (gb3640@old* gb363a@gb3636) (gb3641@y* gb3639@gb3634)) (list 'call-with-values (list 'lambda '() (car gb3624@rhs*)) (list 'lambda gb3641@y* (gb362b@f (cdr gb3623@lhs*) (cdr gb3624@rhs*) gb3640@old* gb363f@new*))))))) gb362f@ls/false) (let ((gb3645@t gb362d@t)) (let ((gb3647@ls/false (gb310c@syntax-dispatch gb3645@t '#(each+ any () any)))) (if gb3647@ls/false (apply (lambda (gb3649@x* gb364a@x) (call-with-values (lambda () (gb360c@rename gb364a@x gb3625@old* gb3626@new*)) (lambda (gb364d@y gb364e@old* gb364f@new*) (call-with-values (lambda () (gb360e@rename* gb3649@x* gb364e@old* gb364f@new*)) (lambda (gb3653@y* gb3654@old* gb3655@new*) (list 'call-with-values (list 'lambda '() (car gb3624@rhs*)) (list 'lambda (append gb3653@y* gb364d@y) (gb362b@f (cdr gb3623@lhs*) (cdr gb3624@rhs*) gb3654@old* gb3655@new*)))))))) gb3647@ls/false) (let ((gb3659@t gb3645@t)) (let ((gb365b@ls/false (gb310c@syntax-dispatch gb3659@t 'any))) (if gb365b@ls/false (apply (lambda (gb365d@others) (gb31ec@syntax-violation '#f '"malformed bindings" gb3609@stx gb365d@others)) gb365b@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3659@t)))))))))))))) gb3619@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3617@t)))))))))) (set! gb4bf7@gb30ca@let-values-macro gb30ca@let-values-macro) (set! gb30cc@let*-values-macro (lambda (gb3679@stx) (letrec* ((gb367c@check (lambda (gb36ab@x*) (if (not (null? gb36ab@x*)) (let ((gb36ad@x (car gb36ab@x*))) (begin (if (not (gb2f05@id? gb36ad@x)) (gb31ec@syntax-violation '#f '"not an identifier" gb3679@stx gb36ad@x) (void)) (gb367c@check (cdr gb36ab@x*)) (if (gb2f11@bound-id-member? gb36ad@x (cdr gb36ab@x*)) (gb31ec@syntax-violation '#f '"duplicate identifier" gb3679@stx gb36ad@x) (void)))) (void))))) (let ((gb367d@t gb3679@stx)) (let ((gb367f@ls/false (gb310c@syntax-dispatch gb367d@t '(_ () any . each-any)))) (if gb367f@ls/false (apply (lambda (gb3681@b gb3682@b*) (cons* (gb30c2@bless 'let) '() gb3681@b gb3682@b*)) gb367f@ls/false) (let ((gb3685@t gb367d@t)) (let ((gb3687@ls/false (gb310c@syntax-dispatch gb3685@t '(_ #(each (any any)) any . each-any)))) (if gb3687@ls/false (apply (lambda (gb3689@lhs* gb368a@rhs* gb368b@b gb368c@b*) (gb30c2@bless (let gb3695@f ((gb3691@lhs* gb3689@lhs*) (gb3692@rhs* gb368a@rhs*)) (if (null? gb3691@lhs*) (cons 'begin (cons gb368b@b gb368c@b*)) (let ((gb3697@t (car gb3691@lhs*))) (let ((gb3699@ls/false (gb310c@syntax-dispatch gb3697@t 'each-any))) (if gb3699@ls/false (apply (lambda (gb369b@x*) (begin (gb367c@check gb369b@x*) (list 'call-with-values (list 'lambda '() (car gb3692@rhs*)) (list 'lambda gb369b@x* (gb3695@f (cdr gb3691@lhs*) (cdr gb3692@rhs*)))))) gb3699@ls/false) (let ((gb369d@t gb3697@t)) (let ((gb369f@ls/false (gb310c@syntax-dispatch gb369d@t '#(each+ any () any)))) (if gb369f@ls/false (apply (lambda (gb36a1@x* gb36a2@x) (begin (gb367c@check (cons gb36a2@x gb36a1@x*)) (list 'call-with-values (list 'lambda '() (car gb3692@rhs*)) (list 'lambda (append gb36a1@x* gb36a2@x) (gb3695@f (cdr gb3691@lhs*) (cdr gb3692@rhs*)))))) gb369f@ls/false) (let ((gb36a5@t gb369d@t)) (let ((gb36a7@ls/false (gb310c@syntax-dispatch gb36a5@t 'any))) (if gb36a7@ls/false (apply (lambda (gb36a9@others) (gb31ec@syntax-violation '#f '"malformed bindings" gb3679@stx gb36a9@others)) gb36a7@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb36a5@t)))))))))))))) gb3687@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3685@t)))))))))) (set! gb4bf8@gb30cc@let*-values-macro gb30cc@let*-values-macro) (set! gb30ce@trace-lambda-macro (lambda (gb36af@stx) (let ((gb36b1@t gb36af@stx)) (let ((gb36b3@ls/false (gb310c@syntax-dispatch gb36b1@t '(_ any each-any any . each-any)))) (if gb36b3@ls/false (apply (lambda (gb36b5@who gb36b6@fmls gb36b7@b gb36b8@b*) (if (gb2f0d@valid-bound-ids? gb36b6@fmls) (gb30c2@bless (list 'make-traced-procedure (list 'quote gb36b5@who) (cons 'lambda (cons gb36b6@fmls (cons gb36b7@b gb36b8@b*))))) (gb30c6@invalid-fmls-error gb36af@stx gb36b6@fmls))) gb36b3@ls/false) (let ((gb36bd@t gb36b1@t)) (let ((gb36bf@ls/false (gb310c@syntax-dispatch gb36bd@t '(_ any #(each+ any () any) any . each-any)))) (if gb36bf@ls/false (apply (lambda (gb36c1@who gb36c2@fmls gb36c3@last gb36c4@b gb36c5@b*) (if (gb2f0d@valid-bound-ids? (cons gb36c3@last gb36c2@fmls)) (gb30c2@bless (list 'make-traced-procedure (list 'quote gb36c1@who) (cons 'lambda (cons (append gb36c2@fmls gb36c3@last) (cons gb36c4@b gb36c5@b*))))) (gb30c6@invalid-fmls-error gb36af@stx (append gb36c2@fmls gb36c3@last)))) gb36bf@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb36bd@t))))))))) (set! gb4bf9@gb30ce@trace-lambda-macro gb30ce@trace-lambda-macro) (set! gb30d0@trace-define-macro (lambda (gb36cb@stx) (let ((gb36cd@t gb36cb@stx)) (let ((gb36cf@ls/false (gb310c@syntax-dispatch gb36cd@t '(_ (any . each-any) any . each-any)))) (if gb36cf@ls/false (apply (lambda (gb36d1@who gb36d2@fmls gb36d3@b gb36d4@b*) (if (gb2f0d@valid-bound-ids? gb36d2@fmls) (gb30c2@bless (list 'define gb36d1@who (list 'make-traced-procedure (list 'quote gb36d1@who) (cons 'lambda (cons gb36d2@fmls (cons gb36d3@b gb36d4@b*)))))) (gb30c6@invalid-fmls-error gb36cb@stx gb36d2@fmls))) gb36cf@ls/false) (let ((gb36d9@t gb36cd@t)) (let ((gb36db@ls/false (gb310c@syntax-dispatch gb36d9@t '(_ (any . #(each+ any () any)) any . each-any)))) (if gb36db@ls/false (apply (lambda (gb36dd@who gb36de@fmls gb36df@last gb36e0@b gb36e1@b*) (if (gb2f0d@valid-bound-ids? (cons gb36df@last gb36de@fmls)) (gb30c2@bless (list 'define gb36dd@who (list 'make-traced-procedure (list 'quote gb36dd@who) (cons 'lambda (cons (append gb36de@fmls gb36df@last) (cons gb36e0@b gb36e1@b*)))))) (gb30c6@invalid-fmls-error gb36cb@stx (append gb36de@fmls gb36df@last)))) gb36db@ls/false) (let ((gb36e7@t gb36d9@t)) (let ((gb36e9@ls/false (gb310c@syntax-dispatch gb36e7@t '(_ any any)))) (if gb36e9@ls/false (apply (lambda (gb36eb@who gb36ec@expr) (if (gb2f05@id? gb36eb@who) (gb30c2@bless (list 'define gb36eb@who (list 'let (list (list 'v gb36ec@expr)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote gb36eb@who) '(v))) '((assertion-violation 'trace-define "not a procedure" v)))))))) (gb31ec@syntax-violation '#f '"invalid name" gb36cb@stx))) gb36e9@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb36e7@t)))))))))))) (set! gb4bfa@gb30d0@trace-define-macro gb30d0@trace-define-macro) (set! gb30d2@trace-define-syntax-macro (lambda (gb36ef@stx) (let ((gb36f1@t gb36ef@stx)) (let ((gb36f3@ls/false (gb310c@syntax-dispatch gb36f1@t '(_ any any)))) (if gb36f3@ls/false (apply (lambda (gb36f5@who gb36f6@expr) (if (gb2f05@id? gb36f5@who) (gb30c2@bless (list 'define-syntax gb36f5@who (list 'make-traced-macro (list 'quote gb36f5@who) gb36f6@expr))) (gb31ec@syntax-violation '#f '"invalid name" gb36ef@stx))) gb36f3@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb36f1@t)))))) (set! gb4bfb@gb30d2@trace-define-syntax-macro gb30d2@trace-define-syntax-macro) (set! gb30d4@trace-let/rec-syntax (lambda (gb36f9@who) (lambda (gb36fb@stx) (let ((gb36fd@t gb36fb@stx)) (let ((gb36ff@ls/false (gb310c@syntax-dispatch gb36fd@t '(_ #(each (any any)) any . each-any)))) (if gb36ff@ls/false (apply (lambda (gb3701@lhs* gb3702@rhs* gb3703@b gb3704@b*) (if (gb2f0d@valid-bound-ids? gb3701@lhs*) (let ((gb3709@rhs* (map (lambda (gb370b@lhs gb370c@rhs) (list 'make-traced-macro (list 'quote gb370b@lhs) gb370c@rhs)) gb3701@lhs* gb3702@rhs*))) (gb30c2@bless (cons gb36f9@who (cons (map list gb3701@lhs* gb3709@rhs*) (cons gb3703@b gb3704@b*))))) (gb30c6@invalid-fmls-error gb36fb@stx gb3701@lhs*))) gb36ff@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb36fd@t))))))) (set! gb4bfc@gb30d4@trace-let/rec-syntax gb30d4@trace-let/rec-syntax) (set! gb30d6@trace-let-syntax-macro (gb30d4@trace-let/rec-syntax 'let-syntax)) (set! gb4bfd@gb30d6@trace-let-syntax-macro gb30d6@trace-let-syntax-macro) (set! gb30d8@trace-letrec-syntax-macro (gb30d4@trace-let/rec-syntax 'letrec-syntax)) (set! gb4bfe@gb30d8@trace-letrec-syntax-macro gb30d8@trace-letrec-syntax-macro) (set! gb30da@guard-macro (lambda (gb370f@x) (letrec* ((gb3712@gen-clauses (lambda (gb3729@con gb372a@outerk gb372b@clause*) (letrec* ((gb3730@f (lambda (gb3769@x gb376a@k) (let ((gb376d@t gb3769@x)) (let ((gb376f@ls/false (gb310c@syntax-dispatch gb376d@t '(any #(scheme-id =>) any)))) (if gb376f@ls/false (apply (lambda (gb3771@e gb3772@p) (let ((gb3775@t (gensym))) (list 'let (list (list gb3775@t gb3771@e)) (list 'if gb3775@t (list gb3772@p gb3775@t) gb376a@k)))) gb376f@ls/false) (let ((gb3777@t gb376d@t)) (let ((gb3779@ls/false (gb310c@syntax-dispatch gb3777@t '(any)))) (if gb3779@ls/false (apply (lambda (gb377b@e) (let ((gb377d@t (gensym))) (list 'let (list (list gb377d@t gb377b@e)) (list 'if gb377d@t gb377d@t gb376a@k)))) gb3779@ls/false) (let ((gb377f@t gb3777@t)) (let ((gb3781@ls/false (gb310c@syntax-dispatch gb377f@t '(any any . each-any)))) (if gb3781@ls/false (apply (lambda (gb3783@e gb3784@v gb3785@v*) (list 'if gb3783@e (cons 'begin (cons gb3784@v gb3785@v*)) gb376a@k)) gb3781@ls/false) (let ((gb3789@t gb377f@t)) (let ((gb378b@ls/false (gb310c@syntax-dispatch gb3789@t '_))) (if gb378b@ls/false (apply (lambda () (gb31ec@syntax-violation '#f '"invalid guard clause" gb3769@x)) gb378b@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3789@t))))))))))))))) (gb3732@f* (lambda (gb373f@x*) (let ((gb3741@t gb373f@x*)) (let ((gb3743@ls/false (gb310c@syntax-dispatch gb3741@t '()))) (if gb3743@ls/false (apply (lambda () (let ((gb3745@g (gensym))) (values (list gb3745@g (list 'lambda '() (list 'raise-continuable gb3729@con))) gb3745@g))) gb3743@ls/false) (let ((gb3747@t gb3741@t)) (let ((gb3749@ls/false (gb310c@syntax-dispatch gb3747@t '((#(scheme-id else) any . each-any))))) (if gb3749@ls/false (apply (lambda (gb374b@e gb374c@e*) (values (cons 'begin (cons gb374b@e gb374c@e*)) '#f)) gb3749@ls/false) (let ((gb374f@t gb3747@t)) (let ((gb3751@ls/false (gb310c@syntax-dispatch gb374f@t '(any . any)))) (if gb3751@ls/false (apply (lambda (gb3753@cls gb3754@cls*) (call-with-values (lambda () (gb3732@f* gb3754@cls*)) (lambda (gb375b@gb3758 gb375c@gb375a) (let ((gb375f@g gb375c@gb375a) (gb3760@e gb375b@gb3758)) (values (gb3730@f gb3753@cls gb3760@e) gb375f@g))))) gb3751@ls/false) (let ((gb3763@t gb374f@t)) (let ((gb3765@ls/false (gb310c@syntax-dispatch gb3763@t 'any))) (if gb3765@ls/false (apply (lambda (gb3767@others) (gb31ec@syntax-violation '#f '"invalid guard clause" gb3767@others)) gb3765@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3763@t)))))))))))))))) (call-with-values (lambda () (gb3732@f* gb372b@clause*)) (lambda (gb3737@gb3734 gb3738@gb3736) (let ((gb373b@raisek gb3738@gb3736) (gb373c@code gb3737@gb3734)) (if gb373b@raisek (list (list 'call/cc (list 'lambda (list gb373b@raisek) (list gb372a@outerk (list 'lambda '() gb373c@code))))) (list gb372a@outerk (list 'lambda '() gb373c@code)))))))))) (let ((gb3713@t gb370f@x)) (let ((gb3715@ls/false (gb310c@syntax-dispatch gb3713@t '(_ (any . each-any) any . each-any)))) (if (and gb3715@ls/false (apply (lambda (gb3717@con gb3718@clause* gb3719@b gb371a@b*) (gb2f05@id? gb3717@con)) gb3715@ls/false)) (apply (lambda (gb371f@con gb3720@clause* gb3721@b gb3722@b*) (let ((gb3727@outerk (gensym))) (gb30c2@bless (list (list 'call/cc (list 'lambda (list gb3727@outerk) (list 'lambda '() (list 'with-exception-handler (list 'lambda (list gb371f@con) (gb3712@gen-clauses gb371f@con gb3727@outerk gb3720@clause*)) (cons 'lambda (cons '() (cons gb3721@b gb3722@b*))))))))))) gb3715@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3713@t))))))) (set! gb4bff@gb30da@guard-macro gb30da@guard-macro) (set! gb30dc@define-enumeration-macro (lambda (gb378d@stx) (letrec* ((gb3790@set? (lambda (gb37a9@x) (or (null? gb37a9@x) (and (not (memq (car gb37a9@x) (cdr gb37a9@x))) (gb3790@set? (cdr gb37a9@x)))))) (gb3792@remove-dups (lambda (gb37a7@ls) (if (null? gb37a7@ls) '() (cons (car gb37a7@ls) (gb3792@remove-dups (remq (car gb37a7@ls) (cdr gb37a7@ls)))))))) (let ((gb3793@t gb378d@stx)) (let ((gb3795@ls/false (gb310c@syntax-dispatch gb3793@t '(_ any each-any any)))) (if (and gb3795@ls/false (apply (lambda (gb3797@name gb3798@id* gb3799@maker) (and (gb2f05@id? gb3797@name) (gb2f05@id? gb3799@maker) (for-all gb2f05@id? gb3798@id*))) gb3795@ls/false)) (apply (lambda (gb379d@name gb379e@id* gb379f@maker) (let ((gb37a3@name* (gb3792@remove-dups (gb31f2@syntax->datum gb379e@id*))) (gb37a4@mk (gensym))) (gb30c2@bless (list 'begin (list 'define gb37a4@mk (list 'enum-set-constructor (list 'make-enumeration (list 'quote gb37a3@name*)))) (list 'define-syntax gb379d@name (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n) '(identifier? (syntax n)) (list 'if (list 'memq '(syntax->datum (syntax n)) (list 'quote gb37a3@name*)) '(syntax 'n) (cons 'syntax-violation (cons (list 'quote gb379d@name) '("not a member of set" x (syntax n))))))))) (list 'define-syntax gb379f@maker (list 'lambda '(x) (list 'syntax-case 'x '() (list '(_ n* ...) (list 'begin (cons 'for-each (cons (list 'lambda '(n) (list 'unless '(identifier? n) (cons 'syntax-violation (cons (list 'quote gb379f@maker) '("non-identifier argument" x n)))) (list 'unless (list 'memq '(syntax->datum n) (list 'quote gb37a3@name*)) (cons 'syntax-violation (cons (list 'quote gb379f@maker) '("not a member of set" x n))))) '((syntax (n* ...))))) (list 'syntax (cons gb37a4@mk '('(n* ...))))))))))))) gb3795@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3793@t))))))) (set! gb4c00@gb30dc@define-enumeration-macro gb30dc@define-enumeration-macro) (set! gb30de@time-macro (lambda (gb37ab@stx) (let ((gb37ad@t gb37ab@stx)) (let ((gb37af@ls/false (gb310c@syntax-dispatch gb37ad@t '(_ any)))) (if gb37af@ls/false (apply (lambda (gb37b1@expr) (gb30c2@bless (cons 'let* (cons (cons '(start (time-usage)) (cons (list 'result (list (list 'lambda '() gb37b1@expr))) '((end (time-usage)) (used (map - end start)) (real (car used)) (user (cadr used)) (sys (caddr used))))) '((format #t "~%;;~a real ~a user ~a sys~%~!" real user sys) result))))) gb37af@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb37ad@t)))))) (set! gb4c01@gb30de@time-macro gb30de@time-macro) (set! gb30e0@delay-macro (lambda (gb37b3@stx) (let ((gb37b5@t gb37b3@stx)) (let ((gb37b7@ls/false (gb310c@syntax-dispatch gb37b5@t '(_ any)))) (if gb37b7@ls/false (apply (lambda (gb37b9@expr) (gb30c2@bless (list 'make-promise (list 'lambda '() gb37b9@expr)))) gb37b7@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb37b5@t)))))) (set! gb4c02@gb30e0@delay-macro gb30e0@delay-macro) (set! gb30e2@assert-macro (lambda (gb37bb@stx) (let ((gb37bd@t gb37bb@stx)) (let ((gb37bf@ls/false (gb310c@syntax-dispatch gb37bd@t '(_ any)))) (if gb37bf@ls/false (apply (lambda (gb37c1@expr) (let ((gb37c3@pos (or (gb31e4@expression-position gb37bb@stx) (gb31e4@expression-position gb37c1@expr)))) (gb30c2@bless (list 'let (list (list 'x gb37c1@expr)) (list 'if 'x 'x (list 'assertion-error (list 'quote gb37c1@expr) (list 'quote gb37c3@pos))))))) gb37bf@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb37bd@t)))))) (set! gb4c03@gb30e2@assert-macro gb30e2@assert-macro) (set! gb30e4@endianness-macro (lambda (gb37c5@stx) (let ((gb37c7@t gb37c5@stx)) (let ((gb37c9@ls/false (gb310c@syntax-dispatch gb37c7@t '(_ any)))) (if gb37c9@ls/false (apply (lambda (gb37cb@e) (let ((gb37cd@t (gb31f2@syntax->datum gb37cb@e))) (if (memv gb37cd@t '(little)) (gb30c2@bless ''little) (if (memv gb37cd@t '(big)) (gb30c2@bless ''big) (gb31ec@syntax-violation '#f '"endianness must be big or little" gb37c5@stx))))) gb37c9@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb37c7@t)))))) (set! gb4c04@gb30e4@endianness-macro gb30e4@endianness-macro) (set! gb30e6@identifier-syntax-macro (lambda (gb37cf@stx) (let ((gb37d1@t gb37cf@stx)) (let ((gb37d3@ls/false (gb310c@syntax-dispatch gb37d1@t '(_ any)))) (if gb37d3@ls/false (apply (lambda (gb37d5@expr) (gb30c2@bless (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax gb37d5@expr)) (list '(id e* ...) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax gb37d5@expr) '((syntax (e* ...)))))))))) gb37d3@ls/false) (let ((gb37d7@t gb37d1@t)) (let ((gb37d9@ls/false (gb310c@syntax-dispatch gb37d7@t '(_ (any any) ((#(scheme-id set!) any any) any))))) (if (and gb37d9@ls/false (apply (lambda (gb37db@id1 gb37dc@expr1 gb37dd@id2 gb37de@expr2 gb37df@expr3) (and (gb2f05@id? gb37db@id1) (gb2f05@id? gb37dd@id2) (gb2f05@id? gb37de@expr2))) gb37d9@ls/false)) (apply (lambda (gb37e5@id1 gb37e6@expr1 gb37e7@id2 gb37e8@expr2 gb37e9@expr3) (gb30c2@bless (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax gb37e6@expr1)) (list (list 'set! 'id gb37e8@expr2) (list 'syntax gb37e9@expr3)) (list '(id e* ...) '(identifier? (syntax id)) (list 'syntax (cons gb37e6@expr1 '(e* ...))))))))) gb37d9@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb37d7@t))))))))) (set! gb4c05@gb30e6@identifier-syntax-macro gb30e6@identifier-syntax-macro) (set! gb30e8@do-macro (lambda (gb37ef@stx) (letrec* ((gb37f2@bind (lambda (gb3809@x) (let ((gb380b@t gb3809@x)) (let ((gb380d@ls/false (gb310c@syntax-dispatch gb380b@t '(any any)))) (if gb380d@ls/false (apply (lambda (gb380f@x gb3810@init) (list gb380f@x gb3810@init gb380f@x)) gb380d@ls/false) (let ((gb3813@t gb380b@t)) (let ((gb3815@ls/false (gb310c@syntax-dispatch gb3813@t '(any any any)))) (if gb3815@ls/false (apply (lambda (gb3817@x gb3818@init gb3819@step) (list gb3817@x gb3818@init gb3819@step)) gb3815@ls/false) (let ((gb381d@t gb3813@t)) (let ((gb381f@ls/false (gb310c@syntax-dispatch gb381d@t '_))) (if gb381f@ls/false (apply (lambda () (gb31ec@syntax-violation '#f '"invalid binding" gb37ef@stx)) gb381f@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb381d@t))))))))))))) (let ((gb37f3@t gb37ef@stx)) (let ((gb37f5@ls/false (gb310c@syntax-dispatch gb37f3@t '(_ each-any (any . each-any) . each-any)))) (if gb37f5@ls/false (apply (lambda (gb37f7@binding* gb37f8@test gb37f9@expr* gb37fa@command*) (let ((gb37ff@t (map gb37f2@bind gb37f7@binding*))) (let ((gb3801@ls/false (gb310c@syntax-dispatch gb37ff@t '#(each (any any any))))) (if gb3801@ls/false (apply (lambda (gb3803@x* gb3804@init* gb3805@step*) (if (gb2f0d@valid-bound-ids? gb3803@x*) (gb30c2@bless (list 'letrec (list (list 'loop (list 'lambda gb3803@x* (list 'if gb37f8@test (cons 'begin (cons '(if #f #f) gb37f9@expr*)) (cons 'begin (append gb37fa@command* (list (cons 'loop gb3805@step*)))))))) (cons 'loop gb3804@init*))) (gb31ec@syntax-violation '#f '"invalid bindings" gb37ef@stx))) gb3801@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb37ff@t))))) gb37f5@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb37f3@t))))))) (set! gb4c06@gb30e8@do-macro gb30e8@do-macro) (set! gb30ea@let*-macro (lambda (gb3821@stx) (let ((gb3823@t gb3821@stx)) (let ((gb3825@ls/false (gb310c@syntax-dispatch gb3823@t '(_ #(each (any any)) any . each-any)))) (if (and gb3825@ls/false (apply (lambda (gb3827@lhs* gb3828@rhs* gb3829@b gb382a@b*) (for-all gb2f05@id? gb3827@lhs*)) gb3825@ls/false)) (apply (lambda (gb382f@lhs* gb3830@rhs* gb3831@b gb3832@b*) (gb30c2@bless (let gb3839@f ((gb3837@x* (map list gb382f@lhs* gb3830@rhs*))) (if (null? gb3837@x*) (cons 'let (cons '() (cons gb3831@b gb3832@b*))) (list 'let (list (car gb3837@x*)) (gb3839@f (cdr gb3837@x*))))))) gb3825@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3823@t)))))) (set! gb4c07@gb30ea@let*-macro gb30ea@let*-macro) (set! gb30ec@or-macro (lambda (gb383b@stx) (let ((gb383d@t gb383b@stx)) (let ((gb383f@ls/false (gb310c@syntax-dispatch gb383d@t '(_)))) (if gb383f@ls/false (apply (lambda () '#f) gb383f@ls/false) (let ((gb3841@t gb383d@t)) (let ((gb3843@ls/false (gb310c@syntax-dispatch gb3841@t '(_ any . each-any)))) (if gb3843@ls/false (apply (lambda (gb3845@e gb3846@e*) (gb30c2@bless (let gb384d@f ((gb3849@e gb3845@e) (gb384a@e* gb3846@e*)) (if (null? gb384a@e*) (list 'begin '#f gb3849@e) (list 'let (list (list 't gb3849@e)) (list 'if 't 't (gb384d@f (car gb384a@e*) (cdr gb384a@e*)))))))) gb3843@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3841@t))))))))) (set! gb4c08@gb30ec@or-macro gb30ec@or-macro) (set! gb30ee@and-macro (lambda (gb384f@stx) (let ((gb3851@t gb384f@stx)) (let ((gb3853@ls/false (gb310c@syntax-dispatch gb3851@t '(_)))) (if gb3853@ls/false (apply (lambda () '#t) gb3853@ls/false) (let ((gb3855@t gb3851@t)) (let ((gb3857@ls/false (gb310c@syntax-dispatch gb3855@t '(_ any . each-any)))) (if gb3857@ls/false (apply (lambda (gb3859@e gb385a@e*) (gb30c2@bless (let gb3861@f ((gb385d@e gb3859@e) (gb385e@e* gb385a@e*)) (if (null? gb385e@e*) (list 'begin '#f gb385d@e) (cons 'if (cons gb385d@e (cons (gb3861@f (car gb385e@e*) (cdr gb385e@e*)) '(#f)))))))) gb3857@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3855@t))))))))) (set! gb4c09@gb30ee@and-macro gb30ee@and-macro) (set! gb30f0@cond-macro (lambda (gb3863@stx) (let ((gb3865@t gb3863@stx)) (let ((gb3867@ls/false (gb310c@syntax-dispatch gb3865@t '(_ any . each-any)))) (if gb3867@ls/false (apply (lambda (gb3869@cls gb386a@cls*) (gb30c2@bless (let gb3871@f ((gb386d@cls gb3869@cls) (gb386e@cls* gb386a@cls*)) (if (null? gb386e@cls*) (let ((gb3873@t gb386d@cls)) (let ((gb3875@ls/false (gb310c@syntax-dispatch gb3873@t '(#(scheme-id else) any . each-any)))) (if gb3875@ls/false (apply (lambda (gb3877@e gb3878@e*) (cons 'begin (cons gb3877@e gb3878@e*))) gb3875@ls/false) (let ((gb387b@t gb3873@t)) (let ((gb387d@ls/false (gb310c@syntax-dispatch gb387b@t '(any #(scheme-id =>) any)))) (if gb387d@ls/false (apply (lambda (gb387f@e gb3880@p) (list 'let (list (list 't gb387f@e)) (list 'if 't (cons gb3880@p '(t))))) gb387d@ls/false) (let ((gb3883@t gb387b@t)) (let ((gb3885@ls/false (gb310c@syntax-dispatch gb3883@t '(any)))) (if gb3885@ls/false (apply (lambda (gb3887@e) (cons 'or (cons gb3887@e '((if #f #f))))) gb3885@ls/false) (let ((gb3889@t gb3883@t)) (let ((gb388b@ls/false (gb310c@syntax-dispatch gb3889@t '(any . each-any)))) (if gb388b@ls/false (apply (lambda (gb388d@e gb388e@e*) (list 'if gb388d@e (cons 'begin gb388e@e*))) gb388b@ls/false) (let ((gb3891@t gb3889@t)) (let ((gb3893@ls/false (gb310c@syntax-dispatch gb3891@t '_))) (if gb3893@ls/false (apply (lambda () (gb31ec@syntax-violation '#f '"invalid last clause" gb3863@stx)) gb3893@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3891@t)))))))))))))))) (let ((gb3895@t gb386d@cls)) (let ((gb3897@ls/false (gb310c@syntax-dispatch gb3895@t '(#(scheme-id else) any . each-any)))) (if gb3897@ls/false (apply (lambda (gb3899@e gb389a@e*) (gb31ec@syntax-violation '#f '"incorrect position of keyword else" gb3863@stx)) gb3897@ls/false) (let ((gb389d@t gb3895@t)) (let ((gb389f@ls/false (gb310c@syntax-dispatch gb389d@t '(any #(scheme-id =>) any)))) (if gb389f@ls/false (apply (lambda (gb38a1@e gb38a2@p) (list 'let (list (list 't gb38a1@e)) (list 'if 't (cons gb38a2@p '(t)) (gb3871@f (car gb386e@cls*) (cdr gb386e@cls*))))) gb389f@ls/false) (let ((gb38a5@t gb389d@t)) (let ((gb38a7@ls/false (gb310c@syntax-dispatch gb38a5@t '(any)))) (if gb38a7@ls/false (apply (lambda (gb38a9@e) (list 'or gb38a9@e (gb3871@f (car gb386e@cls*) (cdr gb386e@cls*)))) gb38a7@ls/false) (let ((gb38ab@t gb38a5@t)) (let ((gb38ad@ls/false (gb310c@syntax-dispatch gb38ab@t '(any . each-any)))) (if gb38ad@ls/false (apply (lambda (gb38af@e gb38b0@e*) (list 'if gb38af@e (cons 'begin gb38b0@e*) (gb3871@f (car gb386e@cls*) (cdr gb386e@cls*)))) gb38ad@ls/false) (let ((gb38b3@t gb38ab@t)) (let ((gb38b5@ls/false (gb310c@syntax-dispatch gb38b3@t '_))) (if gb38b5@ls/false (apply (lambda () (gb31ec@syntax-violation '#f '"invalid last clause" gb3863@stx)) gb38b5@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb38b3@t)))))))))))))))))))) gb3867@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3865@t)))))) (set! gb4c0a@gb30f0@cond-macro gb30f0@cond-macro) (set! gb30f2@do-include (lambda (gb38b7@stx gb38b8@id gb38b9@filename) (let ((gb38bd@filename (gb2f19@stx->datum gb38b9@filename))) (begin (if (not (and (string? gb38bd@filename) (gb2f05@id? gb38b8@id))) (gb31ec@syntax-violation '#f '"invalid syntax" gb38b7@stx) (void)) (cons (gb30c2@bless 'begin) (with-input-from-file gb38bd@filename (lambda () (let gb38c1@f ((gb38bf@ls '())) (let ((gb38c3@x (gb2a47@gb2917@read-annotated))) (if (eof-object? gb38c3@x) (reverse gb38bf@ls) (gb38c1@f (cons (gb2ee5@datum->stx gb38b8@id gb38c3@x) gb38bf@ls)))))))))))) (set! gb4c0b@gb30f2@do-include gb30f2@do-include) (set! gb30f4@include-macro (lambda (gb38c5@e) (let ((gb38c7@t gb38c5@e)) (let ((gb38c9@ls/false (gb310c@syntax-dispatch gb38c7@t '(any any)))) (if gb38c9@ls/false (apply (lambda (gb38cb@id gb38cc@filename) (gb30f2@do-include gb38c5@e gb38cb@id gb38cc@filename)) gb38c9@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb38c7@t)))))) (set! gb4c0c@gb30f4@include-macro gb30f4@include-macro) (set! gb30f6@include-into-macro (lambda (gb38cf@e) (let ((gb38d1@t gb38cf@e)) (let ((gb38d3@ls/false (gb310c@syntax-dispatch gb38d1@t '(_ any any)))) (if gb38d3@ls/false (apply (lambda (gb38d5@id gb38d6@filename) (gb30f2@do-include gb38cf@e gb38d5@id gb38d6@filename)) gb38d3@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb38d1@t)))))) (set! gb4c0d@gb30f6@include-into-macro gb30f6@include-into-macro) (set! gb30f8@syntax-rules-macro (lambda (gb38d9@e) (let ((gb38db@t gb38d9@e)) (let ((gb38dd@ls/false (gb310c@syntax-dispatch gb38db@t '(_ each-any . #(each (any any)))))) (if gb38dd@ls/false (apply (lambda (gb38df@lits gb38e0@pat* gb38e1@tmp*) (begin (gb3112@verify-literals gb38df@lits gb38d9@e) (gb30c2@bless (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons gb38df@lits (map (lambda (gb38e5@pat gb38e6@tmp) (let ((gb38e9@t gb38e5@pat)) (let ((gb38eb@ls/false (gb310c@syntax-dispatch gb38e9@t '(_ . any)))) (if gb38eb@ls/false (apply (lambda (gb38ed@rest) (list (cons 'g gb38ed@rest) (list 'syntax gb38e6@tmp))) gb38eb@ls/false) (let ((gb38ef@t gb38e9@t)) (let ((gb38f1@ls/false (gb310c@syntax-dispatch gb38ef@t '_))) (if gb38f1@ls/false (apply (lambda () (gb31ec@syntax-violation '#f '"invalid syntax-rules pattern" gb38d9@e gb38e5@pat)) gb38f1@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb38ef@t)))))))) gb38e0@pat* gb38e1@tmp*)))))))) gb38dd@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb38db@t)))))) (set! gb4c0e@gb30f8@syntax-rules-macro gb30f8@syntax-rules-macro) (set! gb30fa@quasiquote-macro (letrec* ((gb38f4@datum (lambda (gb39f5@x) (list (gb3094@scheme-stx 'quote) (gb2eed@mkstx gb39f5@x gb2e89@top-mark* '() '())))) (gb3910@quasicons* (lambda (gb39ed@x gb39ee@y) (let gb39f3@f ((gb39f1@x gb39ed@x)) (if (null? gb39f1@x) gb39ee@y (gb3912@quasicons (car gb39f1@x) (gb39f3@f (cdr gb39f1@x))))))) (gb3912@quasicons (lambda (gb39c7@x gb39c8@y) (let ((gb39cb@t gb39c8@y)) (let ((gb39cd@ls/false (gb310c@syntax-dispatch gb39cb@t '(#(scheme-id quote) any)))) (if gb39cd@ls/false (apply (lambda (gb39cf@dy) (let ((gb39d1@t gb39c7@x)) (let ((gb39d3@ls/false (gb310c@syntax-dispatch gb39d1@t '(#(scheme-id quote) any)))) (if gb39d3@ls/false (apply (lambda (gb39d5@dx) (list (gb3094@scheme-stx 'quote) (cons gb39d5@dx gb39cf@dy))) gb39d3@ls/false) (let ((gb39d7@t gb39d1@t)) (let ((gb39d9@ls/false (gb310c@syntax-dispatch gb39d7@t '_))) (if gb39d9@ls/false (apply (lambda () (let ((gb39db@t gb39cf@dy)) (let ((gb39dd@ls/false (gb310c@syntax-dispatch gb39db@t '()))) (if gb39dd@ls/false (apply (lambda () (list (gb3094@scheme-stx 'list) gb39c7@x)) gb39dd@ls/false) (let ((gb39df@t gb39db@t)) (let ((gb39e1@ls/false (gb310c@syntax-dispatch gb39df@t '_))) (if gb39e1@ls/false (apply (lambda () (list (gb3094@scheme-stx 'cons) gb39c7@x gb39c8@y)) gb39e1@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb39df@t)))))))) gb39d9@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb39d7@t)))))))) gb39cd@ls/false) (let ((gb39e3@t gb39cb@t)) (let ((gb39e5@ls/false (gb310c@syntax-dispatch gb39e3@t '(#(scheme-id list) . each-any)))) (if gb39e5@ls/false (apply (lambda (gb39e7@stuff) (cons* (gb3094@scheme-stx 'list) gb39c7@x gb39e7@stuff)) gb39e5@ls/false) (let ((gb39e9@t gb39e3@t)) (let ((gb39eb@ls/false (gb310c@syntax-dispatch gb39e9@t '_))) (if gb39eb@ls/false (apply (lambda () (list (gb3094@scheme-stx 'cons) gb39c7@x gb39c8@y)) gb39eb@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb39e9@t)))))))))))) (gb3914@quasiappend (lambda (gb39ad@x gb39ae@y) (let ((gb39b1@ls (let gb39b5@f ((gb39b3@x gb39ad@x)) (if (null? gb39b3@x) (let ((gb39b7@t gb39ae@y)) (let ((gb39b9@ls/false (gb310c@syntax-dispatch gb39b7@t '(#(scheme-id quote) ())))) (if gb39b9@ls/false (apply (lambda () '()) gb39b9@ls/false) (let ((gb39bb@t gb39b7@t)) (let ((gb39bd@ls/false (gb310c@syntax-dispatch gb39bb@t '_))) (if gb39bd@ls/false (apply (lambda () (list gb39ae@y)) gb39bd@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb39bb@t))))))) (let ((gb39bf@t (car gb39b3@x))) (let ((gb39c1@ls/false (gb310c@syntax-dispatch gb39bf@t '(#(scheme-id quote) ())))) (if gb39c1@ls/false (apply (lambda () (gb39b5@f (cdr gb39b3@x))) gb39c1@ls/false) (let ((gb39c3@t gb39bf@t)) (let ((gb39c5@ls/false (gb310c@syntax-dispatch gb39c3@t '_))) (if gb39c5@ls/false (apply (lambda () (cons (car gb39b3@x) (gb39b5@f (cdr gb39b3@x)))) gb39c5@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb39c3@t))))))))))) (if (null? gb39b1@ls) (list (gb3094@scheme-stx 'quote) '()) (if (null? (cdr gb39b1@ls)) (car gb39b1@ls) (cons* (gb3094@scheme-stx 'append) gb39b1@ls)))))) (gb3916@quasivector (lambda (gb397b@x) (let ((gb397d@pat-x gb397b@x)) (let ((gb397f@t gb397d@pat-x)) (let ((gb3981@ls/false (gb310c@syntax-dispatch gb397f@t '(#(scheme-id quote) each-any)))) (if gb3981@ls/false (apply (lambda (gb3983@x*) (list (gb3094@scheme-stx 'quote) (list->vector gb3983@x*))) gb3981@ls/false) (let ((gb3985@t gb397f@t)) (let ((gb3987@ls/false (gb310c@syntax-dispatch gb3985@t '_))) (if gb3987@ls/false (apply (lambda () (let gb398f@f ((gb3989@x gb397b@x) (gb398a@k (lambda (gb398d@ls) (cons* (gb3094@scheme-stx 'vector) gb398d@ls)))) (let ((gb3991@t gb3989@x)) (let ((gb3993@ls/false (gb310c@syntax-dispatch gb3991@t '(#(scheme-id quote) each-any)))) (if gb3993@ls/false (apply (lambda (gb3995@x*) (gb398a@k (map (lambda (gb3997@x) (list (gb3094@scheme-stx 'quote) gb3997@x)) gb3995@x*))) gb3993@ls/false) (let ((gb3999@t gb3991@t)) (let ((gb399b@ls/false (gb310c@syntax-dispatch gb3999@t '(#(scheme-id list) . each-any)))) (if gb399b@ls/false (apply (lambda (gb399d@x*) (gb398a@k gb399d@x*)) gb399b@ls/false) (let ((gb399f@t gb3999@t)) (let ((gb39a1@ls/false (gb310c@syntax-dispatch gb399f@t '(#(scheme-id cons) any any)))) (if gb39a1@ls/false (apply (lambda (gb39a3@x gb39a4@y) (gb398f@f gb39a4@y (lambda (gb39a7@ls) (gb398a@k (cons gb39a3@x gb39a7@ls))))) gb39a1@ls/false) (let ((gb39a9@t gb399f@t)) (let ((gb39ab@ls/false (gb310c@syntax-dispatch gb39a9@t '_))) (if gb39ab@ls/false (apply (lambda () (list (gb3094@scheme-stx 'list->vector) gb397d@pat-x)) gb39ab@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb39a9@t))))))))))))))) gb3987@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3985@t)))))))))) (gb3918@vquasi (lambda (gb3959@p gb395a@lev) (let ((gb395d@t gb3959@p)) (let ((gb395f@ls/false (gb310c@syntax-dispatch gb395d@t '(any . any)))) (if gb395f@ls/false (apply (lambda (gb3961@p gb3962@q) (let ((gb3965@t gb3961@p)) (let ((gb3967@ls/false (gb310c@syntax-dispatch gb3965@t '(#(scheme-id unquote) . each-any)))) (if gb3967@ls/false (apply (lambda (gb3969@p) (if (= gb395a@lev '0) (gb3910@quasicons* gb3969@p (gb3918@vquasi gb3962@q gb395a@lev)) (gb3912@quasicons (gb3912@quasicons (gb38f4@datum 'unquote) (gb391a@quasi gb3969@p (- gb395a@lev '1))) (gb3918@vquasi gb3962@q gb395a@lev)))) gb3967@ls/false) (let ((gb396b@t gb3965@t)) (let ((gb396d@ls/false (gb310c@syntax-dispatch gb396b@t '(#(scheme-id unquote-splicing) . each-any)))) (if gb396d@ls/false (apply (lambda (gb396f@p) (if (= gb395a@lev '0) (gb3914@quasiappend gb396f@p (gb3918@vquasi gb3962@q gb395a@lev)) (gb3912@quasicons (gb3912@quasicons (gb38f4@datum 'unquote-splicing) (gb391a@quasi gb396f@p (- gb395a@lev '1))) (gb3918@vquasi gb3962@q gb395a@lev)))) gb396d@ls/false) (let ((gb3971@t gb396b@t)) (let ((gb3973@ls/false (gb310c@syntax-dispatch gb3971@t 'any))) (if gb3973@ls/false (apply (lambda (gb3975@p) (gb3912@quasicons (gb391a@quasi gb3975@p gb395a@lev) (gb3918@vquasi gb3962@q gb395a@lev))) gb3973@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3971@t))))))))))) gb395f@ls/false) (let ((gb3977@t gb395d@t)) (let ((gb3979@ls/false (gb310c@syntax-dispatch gb3977@t '()))) (if gb3979@ls/false (apply (lambda () (list (gb3094@scheme-stx 'quote) '())) gb3979@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3977@t))))))))) (gb391a@quasi (lambda (gb3923@p gb3924@lev) (let ((gb3927@t gb3923@p)) (let ((gb3929@ls/false (gb310c@syntax-dispatch gb3927@t '(#(scheme-id unquote) any)))) (if gb3929@ls/false (apply (lambda (gb392b@p) (if (= gb3924@lev '0) gb392b@p (gb3912@quasicons (gb38f4@datum 'unquote) (gb391a@quasi (list gb392b@p) (- gb3924@lev '1))))) gb3929@ls/false) (let ((gb392d@t gb3927@t)) (let ((gb392f@ls/false (gb310c@syntax-dispatch gb392d@t '((#(scheme-id unquote) . each-any) . any)))) (if gb392f@ls/false (apply (lambda (gb3931@p gb3932@q) (if (= gb3924@lev '0) (gb3910@quasicons* gb3931@p (gb391a@quasi gb3932@q gb3924@lev)) (gb3912@quasicons (gb3912@quasicons (gb38f4@datum 'unquote) (gb391a@quasi gb3931@p (- gb3924@lev '1))) (gb391a@quasi gb3932@q gb3924@lev)))) gb392f@ls/false) (let ((gb3935@t gb392d@t)) (let ((gb3937@ls/false (gb310c@syntax-dispatch gb3935@t '((#(scheme-id unquote-splicing) . each-any) . any)))) (if gb3937@ls/false (apply (lambda (gb3939@p gb393a@q) (if (= gb3924@lev '0) (gb3914@quasiappend gb3939@p (gb391a@quasi gb393a@q gb3924@lev)) (gb3912@quasicons (gb3912@quasicons (gb38f4@datum 'unquote-splicing) (gb391a@quasi gb3939@p (- gb3924@lev '1))) (gb391a@quasi gb393a@q gb3924@lev)))) gb3937@ls/false) (let ((gb393d@t gb3935@t)) (let ((gb393f@ls/false (gb310c@syntax-dispatch gb393d@t '(#(scheme-id quasiquote) any)))) (if gb393f@ls/false (apply (lambda (gb3941@p) (gb3912@quasicons (gb38f4@datum 'quasiquote) (gb391a@quasi (list gb3941@p) (+ gb3924@lev '1)))) gb393f@ls/false) (let ((gb3943@t gb393d@t)) (let ((gb3945@ls/false (gb310c@syntax-dispatch gb3943@t '(any . any)))) (if gb3945@ls/false (apply (lambda (gb3947@p gb3948@q) (gb3912@quasicons (gb391a@quasi gb3947@p gb3924@lev) (gb391a@quasi gb3948@q gb3924@lev))) gb3945@ls/false) (let ((gb394b@t gb3943@t)) (let ((gb394d@ls/false (gb310c@syntax-dispatch gb394b@t '#(vector each-any)))) (if (and gb394d@ls/false (apply (lambda (gb394f@x) (not (gb2ed1@stx? gb394f@x))) gb394d@ls/false)) (apply (lambda (gb3951@x) (gb3916@quasivector (gb3918@vquasi gb3951@x gb3924@lev))) gb394d@ls/false) (let ((gb3953@t gb394b@t)) (let ((gb3955@ls/false (gb310c@syntax-dispatch gb3953@t 'any))) (if gb3955@ls/false (apply (lambda (gb3957@p) (list (gb3094@scheme-stx 'quote) gb3957@p)) gb3955@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3953@t))))))))))))))))))))))))) (lambda (gb391b@x) (let ((gb391d@t gb391b@x)) (let ((gb391f@ls/false (gb310c@syntax-dispatch gb391d@t '(_ any)))) (if gb391f@ls/false (apply (lambda (gb3921@e) (gb391a@quasi gb3921@e '0)) gb391f@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb391d@t))))))) (set! gb4c0f@gb30fa@quasiquote-macro gb30fa@quasiquote-macro) (set! gb30fc@quasisyntax-macro (letrec* ((gb39f8@quasi (lambda (gb3a13@p gb3a14@lev) (let ((gb3a17@t gb3a13@p)) (let ((gb3a19@ls/false (gb310c@syntax-dispatch gb3a17@t '(#(scheme-id unsyntax) any)))) (if gb3a19@ls/false (apply (lambda (gb3a1b@p) (if (= gb3a14@lev '0) (let ((gb3a1d@g (gensym))) (values (list gb3a1d@g) (list gb3a1b@p) gb3a1d@g)) (call-with-values (lambda () (gb39f8@quasi gb3a1b@p (- gb3a14@lev '1))) (lambda (gb3a25@gb3a20 gb3a26@gb3a22 gb3a27@gb3a24) (let ((gb3a2b@p gb3a27@gb3a24) (gb3a2c@rhs* gb3a26@gb3a22) (gb3a2d@lhs* gb3a25@gb3a20)) (values gb3a2d@lhs* gb3a2c@rhs* (list 'unsyntax gb3a2b@p))))))) gb3a19@ls/false) (let ((gb3a31@t gb3a17@t)) (let ((gb3a33@ls/false (gb310c@syntax-dispatch gb3a31@t '#(scheme-id unsyntax)))) (if (and gb3a33@ls/false (apply (lambda () (= gb3a14@lev '0)) gb3a33@ls/false)) (apply (lambda () (gb31ec@syntax-violation '#f '"incorrect use of unsyntax" gb3a13@p)) gb3a33@ls/false) (let ((gb3a35@t gb3a31@t)) (let ((gb3a37@ls/false (gb310c@syntax-dispatch gb3a35@t '((#(scheme-id unsyntax) . each-any) . any)))) (if gb3a37@ls/false (apply (lambda (gb3a39@p* gb3a3a@q) (call-with-values (lambda () (gb39f8@quasi gb3a3a@q gb3a14@lev)) (lambda (gb3a43@gb3a3e gb3a44@gb3a40 gb3a45@gb3a42) (let ((gb3a49@q gb3a45@gb3a42) (gb3a4a@rhs* gb3a44@gb3a40) (gb3a4b@lhs* gb3a43@gb3a3e)) (if (= gb3a14@lev '0) (let ((gb3a4f@g* (map (lambda (gb3a51@x) (gensym)) gb3a39@p*))) (values (append gb3a4f@g* gb3a4b@lhs*) (append gb3a39@p* gb3a4a@rhs*) (append gb3a4f@g* gb3a49@q))) (call-with-values (lambda () (gb39f8@quasi gb3a39@p* (- gb3a14@lev '1))) (lambda (gb3a59@gb3a54 gb3a5a@gb3a56 gb3a5b@gb3a58) (let ((gb3a5f@p* gb3a5b@gb3a58) (gb3a60@rhs2* gb3a5a@gb3a56) (gb3a61@lhs2* gb3a59@gb3a54)) (values (append gb3a61@lhs2* gb3a4b@lhs*) (append gb3a60@rhs2* gb3a4a@rhs*) (cons (cons 'unsyntax gb3a5f@p*) gb3a49@q)))))))))) gb3a37@ls/false) (let ((gb3a65@t gb3a35@t)) (let ((gb3a67@ls/false (gb310c@syntax-dispatch gb3a65@t '((#(scheme-id unsyntax-splicing) . each-any) . any)))) (if gb3a67@ls/false (apply (lambda (gb3a69@p* gb3a6a@q) (call-with-values (lambda () (gb39f8@quasi gb3a6a@q gb3a14@lev)) (lambda (gb3a73@gb3a6e gb3a74@gb3a70 gb3a75@gb3a72) (let ((gb3a79@q gb3a75@gb3a72) (gb3a7a@rhs* gb3a74@gb3a70) (gb3a7b@lhs* gb3a73@gb3a6e)) (if (= gb3a14@lev '0) (let ((gb3a7f@g* (map (lambda (gb3a81@x) (gensym)) gb3a69@p*))) (values (append (map (lambda (gb3a83@g) (cons gb3a83@g '(...))) gb3a7f@g*) gb3a7b@lhs*) (append gb3a69@p* gb3a7a@rhs*) (append (apply append (map (lambda (gb3a85@g) (cons gb3a85@g '(...))) gb3a7f@g*)) gb3a79@q))) (call-with-values (lambda () (gb39f8@quasi gb3a69@p* (- gb3a14@lev '1))) (lambda (gb3a8d@gb3a88 gb3a8e@gb3a8a gb3a8f@gb3a8c) (let ((gb3a93@p* gb3a8f@gb3a8c) (gb3a94@rhs2* gb3a8e@gb3a8a) (gb3a95@lhs2* gb3a8d@gb3a88)) (values (append gb3a95@lhs2* gb3a7b@lhs*) (append gb3a94@rhs2* gb3a7a@rhs*) (cons (cons 'unsyntax-splicing gb3a93@p*) gb3a79@q)))))))))) gb3a67@ls/false) (let ((gb3a99@t gb3a65@t)) (let ((gb3a9b@ls/false (gb310c@syntax-dispatch gb3a99@t '#(scheme-id unsyntax-splicing)))) (if (and gb3a9b@ls/false (apply (lambda () (= gb3a14@lev '0)) gb3a9b@ls/false)) (apply (lambda () (gb31ec@syntax-violation '#f '"incorrect use of unsyntax-splicing" gb3a13@p)) gb3a9b@ls/false) (let ((gb3a9d@t gb3a99@t)) (let ((gb3a9f@ls/false (gb310c@syntax-dispatch gb3a9d@t '(#(scheme-id quasisyntax) any)))) (if gb3a9f@ls/false (apply (lambda (gb3aa1@p) (call-with-values (lambda () (gb39f8@quasi gb3aa1@p (+ gb3a14@lev '1))) (lambda (gb3aa9@gb3aa4 gb3aaa@gb3aa6 gb3aab@gb3aa8) (let ((gb3aaf@p gb3aab@gb3aa8) (gb3ab0@rhs* gb3aaa@gb3aa6) (gb3ab1@lhs* gb3aa9@gb3aa4)) (values gb3ab1@lhs* gb3ab0@rhs* (list 'quasisyntax gb3aaf@p)))))) gb3a9f@ls/false) (let ((gb3ab5@t gb3a9d@t)) (let ((gb3ab7@ls/false (gb310c@syntax-dispatch gb3ab5@t '(any . any)))) (if gb3ab7@ls/false (apply (lambda (gb3ab9@p gb3aba@q) (call-with-values (lambda () (gb39f8@quasi gb3ab9@p gb3a14@lev)) (lambda (gb3ac9@gb3abe gb3aca@gb3ac0 gb3acb@gb3ac2) (call-with-values (lambda () (gb39f8@quasi gb3aba@q gb3a14@lev)) (lambda (gb3acf@gb3ac4 gb3ad0@gb3ac6 gb3ad1@gb3ac8) (let ((gb3ad5@q gb3ad1@gb3ac8) (gb3ad6@rhs2* gb3ad0@gb3ac6) (gb3ad7@lhs2* gb3acf@gb3ac4) (gb3ad8@p gb3acb@gb3ac2) (gb3ad9@rhs* gb3aca@gb3ac0) (gb3ada@lhs* gb3ac9@gb3abe)) (values (append gb3ad7@lhs2* gb3ada@lhs*) (append gb3ad6@rhs2* gb3ad9@rhs*) (cons gb3ad8@p gb3ad5@q)))))))) gb3ab7@ls/false) (let ((gb3ae1@t gb3ab5@t)) (let ((gb3ae3@ls/false (gb310c@syntax-dispatch gb3ae1@t '#(vector each-any)))) (if gb3ae3@ls/false (apply (lambda (gb3ae5@x*) (call-with-values (lambda () (gb39f8@quasi gb3ae5@x* gb3a14@lev)) (lambda (gb3aed@gb3ae8 gb3aee@gb3aea gb3aef@gb3aec) (let ((gb3af3@x* gb3aef@gb3aec) (gb3af4@rhs* gb3aee@gb3aea) (gb3af5@lhs* gb3aed@gb3ae8)) (values gb3af5@lhs* gb3af4@rhs* (list->vector gb3af3@x*)))))) gb3ae3@ls/false) (let ((gb3af9@t gb3ae1@t)) (let ((gb3afb@ls/false (gb310c@syntax-dispatch gb3af9@t '_))) (if gb3afb@ls/false (apply (lambda () (values '() '() gb3a13@p)) gb3afb@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3af9@t))))))))))))))))))))))))))))))) (lambda (gb39f9@x) (let ((gb39fb@t gb39f9@x)) (let ((gb39fd@ls/false (gb310c@syntax-dispatch gb39fb@t '(_ any)))) (if gb39fd@ls/false (apply (lambda (gb39ff@e) (call-with-values (lambda () (gb39f8@quasi gb39ff@e '0)) (lambda (gb3a07@gb3a02 gb3a08@gb3a04 gb3a09@gb3a06) (let ((gb3a0d@v gb3a09@gb3a06) (gb3a0e@rhs* gb3a08@gb3a04) (gb3a0f@lhs* gb3a07@gb3a02)) (gb30c2@bless (list 'syntax-case (cons 'list gb3a0e@rhs*) '() (list gb3a0f@lhs* (list 'syntax gb3a0d@v)))))))) gb39fd@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb39fb@t))))))) (set! gb4c10@gb30fc@quasisyntax-macro gb30fc@quasisyntax-macro) (set! gb30fe@define-struct-macro (lambda (gb3afd@stx) (gb31ec@syntax-violation '#f '"define-struct not supported" gb3afd@stx))) (set! gb4c11@gb30fe@define-struct-macro gb30fe@define-struct-macro) (set! gb3100@define-record-type-macro (lambda (gb3aff@x) (letrec* ((gb3b02@id (lambda (gb3cf5@ctxt . gb3cf7@str*) (gb31f0@datum->syntax gb3cf5@ctxt (string->symbol (apply string-append (map (lambda (gb3cf9@x) (if (symbol? gb3cf9@x) (symbol->string gb3cf9@x) (if (string? gb3cf9@x) gb3cf9@x (assertion-violation 'define-record-type '"BUG")))) gb3cf7@str*)))))) (gb3b04@get-record-name (lambda (gb3ce3@spec) (let ((gb3ce5@t gb3ce3@spec)) (let ((gb3ce7@ls/false (gb310c@syntax-dispatch gb3ce5@t '(any any any)))) (if gb3ce7@ls/false (apply (lambda (gb3ce9@foo gb3cea@make-foo gb3ceb@foo?) gb3ce9@foo) gb3ce7@ls/false) (let ((gb3cef@t gb3ce5@t)) (let ((gb3cf1@ls/false (gb310c@syntax-dispatch gb3cef@t 'any))) (if gb3cf1@ls/false (apply (lambda (gb3cf3@foo) gb3cf3@foo) gb3cf1@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3cef@t))))))))) (gb3b06@get-record-constructor-name (lambda (gb3ccf@spec) (let ((gb3cd1@t gb3ccf@spec)) (let ((gb3cd3@ls/false (gb310c@syntax-dispatch gb3cd1@t '(any any any)))) (if gb3cd3@ls/false (apply (lambda (gb3cd5@foo gb3cd6@make-foo gb3cd7@foo?) gb3cd6@make-foo) gb3cd3@ls/false) (let ((gb3cdb@t gb3cd1@t)) (let ((gb3cdd@ls/false (gb310c@syntax-dispatch gb3cdb@t 'any))) (if (and gb3cdd@ls/false (apply (lambda (gb3cdf@foo) (gb2f05@id? gb3cdf@foo)) gb3cdd@ls/false)) (apply (lambda (gb3ce1@foo) (gb3b02@id gb3ce1@foo '"make-" (gb2f19@stx->datum gb3ce1@foo))) gb3cdd@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3cdb@t))))))))) (gb3b08@get-record-predicate-name (lambda (gb3cbb@spec) (let ((gb3cbd@t gb3cbb@spec)) (let ((gb3cbf@ls/false (gb310c@syntax-dispatch gb3cbd@t '(any any any)))) (if gb3cbf@ls/false (apply (lambda (gb3cc1@foo gb3cc2@make-foo gb3cc3@foo?) gb3cc3@foo?) gb3cbf@ls/false) (let ((gb3cc7@t gb3cbd@t)) (let ((gb3cc9@ls/false (gb310c@syntax-dispatch gb3cc7@t 'any))) (if (and gb3cc9@ls/false (apply (lambda (gb3ccb@foo) (gb2f05@id? gb3ccb@foo)) gb3cc9@ls/false)) (apply (lambda (gb3ccd@foo) (gb3b02@id gb3ccd@foo (gb2f19@stx->datum gb3ccd@foo) '"?")) gb3cc9@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3cc7@t))))))))) (gb3b0a@get-clause (lambda (gb3ca9@id gb3caa@ls) (let ((gb3cad@t gb3caa@ls)) (let ((gb3caf@ls/false (gb310c@syntax-dispatch gb3cad@t '()))) (if gb3caf@ls/false (apply (lambda () '#f) gb3caf@ls/false) (let ((gb3cb1@t gb3cad@t)) (let ((gb3cb3@ls/false (gb310c@syntax-dispatch gb3cb1@t '((any . any) . any)))) (if gb3cb3@ls/false (apply (lambda (gb3cb5@x gb3cb6@rest gb3cb7@ls) (if (gb2f0b@free-id=? (gb30c2@bless gb3ca9@id) gb3cb5@x) (cons gb3cb5@x gb3cb6@rest) (gb3b0a@get-clause gb3ca9@id gb3cb7@ls))) gb3cb3@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3cb1@t))))))))) (gb3b0c@foo-rtd-code (lambda (gb3c57@name gb3c58@clause* gb3c59@parent-rtd-code) (letrec* ((gb3c5e@convert-field-spec* (lambda (gb3c8f@ls) (list->vector (map (lambda (gb3c91@x) (let ((gb3c93@t gb3c91@x)) (let ((gb3c95@ls/false (gb310c@syntax-dispatch gb3c93@t '(#(scheme-id mutable) any . any)))) (if gb3c95@ls/false (apply (lambda (gb3c97@name gb3c98@rest) (list 'mutable gb3c97@name)) gb3c95@ls/false) (let ((gb3c9b@t gb3c93@t)) (let ((gb3c9d@ls/false (gb310c@syntax-dispatch gb3c9b@t '(#(scheme-id immutable) any . any)))) (if gb3c9d@ls/false (apply (lambda (gb3c9f@name gb3ca0@rest) (list 'immutable gb3c9f@name)) gb3c9d@ls/false) (let ((gb3ca3@t gb3c9b@t)) (let ((gb3ca5@ls/false (gb310c@syntax-dispatch gb3ca3@t 'any))) (if gb3ca5@ls/false (apply (lambda (gb3ca7@name) (list 'immutable gb3ca7@name)) gb3ca5@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3ca3@t))))))))))) gb3c8f@ls))))) (let ((gb3c5f@uid-code (let ((gb3c67@t (gb3b0a@get-clause 'nongenerative gb3c58@clause*))) (let ((gb3c69@ls/false (gb310c@syntax-dispatch gb3c67@t '(_)))) (if gb3c69@ls/false (apply (lambda () (list 'quote (gensym))) gb3c69@ls/false) (let ((gb3c6b@t gb3c67@t)) (let ((gb3c6d@ls/false (gb310c@syntax-dispatch gb3c6b@t '(_ any)))) (if gb3c6d@ls/false (apply (lambda (gb3c6f@uid) (list 'quote gb3c6f@uid)) gb3c6d@ls/false) (let ((gb3c71@t gb3c6b@t)) (let ((gb3c73@ls/false (gb310c@syntax-dispatch gb3c71@t '_))) (if gb3c73@ls/false (apply (lambda () '#f) gb3c73@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3c71@t))))))))))) (gb3c60@sealed? (let ((gb3c75@t (gb3b0a@get-clause 'sealed gb3c58@clause*))) (let ((gb3c77@ls/false (gb310c@syntax-dispatch gb3c75@t '(_ #(atom #t))))) (if gb3c77@ls/false (apply (lambda () '#t) gb3c77@ls/false) (let ((gb3c79@t gb3c75@t)) (let ((gb3c7b@ls/false (gb310c@syntax-dispatch gb3c79@t '_))) (if gb3c7b@ls/false (apply (lambda () '#f) gb3c7b@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3c79@t)))))))) (gb3c61@opaque? (let ((gb3c7d@t (gb3b0a@get-clause 'opaque gb3c58@clause*))) (let ((gb3c7f@ls/false (gb310c@syntax-dispatch gb3c7d@t '(_ #(atom #t))))) (if gb3c7f@ls/false (apply (lambda () '#t) gb3c7f@ls/false) (let ((gb3c81@t gb3c7d@t)) (let ((gb3c83@ls/false (gb310c@syntax-dispatch gb3c81@t '_))) (if gb3c83@ls/false (apply (lambda () '#f) gb3c83@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3c81@t)))))))) (gb3c62@fields (let ((gb3c85@t (gb3b0a@get-clause 'fields gb3c58@clause*))) (let ((gb3c87@ls/false (gb310c@syntax-dispatch gb3c85@t '(_ . each-any)))) (if gb3c87@ls/false (apply (lambda (gb3c89@field-spec*) (list 'quote (gb3c5e@convert-field-spec* gb3c89@field-spec*))) gb3c87@ls/false) (let ((gb3c8b@t gb3c85@t)) (let ((gb3c8d@ls/false (gb310c@syntax-dispatch gb3c8b@t '_))) (if gb3c8d@ls/false (apply (lambda () ''#()) gb3c8d@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3c8b@t))))))))) (gb30c2@bless (list 'make-record-type-descriptor (list 'quote gb3c57@name) gb3c59@parent-rtd-code gb3c5f@uid-code gb3c60@sealed? gb3c61@opaque? gb3c62@fields)))))) (gb3b0e@parent-rtd-code (lambda (gb3c3f@clause*) (let ((gb3c41@t (gb3b0a@get-clause 'parent gb3c3f@clause*))) (let ((gb3c43@ls/false (gb310c@syntax-dispatch gb3c41@t '(_ any)))) (if gb3c43@ls/false (apply (lambda (gb3c45@name) (list 'record-type-descriptor gb3c45@name)) gb3c43@ls/false) (let ((gb3c47@t gb3c41@t)) (let ((gb3c49@ls/false (gb310c@syntax-dispatch gb3c47@t '#(atom #f)))) (if gb3c49@ls/false (apply (lambda () (let ((gb3c4b@t (gb3b0a@get-clause 'parent-rtd gb3c3f@clause*))) (let ((gb3c4d@ls/false (gb310c@syntax-dispatch gb3c4b@t '(_ any any)))) (if gb3c4d@ls/false (apply (lambda (gb3c4f@rtd gb3c50@rcd) gb3c4f@rtd) gb3c4d@ls/false) (let ((gb3c53@t gb3c4b@t)) (let ((gb3c55@ls/false (gb310c@syntax-dispatch gb3c53@t '#(atom #f)))) (if gb3c55@ls/false (apply (lambda () '#f) gb3c55@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3c53@t)))))))) gb3c49@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3c47@t))))))))) (gb3b10@parent-rcd-code (lambda (gb3c27@clause*) (let ((gb3c29@t (gb3b0a@get-clause 'parent gb3c27@clause*))) (let ((gb3c2b@ls/false (gb310c@syntax-dispatch gb3c29@t '(_ any)))) (if gb3c2b@ls/false (apply (lambda (gb3c2d@name) (list 'record-constructor-descriptor gb3c2d@name)) gb3c2b@ls/false) (let ((gb3c2f@t gb3c29@t)) (let ((gb3c31@ls/false (gb310c@syntax-dispatch gb3c2f@t '#(atom #f)))) (if gb3c31@ls/false (apply (lambda () (let ((gb3c33@t (gb3b0a@get-clause 'parent-rtd gb3c27@clause*))) (let ((gb3c35@ls/false (gb310c@syntax-dispatch gb3c33@t '(_ any any)))) (if gb3c35@ls/false (apply (lambda (gb3c37@rtd gb3c38@rcd) gb3c38@rcd) gb3c35@ls/false) (let ((gb3c3b@t gb3c33@t)) (let ((gb3c3d@ls/false (gb310c@syntax-dispatch gb3c3b@t '#(atom #f)))) (if gb3c3d@ls/false (apply (lambda () '#f) gb3c3d@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3c3b@t)))))))) gb3c31@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3c2f@t))))))))) (gb3b12@foo-rcd-code (lambda (gb3c1f@clause* gb3c20@foo-rtd gb3c21@protocol gb3c22@parent-rcd-code) (list 'make-record-constructor-descriptor gb3c20@foo-rtd gb3c22@parent-rcd-code gb3c21@protocol))) (gb3b14@get-protocol-code (lambda (gb3c13@clause*) (let ((gb3c15@t (gb3b0a@get-clause 'protocol gb3c13@clause*))) (let ((gb3c17@ls/false (gb310c@syntax-dispatch gb3c15@t '(_ any)))) (if gb3c17@ls/false (apply (lambda (gb3c19@expr) gb3c19@expr) gb3c17@ls/false) (let ((gb3c1b@t gb3c15@t)) (let ((gb3c1d@ls/false (gb310c@syntax-dispatch gb3c1b@t '_))) (if gb3c1d@ls/false (apply (lambda () '#f) gb3c1d@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3c1b@t))))))))) (gb3b16@get-fields (lambda (gb3c01@clause*) (let ((gb3c03@t gb3c01@clause*)) (let ((gb3c05@ls/false (gb310c@syntax-dispatch gb3c03@t '()))) (if gb3c05@ls/false (apply (lambda () '()) gb3c05@ls/false) (let ((gb3c07@t gb3c03@t)) (let ((gb3c09@ls/false (gb310c@syntax-dispatch gb3c07@t '((#(scheme-id fields) . each-any) . _)))) (if gb3c09@ls/false (apply (lambda (gb3c0b@f*) gb3c0b@f*) gb3c09@ls/false) (let ((gb3c0d@t gb3c07@t)) (let ((gb3c0f@ls/false (gb310c@syntax-dispatch gb3c0d@t '(_ . any)))) (if gb3c0f@ls/false (apply (lambda (gb3c11@rest) (gb3b16@get-fields gb3c11@rest)) gb3c0f@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3c0d@t)))))))))))) (gb3b18@get-mutator-indices (lambda (gb3be9@fields) (let gb3bef@f ((gb3beb@fields gb3be9@fields) (gb3bec@i '0)) (let ((gb3bf1@t gb3beb@fields)) (let ((gb3bf3@ls/false (gb310c@syntax-dispatch gb3bf1@t '()))) (if gb3bf3@ls/false (apply (lambda () '()) gb3bf3@ls/false) (let ((gb3bf5@t gb3bf1@t)) (let ((gb3bf7@ls/false (gb310c@syntax-dispatch gb3bf5@t '((#(scheme-id mutable) . _) . any)))) (if gb3bf7@ls/false (apply (lambda (gb3bf9@rest) (cons gb3bec@i (gb3bef@f gb3bf9@rest (+ gb3bec@i '1)))) gb3bf7@ls/false) (let ((gb3bfb@t gb3bf5@t)) (let ((gb3bfd@ls/false (gb310c@syntax-dispatch gb3bfb@t '(_ . any)))) (if gb3bfd@ls/false (apply (lambda (gb3bff@rest) (gb3bef@f gb3bff@rest (+ gb3bec@i '1))) gb3bfd@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3bfb@t))))))))))))) (gb3b1a@get-mutators (lambda (gb3bbf@foo gb3bc0@fields) (letrec* ((gb3bc4@gen-name (lambda (gb3be7@x) (gb31f0@datum->syntax gb3bbf@foo (string->symbol (string-append (symbol->string (gb31f2@syntax->datum gb3bbf@foo)) '"-" (symbol->string (gb31f2@syntax->datum gb3be7@x)) '"-set!")))))) (let gb3bc7@f ((gb3bc5@fields gb3bc0@fields)) (let ((gb3bc9@t gb3bc5@fields)) (let ((gb3bcb@ls/false (gb310c@syntax-dispatch gb3bc9@t '()))) (if gb3bcb@ls/false (apply (lambda () '()) gb3bcb@ls/false) (let ((gb3bcd@t gb3bc9@t)) (let ((gb3bcf@ls/false (gb310c@syntax-dispatch gb3bcd@t '((#(scheme-id mutable) any any any) . any)))) (if gb3bcf@ls/false (apply (lambda (gb3bd1@name gb3bd2@accessor gb3bd3@mutator gb3bd4@rest) (cons gb3bd3@mutator (gb3bc7@f gb3bd4@rest))) gb3bcf@ls/false) (let ((gb3bd9@t gb3bcd@t)) (let ((gb3bdb@ls/false (gb310c@syntax-dispatch gb3bd9@t '((#(scheme-id mutable) any) . any)))) (if gb3bdb@ls/false (apply (lambda (gb3bdd@name gb3bde@rest) (cons (gb3bc4@gen-name gb3bdd@name) (gb3bc7@f gb3bde@rest))) gb3bdb@ls/false) (let ((gb3be1@t gb3bd9@t)) (let ((gb3be3@ls/false (gb310c@syntax-dispatch gb3be1@t '(_ . any)))) (if gb3be3@ls/false (apply (lambda (gb3be5@rest) (gb3bc7@f gb3be5@rest)) gb3be3@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3be1@t))))))))))))))))) (gb3b1c@get-accessors (lambda (gb3b7b@foo gb3b7c@fields) (letrec* ((gb3b80@gen-name (lambda (gb3bbd@x) (gb31f0@datum->syntax gb3b7b@foo (string->symbol (string-append (symbol->string (gb31f2@syntax->datum gb3b7b@foo)) '"-" (symbol->string (gb31f2@syntax->datum gb3bbd@x)))))))) (map (lambda (gb3b81@field) (let ((gb3b83@t gb3b81@field)) (let ((gb3b85@ls/false (gb310c@syntax-dispatch gb3b83@t '(#(scheme-id mutable) any any any)))) (if (and gb3b85@ls/false (apply (lambda (gb3b87@name gb3b88@accessor gb3b89@mutator) (gb2f05@id? gb3b88@accessor)) gb3b85@ls/false)) (apply (lambda (gb3b8d@name gb3b8e@accessor gb3b8f@mutator) gb3b8e@accessor) gb3b85@ls/false) (let ((gb3b93@t gb3b83@t)) (let ((gb3b95@ls/false (gb310c@syntax-dispatch gb3b93@t '(#(scheme-id immutable) any any)))) (if (and gb3b95@ls/false (apply (lambda (gb3b97@name gb3b98@accessor) (gb2f05@id? gb3b98@accessor)) gb3b95@ls/false)) (apply (lambda (gb3b9b@name gb3b9c@accessor) gb3b9c@accessor) gb3b95@ls/false) (let ((gb3b9f@t gb3b93@t)) (let ((gb3ba1@ls/false (gb310c@syntax-dispatch gb3b9f@t '(#(scheme-id mutable) any)))) (if (and gb3ba1@ls/false (apply (lambda (gb3ba3@name) (gb2f05@id? gb3ba3@name)) gb3ba1@ls/false)) (apply (lambda (gb3ba5@name) (gb3b80@gen-name gb3ba5@name)) gb3ba1@ls/false) (let ((gb3ba7@t gb3b9f@t)) (let ((gb3ba9@ls/false (gb310c@syntax-dispatch gb3ba7@t '(#(scheme-id immutable) any)))) (if (and gb3ba9@ls/false (apply (lambda (gb3bab@name) (gb2f05@id? gb3bab@name)) gb3ba9@ls/false)) (apply (lambda (gb3bad@name) (gb3b80@gen-name gb3bad@name)) gb3ba9@ls/false) (let ((gb3baf@t gb3ba7@t)) (let ((gb3bb1@ls/false (gb310c@syntax-dispatch gb3baf@t 'any))) (if (and gb3bb1@ls/false (apply (lambda (gb3bb3@name) (gb2f05@id? gb3bb3@name)) gb3bb1@ls/false)) (apply (lambda (gb3bb5@name) (gb3b80@gen-name gb3bb5@name)) gb3bb1@ls/false) (let ((gb3bb7@t gb3baf@t)) (let ((gb3bb9@ls/false (gb310c@syntax-dispatch gb3bb7@t 'any))) (if gb3bb9@ls/false (apply (lambda (gb3bbb@others) (gb31ec@syntax-violation '#f '"invalid field spec" gb3b81@field)) gb3bb9@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3bb7@t)))))))))))))))))))) gb3b7c@fields)))) (gb3b1e@enumerate (lambda (gb3b73@ls) (let gb3b79@f ((gb3b75@ls gb3b73@ls) (gb3b76@i '0)) (if (null? gb3b75@ls) '() (cons gb3b76@i (gb3b79@f (cdr gb3b75@ls) (+ gb3b76@i '1))))))) (gb3b20@do-define-record (lambda (gb3b4b@namespec gb3b4c@clause*) (let ((gb3b4f@foo (gb3b04@get-record-name gb3b4b@namespec))) (let ((gb3b51@foo-rtd (gensym))) (let ((gb3b53@foo-rcd (gensym))) (let ((gb3b55@protocol (gensym))) (let ((gb3b57@make-foo (gb3b06@get-record-constructor-name gb3b4b@namespec))) (let ((gb3b59@fields (gb3b16@get-fields gb3b4c@clause*))) (let ((gb3b5b@idx* (gb3b1e@enumerate gb3b59@fields))) (let ((gb3b5d@foo-x* (gb3b1c@get-accessors gb3b4f@foo gb3b59@fields))) (let ((gb3b5f@set-foo-x!* (gb3b1a@get-mutators gb3b4f@foo gb3b59@fields))) (let ((gb3b61@set-foo-idx* (gb3b18@get-mutator-indices gb3b59@fields))) (let ((gb3b63@foo? (gb3b08@get-record-predicate-name gb3b4b@namespec))) (let ((gb3b65@foo-rtd-code (gb3b0c@foo-rtd-code gb3b4f@foo gb3b4c@clause* (gb3b0e@parent-rtd-code gb3b4c@clause*)))) (let ((gb3b67@foo-rcd-code (gb3b12@foo-rcd-code gb3b4c@clause* gb3b51@foo-rtd gb3b55@protocol (gb3b10@parent-rcd-code gb3b4c@clause*)))) (let ((gb3b69@protocol-code (gb3b14@get-protocol-code gb3b4c@clause*))) (gb30c2@bless (cons 'begin (cons (list 'define gb3b51@foo-rtd gb3b65@foo-rtd-code) (cons (list 'define gb3b55@protocol gb3b69@protocol-code) (cons (list 'define gb3b53@foo-rcd gb3b67@foo-rcd-code) (cons (list 'define-syntax gb3b4f@foo (list 'list ''$rtd (list 'syntax gb3b51@foo-rtd) (list 'syntax gb3b53@foo-rcd))) (cons (list 'define gb3b63@foo? (list 'record-predicate gb3b51@foo-rtd)) (cons (list 'define gb3b57@make-foo (list 'record-constructor gb3b53@foo-rcd)) (append (map (lambda (gb3b6b@foo-x gb3b6c@idx) (list 'define gb3b6b@foo-x (list 'record-accessor gb3b51@foo-rtd gb3b6c@idx))) gb3b5d@foo-x* gb3b5b@idx*) (map (lambda (gb3b6f@set-foo-x! gb3b70@idx) (list 'define gb3b6f@set-foo-x! (list 'record-mutator gb3b51@foo-rtd gb3b70@idx))) gb3b5f@set-foo-x!* gb3b61@set-foo-idx*)))))))))))))))))))))))))) (gb3b22@verify-clauses (lambda (gb3b2b@x gb3b2c@cls*) (letrec* ((gb3b30@valid-kwds (map gb30c2@bless '(fields parent parent-rtd protocol sealed opaque nongenerative))) (gb3b32@free-id-member? (lambda (gb3b47@x gb3b48@ls) (and (pair? gb3b48@ls) (or (gb2f0b@free-id=? gb3b47@x (car gb3b48@ls)) (gb3b32@free-id-member? gb3b47@x (cdr gb3b48@ls))))))) (let gb3b37@f ((gb3b33@cls* gb3b2c@cls*) (gb3b34@seen* '())) (if (not (null? gb3b33@cls*)) (let ((gb3b39@t (car gb3b33@cls*))) (let ((gb3b3b@ls/false (gb310c@syntax-dispatch gb3b39@t '(any . any)))) (if gb3b3b@ls/false (apply (lambda (gb3b3d@kwd gb3b3e@rest) (if (or (not (gb2f05@id? gb3b3d@kwd)) (not (gb3b32@free-id-member? gb3b3d@kwd gb3b30@valid-kwds))) (gb31ec@syntax-violation '#f '"not a valid define-record-type keyword" gb3b3d@kwd) (if (gb2f11@bound-id-member? gb3b3d@kwd gb3b34@seen*) (gb31ec@syntax-violation '#f '"duplicate use of keyword " gb3b2b@x gb3b3d@kwd) (gb3b37@f (cdr gb3b33@cls*) (cons gb3b3d@kwd gb3b34@seen*))))) gb3b3b@ls/false) (let ((gb3b41@t gb3b39@t)) (let ((gb3b43@ls/false (gb310c@syntax-dispatch gb3b41@t 'any))) (if gb3b43@ls/false (apply (lambda (gb3b45@cls) (gb31ec@syntax-violation '#f '"malformed define-record-type clause" gb3b45@cls)) gb3b43@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3b41@t))))))) (void))))))) (let ((gb3b23@t gb3aff@x)) (let ((gb3b25@ls/false (gb310c@syntax-dispatch gb3b23@t '(_ any . each-any)))) (if gb3b25@ls/false (apply (lambda (gb3b27@namespec gb3b28@clause*) (begin (gb3b22@verify-clauses gb3aff@x gb3b28@clause*) (gb3b20@do-define-record gb3b27@namespec gb3b28@clause*))) gb3b25@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3b23@t))))))) (set! gb4c12@gb3100@define-record-type-macro gb3100@define-record-type-macro) (set! gb3102@define-condition-type-macro (lambda (gb3cfb@x) (letrec* ((gb3cfe@mkname (lambda (gb3d2b@name gb3d2c@suffix) (gb31f0@datum->syntax gb3d2b@name (string->symbol (string-append (symbol->string (gb31f2@syntax->datum gb3d2b@name)) gb3d2c@suffix)))))) (let ((gb3cff@t gb3cfb@x)) (let ((gb3d01@ls/false (gb310c@syntax-dispatch gb3cff@t '(any any any any any . #(each (any any)))))) (if (and gb3d01@ls/false (apply (lambda (gb3d03@ctxt gb3d04@name gb3d05@super gb3d06@constructor gb3d07@predicate gb3d08@field* gb3d09@accessor*) (and (gb2f05@id? gb3d04@name) (gb2f05@id? gb3d05@super) (gb2f05@id? gb3d06@constructor) (gb2f05@id? gb3d07@predicate) (for-all gb2f05@id? gb3d08@field*) (for-all gb2f05@id? gb3d09@accessor*))) gb3d01@ls/false)) (apply (lambda (gb3d11@ctxt gb3d12@name gb3d13@super gb3d14@constructor gb3d15@predicate gb3d16@field* gb3d17@accessor*) (let ((gb3d1f@aux-accessor* (map (lambda (gb3d21@x) (gensym)) gb3d17@accessor*))) (gb30c2@bless (cons 'begin (cons (cons 'define-record-type (cons (list gb3d12@name gb3d14@constructor (gensym)) (cons (list 'parent gb3d13@super) (cons (cons 'fields (map (lambda (gb3d23@field gb3d24@aux) (list 'immutable gb3d23@field gb3d24@aux)) gb3d16@field* gb3d1f@aux-accessor*)) '((nongenerative) (sealed #f) (opaque #f)))))) (cons (list 'define gb3d15@predicate (list 'condition-predicate (list 'record-type-descriptor gb3d12@name))) (map (lambda (gb3d27@accessor gb3d28@aux) (list 'define gb3d27@accessor (list 'condition-accessor (list 'record-type-descriptor gb3d12@name) gb3d28@aux))) gb3d17@accessor* gb3d1f@aux-accessor*))))))) gb3d01@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3cff@t))))))) (set! gb4c13@gb3102@define-condition-type-macro gb3102@define-condition-type-macro) (set! gb3104@incorrect-usage-macro (lambda (gb3d2f@e) (gb31ec@syntax-violation '#f '"incorrect usage of auxiliary keyword" gb3d2f@e))) (set! gb4c14@gb3104@incorrect-usage-macro gb3104@incorrect-usage-macro) (set! gb3106@parameterize-macro (lambda (gb3d31@e) (let ((gb3d33@t gb3d31@e)) (let ((gb3d35@ls/false (gb310c@syntax-dispatch gb3d33@t '(_ () any . each-any)))) (if gb3d35@ls/false (apply (lambda (gb3d37@b gb3d38@b*) (gb30c2@bless (cons 'let (cons '() (cons gb3d37@b gb3d38@b*))))) gb3d35@ls/false) (let ((gb3d3b@t gb3d33@t)) (let ((gb3d3d@ls/false (gb310c@syntax-dispatch gb3d3b@t '(_ #(each (any any)) any . each-any)))) (if gb3d3d@ls/false (apply (lambda (gb3d3f@olhs* gb3d40@orhs* gb3d41@b gb3d42@b*) (let ((gb3d47@lhs* (gb31da@generate-temporaries gb3d3f@olhs*)) (gb3d48@rhs* (gb31da@generate-temporaries gb3d40@orhs*))) (gb30c2@bless (cons (list 'lambda (append gb3d47@lhs* gb3d48@rhs*) (list 'let (list (list 'swap (cons 'lambda (cons '() (map (lambda (gb3d4b@lhs gb3d4c@rhs) (list 'let (list (list 't (list gb3d4b@lhs))) (list gb3d4b@lhs gb3d4c@rhs) (cons 'set! (cons gb3d4c@rhs '(t))))) gb3d47@lhs* gb3d48@rhs*))))) (cons 'dynamic-wind (cons 'swap (cons (cons 'lambda (cons '() (cons gb3d41@b gb3d42@b*))) '(swap)))))) (append gb3d3f@olhs* gb3d40@orhs*))))) gb3d3d@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3d3b@t))))))))) (set! gb4c15@gb3106@parameterize-macro gb3106@parameterize-macro) (set! gb3108@foreign-call-transformer (lambda (gb3d4f@e gb3d50@r gb3d51@mr) (let ((gb3d55@t gb3d4f@e)) (let ((gb3d57@ls/false (gb310c@syntax-dispatch gb3d55@t '(_ any . each-any)))) (if gb3d57@ls/false (apply (lambda (gb3d59@name gb3d5a@arg*) (cons 'foreign-call (cons (gb312e@chi-expr gb3d59@name gb3d50@r gb3d51@mr) (gb312a@chi-expr* gb3d5a@arg* gb3d50@r gb3d51@mr)))) gb3d57@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3d55@t)))))) (set! gb4c16@gb3108@foreign-call-transformer gb3108@foreign-call-transformer) (set! gb310a@convert-pattern (lambda (gb3d5d@pattern gb3d5e@keys) (letrec* ((gb3d62@cvt* (lambda (gb3e01@p* gb3e02@n gb3e03@ids) (if (null? gb3e01@p*) (values '() gb3e03@ids) (call-with-values (lambda () (gb3d62@cvt* (cdr gb3e01@p*) gb3e02@n gb3e03@ids)) (lambda (gb3e0b@gb3e08 gb3e0c@gb3e0a) (let ((gb3e0f@ids gb3e0c@gb3e0a) (gb3e10@y gb3e0b@gb3e08)) (call-with-values (lambda () (gb3d64@cvt (car gb3e01@p*) gb3e02@n gb3e0f@ids)) (lambda (gb3e17@gb3e14 gb3e18@gb3e16) (let ((gb3e1b@ids gb3e18@gb3e16) (gb3e1c@x gb3e17@gb3e14)) (values (cons gb3e1c@x gb3e10@y) gb3e1b@ids)))))))))) (gb3d64@cvt (lambda (gb3d65@p gb3d66@n gb3d67@ids) (let ((gb3d6b@t gb3d65@p)) (let ((gb3d6d@ls/false (gb310c@syntax-dispatch gb3d6b@t 'any))) (if (and gb3d6d@ls/false (apply (lambda (gb3d6f@id) (gb2f05@id? gb3d6f@id)) gb3d6d@ls/false)) (apply (lambda (gb3d71@id) (if (gb2f11@bound-id-member? gb3d65@p gb3d5e@keys) (values (vector 'free-id gb3d65@p) gb3d67@ids) (if (gb2f0b@free-id=? gb3d65@p (gb3094@scheme-stx '_)) (values '_ gb3d67@ids) (values 'any (cons (cons gb3d65@p gb3d66@n) gb3d67@ids))))) gb3d6d@ls/false) (let ((gb3d73@t gb3d6b@t)) (let ((gb3d75@ls/false (gb310c@syntax-dispatch gb3d73@t '(any any)))) (if (and gb3d75@ls/false (apply (lambda (gb3d77@p gb3d78@dots) (gb310e@ellipsis? gb3d78@dots)) gb3d75@ls/false)) (apply (lambda (gb3d7b@p gb3d7c@dots) (call-with-values (lambda () (gb3d64@cvt gb3d7b@p (+ gb3d66@n '1) gb3d67@ids)) (lambda (gb3d83@gb3d80 gb3d84@gb3d82) (let ((gb3d87@ids gb3d84@gb3d82) (gb3d88@p gb3d83@gb3d80)) (values (if (eq? gb3d88@p 'any) 'each-any (vector 'each gb3d88@p)) gb3d87@ids))))) gb3d75@ls/false) (let ((gb3d8b@t gb3d73@t)) (let ((gb3d8d@ls/false (gb310c@syntax-dispatch gb3d8b@t '(any any . #(each+ any () any))))) (if (and gb3d8d@ls/false (apply (lambda (gb3d8f@x gb3d90@dots gb3d91@ys gb3d92@z) (gb310e@ellipsis? gb3d90@dots)) gb3d8d@ls/false)) (apply (lambda (gb3d97@x gb3d98@dots gb3d99@ys gb3d9a@z) (call-with-values (lambda () (gb3d64@cvt gb3d9a@z gb3d66@n gb3d67@ids)) (lambda (gb3da3@gb3da0 gb3da4@gb3da2) (let ((gb3da7@ids gb3da4@gb3da2) (gb3da8@z gb3da3@gb3da0)) (call-with-values (lambda () (gb3d62@cvt* gb3d99@ys gb3d66@n gb3da7@ids)) (lambda (gb3daf@gb3dac gb3db0@gb3dae) (let ((gb3db3@ids gb3db0@gb3dae) (gb3db4@ys gb3daf@gb3dac)) (call-with-values (lambda () (gb3d64@cvt gb3d97@x (+ gb3d66@n '1) gb3db3@ids)) (lambda (gb3dbb@gb3db8 gb3dbc@gb3dba) (let ((gb3dbf@ids gb3dbc@gb3dba) (gb3dc0@x gb3dbb@gb3db8)) (values (vector 'each+ gb3dc0@x (reverse gb3db4@ys) gb3da8@z) gb3dbf@ids))))))))))) gb3d8d@ls/false) (let ((gb3dc3@t gb3d8b@t)) (let ((gb3dc5@ls/false (gb310c@syntax-dispatch gb3dc3@t '(any . any)))) (if gb3dc5@ls/false (apply (lambda (gb3dc7@x gb3dc8@y) (call-with-values (lambda () (gb3d64@cvt gb3dc8@y gb3d66@n gb3d67@ids)) (lambda (gb3dcf@gb3dcc gb3dd0@gb3dce) (let ((gb3dd3@ids gb3dd0@gb3dce) (gb3dd4@y gb3dcf@gb3dcc)) (call-with-values (lambda () (gb3d64@cvt gb3dc7@x gb3d66@n gb3dd3@ids)) (lambda (gb3ddb@gb3dd8 gb3ddc@gb3dda) (let ((gb3ddf@ids gb3ddc@gb3dda) (gb3de0@x gb3ddb@gb3dd8)) (values (cons gb3de0@x gb3dd4@y) gb3ddf@ids)))))))) gb3dc5@ls/false) (let ((gb3de3@t gb3dc3@t)) (let ((gb3de5@ls/false (gb310c@syntax-dispatch gb3de3@t '()))) (if gb3de5@ls/false (apply (lambda () (values '() gb3d67@ids)) gb3de5@ls/false) (let ((gb3de7@t gb3de3@t)) (let ((gb3de9@ls/false (gb310c@syntax-dispatch gb3de7@t '#(vector each-any)))) (if (and gb3de9@ls/false (apply (lambda (gb3deb@p) (not (gb2ed1@stx? gb3deb@p))) gb3de9@ls/false)) (apply (lambda (gb3ded@p) (call-with-values (lambda () (gb3d64@cvt gb3ded@p gb3d66@n gb3d67@ids)) (lambda (gb3df3@gb3df0 gb3df4@gb3df2) (let ((gb3df7@ids gb3df4@gb3df2) (gb3df8@p gb3df3@gb3df0)) (values (vector 'vector gb3df8@p) gb3df7@ids))))) gb3de9@ls/false) (let ((gb3dfb@t gb3de7@t)) (let ((gb3dfd@ls/false (gb310c@syntax-dispatch gb3dfb@t 'any))) (if gb3dfd@ls/false (apply (lambda (gb3dff@datum) (values (vector 'atom (gb2f19@stx->datum gb3dff@datum)) gb3d67@ids)) gb3dfd@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3dfb@t))))))))))))))))))))))))) (gb3d64@cvt gb3d5d@pattern '0 '())))) (set! gb4c17@gb310a@convert-pattern gb310a@convert-pattern) (set! gb310c@syntax-dispatch (letrec* ((gb3e20@stx^ (lambda (gb3efb@e gb3efc@m* gb3efd@s* gb3efe@ae*) (if (and (null? gb3efc@m*) (null? gb3efd@s*) (null? gb3efe@ae*)) gb3efb@e (gb2eed@mkstx gb3efb@e gb3efc@m* gb3efd@s* gb3efe@ae*)))) (gb3e22@match-each (lambda (gb3edb@e gb3edc@p gb3edd@m* gb3ede@s* gb3edf@ae*) (if (pair? gb3edb@e) (let ((gb3ee5@first (gb3e2e@match (car gb3edb@e) gb3edc@p gb3edd@m* gb3ede@s* gb3edf@ae* '()))) (and gb3ee5@first (let ((gb3ee7@rest (gb3e22@match-each (cdr gb3edb@e) gb3edc@p gb3edd@m* gb3ede@s* gb3edf@ae*))) (and gb3ee7@rest (cons gb3ee5@first gb3ee7@rest))))) (if (null? gb3edb@e) '() (if (gb2ed1@stx? gb3edb@e) (and (not (gb2e8b@top-marked? gb3edd@m*)) (call-with-values (lambda () (join-wraps gb3edd@m* gb3ede@s* gb3edf@ae* gb3edb@e)) (lambda (gb3eef@gb3eea gb3ef0@gb3eec gb3ef1@gb3eee) (let ((gb3ef5@ae* gb3ef1@gb3eee) (gb3ef6@s* gb3ef0@gb3eec) (gb3ef7@m* gb3eef@gb3eea)) (gb3e22@match-each (gb2ed3@stx-expr gb3edb@e) gb3edc@p gb3ef7@m* gb3ef6@s* gb3ef5@ae*))))) (if (gb2a49@gb291b@annotation? gb3edb@e) (gb3e22@match-each (gb2a4b@gb291f@annotation-expression gb3edb@e) gb3edc@p gb3edd@m* gb3ede@s* gb3edf@ae*) '#f)))))) (gb3e24@match-each+ (lambda (gb3e9b@e gb3e9c@x-pat gb3e9d@y-pat gb3e9e@z-pat gb3e9f@m* gb3ea0@s* gb3ea1@ae* gb3ea2@r) (let gb3eb3@f ((gb3eab@e gb3e9b@e) (gb3eac@m* gb3e9f@m*) (gb3ead@s* gb3ea0@s*) (gb3eae@ae* gb3ea1@ae*)) (if (pair? gb3eab@e) (call-with-values (lambda () (gb3eb3@f (cdr gb3eab@e) gb3eac@m* gb3ead@s* gb3eae@ae*)) (lambda (gb3ebb@gb3eb6 gb3ebc@gb3eb8 gb3ebd@gb3eba) (let ((gb3ec1@r gb3ebd@gb3eba) (gb3ec2@y-pat gb3ebc@gb3eb8) (gb3ec3@xr* gb3ebb@gb3eb6)) (if gb3ec1@r (if (null? gb3ec2@y-pat) (let ((gb3ec7@xr (gb3e2e@match (car gb3eab@e) gb3e9c@x-pat gb3eac@m* gb3ead@s* gb3eae@ae* '()))) (if gb3ec7@xr (values (cons gb3ec7@xr gb3ec3@xr*) gb3ec2@y-pat gb3ec1@r) (values '#f '#f '#f))) (values '() (cdr gb3ec2@y-pat) (gb3e2e@match (car gb3eab@e) (car gb3ec2@y-pat) gb3eac@m* gb3ead@s* gb3eae@ae* gb3ec1@r))) (values '#f '#f '#f))))) (if (gb2ed1@stx? gb3eab@e) (if (gb2e8b@top-marked? gb3eac@m*) (values '() gb3e9d@y-pat (gb3e2e@match gb3eab@e gb3e9e@z-pat gb3eac@m* gb3ead@s* gb3eae@ae* gb3ea2@r)) (call-with-values (lambda () (join-wraps gb3eac@m* gb3ead@s* gb3eae@ae* gb3eab@e)) (lambda (gb3ecf@gb3eca gb3ed0@gb3ecc gb3ed1@gb3ece) (let ((gb3ed5@ae* gb3ed1@gb3ece) (gb3ed6@s* gb3ed0@gb3ecc) (gb3ed7@m* gb3ecf@gb3eca)) (gb3eb3@f (gb2ed3@stx-expr gb3eab@e) gb3ed7@m* gb3ed6@s* gb3ed5@ae*))))) (if (gb2a49@gb291b@annotation? gb3eab@e) (gb3eb3@f (gb2a4b@gb291f@annotation-expression gb3eab@e) gb3eac@m* gb3ead@s* gb3eae@ae*) (values '() gb3e9d@y-pat (gb3e2e@match gb3eab@e gb3e9e@z-pat gb3eac@m* gb3ead@s* gb3eae@ae* gb3ea2@r)))))))) (gb3e26@match-each-any (lambda (gb3e7f@e gb3e80@m* gb3e81@s* gb3e82@ae*) (if (pair? gb3e7f@e) (let ((gb3e87@l (gb3e26@match-each-any (cdr gb3e7f@e) gb3e80@m* gb3e81@s* gb3e82@ae*))) (and gb3e87@l (cons (gb3e20@stx^ (car gb3e7f@e) gb3e80@m* gb3e81@s* gb3e82@ae*) gb3e87@l))) (if (null? gb3e7f@e) '() (if (gb2ed1@stx? gb3e7f@e) (and (not (gb2e8b@top-marked? gb3e80@m*)) (call-with-values (lambda () (join-wraps gb3e80@m* gb3e81@s* gb3e82@ae* gb3e7f@e)) (lambda (gb3e8f@gb3e8a gb3e90@gb3e8c gb3e91@gb3e8e) (let ((gb3e95@ae* gb3e91@gb3e8e) (gb3e96@s* gb3e90@gb3e8c) (gb3e97@m* gb3e8f@gb3e8a)) (gb3e26@match-each-any (gb2ed3@stx-expr gb3e7f@e) gb3e97@m* gb3e96@s* gb3e95@ae*))))) (if (gb2a49@gb291b@annotation? gb3e7f@e) (gb3e26@match-each-any (gb2a4b@gb291f@annotation-expression gb3e7f@e) gb3e80@m* gb3e81@s* gb3e82@ae*) '#f)))))) (gb3e28@match-empty (lambda (gb3e79@p gb3e7a@r) (if (null? gb3e79@p) gb3e7a@r (if (eq? gb3e79@p '_) gb3e7a@r (if (eq? gb3e79@p 'any) (cons '() gb3e7a@r) (if (pair? gb3e79@p) (gb3e28@match-empty (car gb3e79@p) (gb3e28@match-empty (cdr gb3e79@p) gb3e7a@r)) (if (eq? gb3e79@p 'each-any) (cons '() gb3e7a@r) (let ((gb3e7d@t (vector-ref gb3e79@p '0))) (if (memv gb3e7d@t '(each)) (gb3e28@match-empty (vector-ref gb3e79@p '1) gb3e7a@r) (if (memv gb3e7d@t '(each+)) (gb3e28@match-empty (vector-ref gb3e79@p '1) (gb3e28@match-empty (reverse (vector-ref gb3e79@p '2)) (gb3e28@match-empty (vector-ref gb3e79@p '3) gb3e7a@r))) (if (memv gb3e7d@t '(free-id atom)) gb3e7a@r (if (memv gb3e7d@t '(scheme-id atom)) gb3e7a@r (if (memv gb3e7d@t '(vector)) (gb3e28@match-empty (vector-ref gb3e79@p '1) gb3e7a@r) (assertion-violation 'syntax-dispatch '"invalid pattern" gb3e79@p)))))))))))))) (gb3e2a@combine (lambda (gb3e75@r* gb3e76@r) (if (null? (car gb3e75@r*)) gb3e76@r (cons (map car gb3e75@r*) (gb3e2a@combine (map cdr gb3e75@r*) gb3e76@r))))) (gb3e2c@match* (lambda (gb3e51@e gb3e52@p gb3e53@m* gb3e54@s* gb3e55@ae* gb3e56@r) (if (null? gb3e52@p) (and (null? gb3e51@e) gb3e56@r) (if (pair? gb3e52@p) (and (pair? gb3e51@e) (gb3e2e@match (car gb3e51@e) (car gb3e52@p) gb3e53@m* gb3e54@s* gb3e55@ae* (gb3e2e@match (cdr gb3e51@e) (cdr gb3e52@p) gb3e53@m* gb3e54@s* gb3e55@ae* gb3e56@r))) (if (eq? gb3e52@p 'each-any) (let ((gb3e5d@l (gb3e26@match-each-any gb3e51@e gb3e53@m* gb3e54@s* gb3e55@ae*))) (and gb3e5d@l (cons gb3e5d@l gb3e56@r))) (let ((gb3e5f@t (vector-ref gb3e52@p '0))) (if (memv gb3e5f@t '(each)) (if (null? gb3e51@e) (gb3e28@match-empty (vector-ref gb3e52@p '1) gb3e56@r) (let ((gb3e61@r* (gb3e22@match-each gb3e51@e (vector-ref gb3e52@p '1) gb3e53@m* gb3e54@s* gb3e55@ae*))) (and gb3e61@r* (gb3e2a@combine gb3e61@r* gb3e56@r)))) (if (memv gb3e5f@t '(free-id)) (and (symbol? gb3e51@e) (gb2e8b@top-marked? gb3e53@m*) (gb2f0b@free-id=? (gb3e20@stx^ gb3e51@e gb3e53@m* gb3e54@s* gb3e55@ae*) (vector-ref gb3e52@p '1)) gb3e56@r) (if (memv gb3e5f@t '(scheme-id)) (and (symbol? gb3e51@e) (gb2e8b@top-marked? gb3e53@m*) (gb2f0b@free-id=? (gb3e20@stx^ gb3e51@e gb3e53@m* gb3e54@s* gb3e55@ae*) (gb3094@scheme-stx (vector-ref gb3e52@p '1))) gb3e56@r) (if (memv gb3e5f@t '(each+)) (call-with-values (lambda () (gb3e24@match-each+ gb3e51@e (vector-ref gb3e52@p '1) (vector-ref gb3e52@p '2) (vector-ref gb3e52@p '3) gb3e53@m* gb3e54@s* gb3e55@ae* gb3e56@r)) (lambda (gb3e69@gb3e64 gb3e6a@gb3e66 gb3e6b@gb3e68) (let ((gb3e6f@r gb3e6b@gb3e68) (gb3e70@y-pat gb3e6a@gb3e66) (gb3e71@xr* gb3e69@gb3e64)) (and gb3e6f@r (null? gb3e70@y-pat) (if (null? gb3e71@xr*) (gb3e28@match-empty (vector-ref gb3e52@p '1) gb3e6f@r) (gb3e2a@combine gb3e71@xr* gb3e6f@r)))))) (if (memv gb3e5f@t '(atom)) (and (fast-equal? (vector-ref gb3e52@p '1) (gb2f17@strip gb3e51@e gb3e53@m*)) gb3e56@r) (if (memv gb3e5f@t '(vector)) (and (vector? gb3e51@e) (gb3e2e@match (vector->list gb3e51@e) (vector-ref gb3e52@p '1) gb3e53@m* gb3e54@s* gb3e55@ae* gb3e56@r)) (assertion-violation 'syntax-dispatch '"invalid pattern" gb3e52@p))))))))))))) (gb3e2e@match (lambda (gb3e33@e gb3e34@p gb3e35@m* gb3e36@s* gb3e37@ae* gb3e38@r) (if (not gb3e38@r) '#f (if (eq? gb3e34@p '_) gb3e38@r (if (eq? gb3e34@p 'any) (cons (gb3e20@stx^ gb3e33@e gb3e35@m* gb3e36@s* gb3e37@ae*) gb3e38@r) (if (gb2ed1@stx? gb3e33@e) (and (not (gb2e8b@top-marked? gb3e35@m*)) (call-with-values (lambda () (join-wraps gb3e35@m* gb3e36@s* gb3e37@ae* gb3e33@e)) (lambda (gb3e45@gb3e40 gb3e46@gb3e42 gb3e47@gb3e44) (let ((gb3e4b@ae* gb3e47@gb3e44) (gb3e4c@s* gb3e46@gb3e42) (gb3e4d@m* gb3e45@gb3e40)) (gb3e2e@match (gb2ed3@stx-expr gb3e33@e) gb3e34@p gb3e4d@m* gb3e4c@s* gb3e4b@ae* gb3e38@r))))) (if (gb2a49@gb291b@annotation? gb3e33@e) (gb3e2e@match (gb2a4b@gb291f@annotation-expression gb3e33@e) gb3e34@p gb3e35@m* gb3e36@s* gb3e37@ae* gb3e38@r) (gb3e2c@match* gb3e33@e gb3e34@p gb3e35@m* gb3e36@s* gb3e37@ae* gb3e38@r))))))))) (lambda (gb3e2f@e gb3e30@p) (gb3e2e@match gb3e2f@e gb3e30@p '() '() '() '())))) (set! gb4c18@gb310c@syntax-dispatch gb310c@syntax-dispatch) (set! gb310e@ellipsis? (lambda (gb3f03@x) (and (gb2f05@id? gb3f03@x) (gb2f0b@free-id=? gb3f03@x (gb3094@scheme-stx '...))))) (set! gb4c19@gb310e@ellipsis? gb310e@ellipsis?) (set! gb3110@underscore? (lambda (gb3f05@x) (and (gb2f05@id? gb3f05@x) (gb2f0b@free-id=? gb3f05@x (gb3094@scheme-stx '_))))) (set! gb4c1a@gb3110@underscore? gb3110@underscore?) (set! gb3112@verify-literals (lambda (gb3f07@lits gb3f08@expr) (for-each (lambda (gb3f0b@x) (if (or (not (gb2f05@id? gb3f0b@x)) (gb310e@ellipsis? gb3f0b@x) (gb3110@underscore? gb3f0b@x)) (gb31ec@syntax-violation '#f '"invalid literal" gb3f08@expr gb3f0b@x) (void))) gb3f07@lits))) (set! gb4c1b@gb3112@verify-literals gb3112@verify-literals) (set! gb3114@syntax-case-transformer (letrec* ((gb3f0e@build-dispatch-call (lambda (gb3f7f@pvars gb3f80@expr gb3f81@y gb3f82@r gb3f83@mr) (let ((gb3f89@ids (map car gb3f7f@pvars)) (gb3f8a@levels (map cdr gb3f7f@pvars))) (let ((gb3f8d@labels (map gb2e91@gen-label gb3f89@ids)) (gb3f8e@new-vars (map gb2e8d@gen-lexical gb3f89@ids))) (let ((gb3f91@body (gb312e@chi-expr (gb2eef@add-subst (gb2ec5@make-full-rib gb3f89@ids gb3f8d@labels) gb3f80@expr) (append (map (lambda (gb3f93@label gb3f94@var gb3f95@level) (cons gb3f93@label (gb2f1f@make-binding 'syntax (cons gb3f94@var gb3f95@level)))) gb3f8d@labels gb3f8e@new-vars (map cdr gb3f7f@pvars)) gb3f82@r) gb3f83@mr))) (list '(primitive apply) (gb2e68@gb2d9a@build-lambda '#f gb3f8e@new-vars gb3f91@body) gb3f81@y)))))) (gb3f10@invalid-ids-error (lambda (gb3f73@id* gb3f74@e gb3f75@class) (let gb3f7d@find ((gb3f79@id* gb3f73@id*) (gb3f7a@ok* '())) (if (null? gb3f79@id*) (gb31ec@syntax-violation '#f '"invalid syntax" gb3f74@e) (if (gb2f05@id? (car gb3f79@id*)) (if (gb2f11@bound-id-member? (car gb3f79@id*) gb3f7a@ok*) (gb31e8@syntax-error (car gb3f79@id*) '"duplicate " gb3f75@class) (gb3f7d@find (cdr gb3f79@id*) (cons (car gb3f79@id*) gb3f7a@ok*))) (gb31e8@syntax-error (car gb3f79@id*) '"invalid " gb3f75@class)))))) (gb3f12@gen-clause (lambda (gb3f4b@x gb3f4c@keys gb3f4d@clauses gb3f4e@r gb3f4f@mr gb3f50@pat gb3f51@fender gb3f52@expr) (call-with-values (lambda () (gb310a@convert-pattern gb3f50@pat gb3f4c@keys)) (lambda (gb3f5f@gb3f5c gb3f60@gb3f5e) (let ((gb3f63@pvars gb3f60@gb3f5e) (gb3f64@p gb3f5f@gb3f5c)) (if (not (gb2f0f@distinct-bound-ids? (map car gb3f63@pvars))) (gb3f10@invalid-ids-error (map car gb3f63@pvars) gb3f50@pat '"pattern variable") (if (not (for-all (lambda (gb3f67@x) (not (gb310e@ellipsis? (car gb3f67@x)))) gb3f63@pvars)) (gb31ec@syntax-violation '#f '"misplaced ellipsis in syntax-case pattern" gb3f50@pat) (let ((gb3f69@y (gb2e8d@gen-lexical 'tmp))) (let ((gb3f6b@test (if (eq? gb3f51@fender '#t) gb3f69@y (let ((gb3f6d@call (gb3f0e@build-dispatch-call gb3f63@pvars gb3f51@fender gb3f69@y gb3f4e@r gb3f4f@mr))) (list 'if gb3f69@y gb3f6d@call (list 'quote '#f)))))) (let ((gb3f6f@conseq (gb3f0e@build-dispatch-call gb3f63@pvars gb3f52@expr gb3f69@y gb3f4e@r gb3f4f@mr))) (let ((gb3f71@altern (gb3f14@gen-syntax-case gb3f4b@x gb3f4c@keys gb3f4d@clauses gb3f4e@r gb3f4f@mr))) (list (gb2e68@gb2d9a@build-lambda '#f (list gb3f69@y) (list 'if gb3f6b@test gb3f6f@conseq gb3f71@altern)) (list '(primitive syntax-dispatch) gb3f4b@x (list 'quote gb3f64@p)))))))))))))) (gb3f14@gen-syntax-case (lambda (gb3f29@x gb3f2a@keys gb3f2b@clauses gb3f2c@r gb3f2d@mr) (if (null? gb3f2b@clauses) (list '(primitive syntax-error) gb3f29@x) (let ((gb3f33@t (car gb3f2b@clauses))) (let ((gb3f35@ls/false (gb310c@syntax-dispatch gb3f33@t '(any any)))) (if gb3f35@ls/false (apply (lambda (gb3f37@pat gb3f38@expr) (if (and (gb2f05@id? gb3f37@pat) (not (gb2f11@bound-id-member? gb3f37@pat gb3f2a@keys)) (not (gb310e@ellipsis? gb3f37@pat))) (if (gb2f0b@free-id=? gb3f37@pat (gb3094@scheme-stx '_)) (gb312e@chi-expr gb3f38@expr gb3f2c@r gb3f2d@mr) (let ((gb3f3b@lab (gb2e91@gen-label gb3f37@pat)) (gb3f3c@lex (gb2e8d@gen-lexical gb3f37@pat))) (let ((gb3f3f@body (gb312e@chi-expr (gb2eef@add-subst (gb2ec5@make-full-rib (list gb3f37@pat) (list gb3f3b@lab)) gb3f38@expr) (cons (cons gb3f3b@lab (gb2f1f@make-binding 'syntax (cons gb3f3c@lex '0))) gb3f2c@r) gb3f2d@mr))) (list (gb2e68@gb2d9a@build-lambda '#f (list gb3f3c@lex) gb3f3f@body) gb3f29@x)))) (gb3f12@gen-clause gb3f29@x gb3f2a@keys (cdr gb3f2b@clauses) gb3f2c@r gb3f2d@mr gb3f37@pat '#t gb3f38@expr))) gb3f35@ls/false) (let ((gb3f41@t gb3f33@t)) (let ((gb3f43@ls/false (gb310c@syntax-dispatch gb3f41@t '(any any any)))) (if gb3f43@ls/false (apply (lambda (gb3f45@pat gb3f46@fender gb3f47@expr) (gb3f12@gen-clause gb3f29@x gb3f2a@keys (cdr gb3f2b@clauses) gb3f2c@r gb3f2d@mr gb3f45@pat gb3f46@fender gb3f47@expr)) gb3f43@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3f41@t))))))))))) (lambda (gb3f15@e gb3f16@r gb3f17@mr) (let ((gb3f1b@t gb3f15@e)) (let ((gb3f1d@ls/false (gb310c@syntax-dispatch gb3f1b@t '(_ any each-any . each-any)))) (if gb3f1d@ls/false (apply (lambda (gb3f1f@expr gb3f20@keys gb3f21@clauses) (begin (gb3112@verify-literals gb3f20@keys gb3f15@e) (let ((gb3f25@x (gb2e8d@gen-lexical 'tmp))) (let ((gb3f27@body (gb3f14@gen-syntax-case gb3f25@x gb3f20@keys gb3f21@clauses gb3f16@r gb3f17@mr))) (list (gb2e68@gb2d9a@build-lambda '#f (list gb3f25@x) gb3f27@body) (gb312e@chi-expr gb3f1f@expr gb3f16@r gb3f17@mr)))))) gb3f1d@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3f1b@t))))))) (set! gb4c1c@gb3114@syntax-case-transformer gb3114@syntax-case-transformer) (set! gb3116@ellipsis-map (lambda (gb3f99@proc gb3f9a@ls . gb3f9d@ls*) (letrec* ((gb3fa0@who '...)) (begin (if (not (list? gb3f9a@ls)) (assertion-violation gb3fa0@who '"not a list" gb3f9a@ls) (void)) (if (not (null? gb3f9d@ls*)) (let ((gb3fa1@n (length gb3f9a@ls))) (for-each (lambda (gb3fa3@x) (begin (if (not (list? gb3fa3@x)) (assertion-violation gb3fa0@who '"not a list" gb3fa3@x) (void)) (if (not (= (length gb3fa3@x) gb3fa1@n)) (assertion-violation gb3fa0@who '"length mismatch" gb3f9a@ls gb3fa3@x) (void)))) gb3f9d@ls*)) (void)) (apply map gb3f99@proc gb3f9a@ls gb3f9d@ls*))))) (set! gb4c1d@gb3116@ellipsis-map gb3116@ellipsis-map) (set! gb3118@syntax-transformer (letrec* ((gb3fa6@gen-syntax (lambda (gb401d@src gb401e@e gb401f@r gb4020@maps gb4021@ellipsis? gb4022@vec?) (let ((gb4029@t gb401e@e)) (let ((gb402b@ls/false (gb310c@syntax-dispatch gb4029@t 'any))) (if (and gb402b@ls/false (apply (lambda (gb402d@dots) (gb4021@ellipsis? gb402d@dots)) gb402b@ls/false)) (apply (lambda (gb402f@dots) (gb31ec@syntax-violation '#f '"misplaced ellipsis in syntax form" gb401d@src)) gb402b@ls/false) (let ((gb4031@t gb4029@t)) (let ((gb4033@ls/false (gb310c@syntax-dispatch gb4031@t 'any))) (if (and gb4033@ls/false (apply (lambda (gb4035@id) (gb2f05@id? gb4035@id)) gb4033@ls/false)) (apply (lambda (gb4037@id) (let ((gb4039@label (gb2f1b@id->label gb401e@e))) (let ((gb403b@b (gb2f1d@label->binding gb4039@label gb401f@r))) (if (eq? (gb2f21@binding-type gb403b@b) 'syntax) (call-with-values (lambda () (let ((gb4041@var.lev (gb2f23@binding-value gb403b@b))) (gb3fa8@gen-ref gb401d@src (car gb4041@var.lev) (cdr gb4041@var.lev) gb4020@maps))) (lambda (gb4043@gb403e gb4044@gb4040) (let ((gb4047@maps gb4044@gb4040) (gb4048@var gb4043@gb403e)) (values (list 'ref gb4048@var) gb4047@maps)))) (values (list 'quote gb401e@e) gb4020@maps))))) gb4033@ls/false) (let ((gb404b@t gb4031@t)) (let ((gb404d@ls/false (gb310c@syntax-dispatch gb404b@t '(any any)))) (if (and gb404d@ls/false (apply (lambda (gb404f@dots gb4050@e) (gb4021@ellipsis? gb404f@dots)) gb404d@ls/false)) (apply (lambda (gb4053@dots gb4054@e) (if gb4022@vec? (gb31ec@syntax-violation '#f '"misplaced ellipsis in syntax form" gb401d@src) (gb3fa6@gen-syntax gb401d@src gb4054@e gb401f@r gb4020@maps (lambda (gb4057@x) '#f) '#f))) gb404d@ls/false) (let ((gb4059@t gb404b@t)) (let ((gb405b@ls/false (gb310c@syntax-dispatch gb4059@t '(any any . any)))) (if (and gb405b@ls/false (apply (lambda (gb405d@x gb405e@dots gb405f@y) (gb4021@ellipsis? gb405e@dots)) gb405b@ls/false)) (apply (lambda (gb4063@x gb4064@dots gb4065@y) (let gb407b@f ((gb4069@y gb4065@y) (gb406a@k (lambda (gb406d@maps) (call-with-values (lambda () (gb3fa6@gen-syntax gb401d@src gb4063@x gb401f@r (cons '() gb406d@maps) gb4021@ellipsis? '#f)) (lambda (gb4073@gb4070 gb4074@gb4072) (let ((gb4077@maps gb4074@gb4072) (gb4078@x gb4073@gb4070)) (if (null? (car gb4077@maps)) (gb31ec@syntax-violation '#f '"extra ellipsis in syntax form" gb401d@src) (values (gb3fae@gen-map gb4078@x (car gb4077@maps)) (cdr gb4077@maps))))))))) (let ((gb407d@t gb4069@y)) (let ((gb407f@ls/false (gb310c@syntax-dispatch gb407d@t '()))) (if gb407f@ls/false (apply (lambda () (gb406a@k gb4020@maps)) gb407f@ls/false) (let ((gb4081@t gb407d@t)) (let ((gb4083@ls/false (gb310c@syntax-dispatch gb4081@t '(any . any)))) (if (and gb4083@ls/false (apply (lambda (gb4085@dots gb4086@y) (gb4021@ellipsis? gb4085@dots)) gb4083@ls/false)) (apply (lambda (gb4089@dots gb408a@y) (gb407b@f gb408a@y (lambda (gb408d@maps) (call-with-values (lambda () (gb406a@k (cons '() gb408d@maps))) (lambda (gb4093@gb4090 gb4094@gb4092) (let ((gb4097@maps gb4094@gb4092) (gb4098@x gb4093@gb4090)) (if (null? (car gb4097@maps)) (gb31ec@syntax-violation '#f '"extra ellipsis in syntax form" gb401d@src) (values (gb3fac@gen-mappend gb4098@x (car gb4097@maps)) (cdr gb4097@maps))))))))) gb4083@ls/false) (let ((gb409b@t gb4081@t)) (let ((gb409d@ls/false (gb310c@syntax-dispatch gb409b@t '_))) (if gb409d@ls/false (apply (lambda () (call-with-values (lambda () (gb3fa6@gen-syntax gb401d@src gb4069@y gb401f@r gb4020@maps gb4021@ellipsis? gb4022@vec?)) (lambda (gb40a3@gb40a0 gb40a4@gb40a2) (let ((gb40a7@maps gb40a4@gb40a2) (gb40a8@y gb40a3@gb40a0)) (call-with-values (lambda () (gb406a@k gb40a7@maps)) (lambda (gb40af@gb40ac gb40b0@gb40ae) (let ((gb40b3@maps gb40b0@gb40ae) (gb40b4@x gb40af@gb40ac)) (values (gb3faa@gen-append gb40b4@x gb40a8@y) gb40b3@maps)))))))) gb409d@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb409b@t)))))))))))) gb405b@ls/false) (let ((gb40b7@t gb4059@t)) (let ((gb40b9@ls/false (gb310c@syntax-dispatch gb40b7@t '(any . any)))) (if gb40b9@ls/false (apply (lambda (gb40bb@x gb40bc@y) (call-with-values (lambda () (gb3fa6@gen-syntax gb401d@src gb40bb@x gb401f@r gb4020@maps gb4021@ellipsis? '#f)) (lambda (gb40c3@gb40c0 gb40c4@gb40c2) (let ((gb40c7@maps gb40c4@gb40c2) (gb40c8@xnew gb40c3@gb40c0)) (call-with-values (lambda () (gb3fa6@gen-syntax gb401d@src gb40bc@y gb401f@r gb40c7@maps gb4021@ellipsis? gb4022@vec?)) (lambda (gb40cf@gb40cc gb40d0@gb40ce) (let ((gb40d3@maps gb40d0@gb40ce) (gb40d4@ynew gb40cf@gb40cc)) (values (gb3fb0@gen-cons gb401e@e gb40bb@x gb40bc@y gb40c8@xnew gb40d4@ynew) gb40d3@maps)))))))) gb40b9@ls/false) (let ((gb40d7@t gb40b7@t)) (let ((gb40d9@ls/false (gb310c@syntax-dispatch gb40d7@t '#(vector each-any)))) (if gb40d9@ls/false (apply (lambda (gb40db@ls) (call-with-values (lambda () (gb3fa6@gen-syntax gb401d@src gb40db@ls gb401f@r gb4020@maps gb4021@ellipsis? '#t)) (lambda (gb40e1@gb40de gb40e2@gb40e0) (let ((gb40e5@maps gb40e2@gb40e0) (gb40e6@lsnew gb40e1@gb40de)) (values (gb3fb2@gen-vector gb401e@e gb40db@ls gb40e6@lsnew) gb40e5@maps))))) gb40d9@ls/false) (let ((gb40e9@t gb40d7@t)) (let ((gb40eb@ls/false (gb310c@syntax-dispatch gb40e9@t '_))) (if gb40eb@ls/false (apply (lambda () (values (list 'quote gb401e@e) gb4020@maps)) gb40eb@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb40e9@t)))))))))))))))))))))))) (gb3fa8@gen-ref (lambda (gb4003@src gb4004@var gb4005@level gb4006@maps) (if (= gb4005@level '0) (values gb4004@var gb4006@maps) (if (null? gb4006@maps) (gb31ec@syntax-violation '#f '"missing ellipsis in syntax form" gb4003@src) (call-with-values (lambda () (gb3fa8@gen-ref gb4003@src gb4004@var (- gb4005@level '1) (cdr gb4006@maps))) (lambda (gb400f@gb400c gb4010@gb400e) (let ((gb4013@outer-maps gb4010@gb400e) (gb4014@outer-var gb400f@gb400c)) (let ((gb4017@t (assq gb4014@outer-var (car gb4006@maps)))) (if gb4017@t ((lambda (gb4019@b) (values (cdr gb4019@b) gb4006@maps)) gb4017@t) (let ((gb401b@inner-var (gb2e8d@gen-lexical 'tmp))) (values gb401b@inner-var (cons (cons (cons gb4014@outer-var gb401b@inner-var) (car gb4006@maps)) gb4013@outer-maps)))))))))))) (gb3faa@gen-append (lambda (gb3fff@x gb4000@y) (if (fast-equal? gb4000@y ''()) gb3fff@x (list 'append gb3fff@x gb4000@y)))) (gb3fac@gen-mappend (lambda (gb3ffb@e gb3ffc@map-env) (list 'apply '(primitive append) (gb3fae@gen-map gb3ffb@e gb3ffc@map-env)))) (gb3fae@gen-map (lambda (gb3fe9@e gb3fea@map-env) (let ((gb3fed@formals (map cdr gb3fea@map-env)) (gb3fee@actuals (map (lambda (gb3ff1@x) (list 'ref (car gb3ff1@x))) gb3fea@map-env))) (if (eq? (car gb3fe9@e) 'ref) (car gb3fee@actuals) (if (for-all (lambda (gb3ff3@x) (and (eq? (car gb3ff3@x) 'ref) (memq (cadr gb3ff3@x) gb3fed@formals))) (cdr gb3fe9@e)) (let ((gb3ff5@args (map (let ((gb3ff7@r (map cons gb3fed@formals gb3fee@actuals))) (lambda (gb3ff9@x) (cdr (assq (cadr gb3ff9@x) gb3ff7@r)))) (cdr gb3fe9@e)))) (cons 'map (cons (list 'primitive (car gb3fe9@e)) gb3ff5@args))) (cons* 'map (list 'lambda gb3fed@formals gb3fe9@e) gb3fee@actuals)))))) (gb3fb0@gen-cons (lambda (gb3fd9@e gb3fda@x gb3fdb@y gb3fdc@xnew gb3fdd@ynew) (let ((gb3fe3@t (car gb3fdd@ynew))) (if (memv gb3fe3@t '(quote)) (if (eq? (car gb3fdc@xnew) 'quote) (let ((gb3fe5@xnew (cadr gb3fdc@xnew)) (gb3fe6@ynew (cadr gb3fdd@ynew))) (if (and (eq? gb3fe5@xnew gb3fda@x) (eq? gb3fe6@ynew gb3fdb@y)) (list 'quote gb3fd9@e) (list 'quote (cons gb3fe5@xnew gb3fe6@ynew)))) (if (null? (cadr gb3fdd@ynew)) (list 'list gb3fdc@xnew) (list 'cons gb3fdc@xnew gb3fdd@ynew))) (if (memv gb3fe3@t '(list)) (cons 'list (cons gb3fdc@xnew (cdr gb3fdd@ynew))) (list 'cons gb3fdc@xnew gb3fdd@ynew)))))) (gb3fb2@gen-vector (lambda (gb3fd3@e gb3fd4@ls gb3fd5@lsnew) (if (eq? (car gb3fd5@lsnew) 'quote) (if (eq? (cadr gb3fd5@lsnew) gb3fd4@ls) (list 'quote gb3fd3@e) (list 'quote (list->vector (cadr gb3fd5@lsnew)))) (if (eq? (car gb3fd5@lsnew) 'list) (cons 'vector (cdr gb3fd5@lsnew)) (list 'list->vector gb3fd5@lsnew))))) (gb3fb4@regen (lambda (gb3fcd@x) (let ((gb3fcf@t (car gb3fcd@x))) (if (memv gb3fcf@t '(ref)) (cadr gb3fcd@x) (if (memv gb3fcf@t '(primitive)) (list 'primitive (cadr gb3fcd@x)) (if (memv gb3fcf@t '(quote)) (list 'quote (cadr gb3fcd@x)) (if (memv gb3fcf@t '(lambda)) (gb2e68@gb2d9a@build-lambda '#f (cadr gb3fcd@x) (gb3fb4@regen (caddr gb3fcd@x))) (if (memv gb3fcf@t '(map)) (let ((gb3fd1@ls (map gb3fb4@regen (cdr gb3fcd@x)))) (cons '(primitive ellipsis-map) gb3fd1@ls)) (cons (list 'primitive (car gb3fcd@x)) (map gb3fb4@regen (cdr gb3fcd@x)))))))))))) (lambda (gb3fb5@e gb3fb6@r gb3fb7@mr) (let ((gb3fbb@t gb3fb5@e)) (let ((gb3fbd@ls/false (gb310c@syntax-dispatch gb3fbb@t '(_ any)))) (if gb3fbd@ls/false (apply (lambda (gb3fbf@x) (call-with-values (lambda () (gb3fa6@gen-syntax gb3fb5@e gb3fbf@x gb3fb6@r '() gb310e@ellipsis? '#f)) (lambda (gb3fc5@gb3fc2 gb3fc6@gb3fc4) (let ((gb3fc9@maps gb3fc6@gb3fc4) (gb3fca@e gb3fc5@gb3fc2)) (gb3fb4@regen gb3fca@e))))) gb3fbd@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb3fbb@t))))))) (set! gb4c1e@gb3118@syntax-transformer gb3118@syntax-transformer) (set! gb311a@core-macro-transformer (lambda (gb40ed@name) (let ((gb40ef@t gb40ed@name)) (if (memv gb40ef@t '(quote)) gb30bc@quote-transformer (if (memv gb40ef@t '(lambda)) gb30c0@lambda-transformer (if (memv gb40ef@t '(case-lambda)) gb30be@case-lambda-transformer (if (memv gb40ef@t '(letrec)) gb30a4@letrec-transformer (if (memv gb40ef@t '(letrec*)) gb30a6@letrec*-transformer (if (memv gb40ef@t '(let)) gb30a2@let-transformer (if (memv gb40ef@t '(if)) gb30b4@if-transformer (if (memv gb40ef@t '(and)) gb30b6@and-transformer (if (memv gb40ef@t '(or)) gb30b8@or-transformer (if (memv gb40ef@t '(foreign-call)) gb3108@foreign-call-transformer (if (memv gb40ef@t '(syntax-case)) gb3114@syntax-case-transformer (if (memv gb40ef@t '(syntax)) gb3118@syntax-transformer (if (memv gb40ef@t '(type-descriptor)) gb30aa@type-descriptor-transformer (if (memv gb40ef@t '(record-type-descriptor)) gb30ac@record-type-descriptor-transformer (if (memv gb40ef@t '(record-constructor-descriptor)) gb30ae@record-constructor-descriptor-transformer (if (memv gb40ef@t '(fluid-let-syntax)) gb30a8@fluid-let-syntax-transformer (assertion-violation 'macro-transformer '"BUG: cannot find transformer" gb40ed@name)))))))))))))))))))) (set! gb4c1f@gb311a@core-macro-transformer gb311a@core-macro-transformer) (set! gb311c@symbol-macro (lambda (gb40f1@x gb40f2@set) (let ((gb40f5@t gb40f1@x)) (let ((gb40f7@ls/false (gb310c@syntax-dispatch gb40f5@t '(_ any)))) (if (and gb40f7@ls/false (apply (lambda (gb40f9@name) (and (gb2f05@id? gb40f9@name) (memq (gb2f07@id->sym gb40f9@name) gb40f2@set))) gb40f7@ls/false)) (apply (lambda (gb40fb@name) (gb30c2@bless (list 'quote gb40fb@name))) gb40f7@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb40f5@t)))))) (set! gb4c20@gb311c@symbol-macro gb311c@symbol-macro) (set! gb311e@macro-transformer (lambda (gb40fd@x) (if (procedure? gb40fd@x) gb40fd@x (if (symbol? gb40fd@x) (let ((gb40ff@t gb40fd@x)) (if (memv gb40ff@t '(define-record-type)) gb3100@define-record-type-macro (if (memv gb40ff@t '(define-struct)) gb30fe@define-struct-macro (if (memv gb40ff@t '(include)) gb30f4@include-macro (if (memv gb40ff@t '(cond)) gb30f0@cond-macro (if (memv gb40ff@t '(let)) gb30c8@let-macro (if (memv gb40ff@t '(do)) gb30e8@do-macro (if (memv gb40ff@t '(or)) gb30ec@or-macro (if (memv gb40ff@t '(and)) gb30ee@and-macro (if (memv gb40ff@t '(let*)) gb30ea@let*-macro (if (memv gb40ff@t '(let-values)) gb30ca@let-values-macro (if (memv gb40ff@t '(let*-values)) gb30cc@let*-values-macro (if (memv gb40ff@t '(syntax-rules)) gb30f8@syntax-rules-macro (if (memv gb40ff@t '(quasiquote)) gb30fa@quasiquote-macro (if (memv gb40ff@t '(quasisyntax)) gb30fc@quasisyntax-macro (if (memv gb40ff@t '(with-syntax)) gb30c4@with-syntax-macro (if (memv gb40ff@t '(when)) gb30b0@when-macro (if (memv gb40ff@t '(unless)) gb30b2@unless-macro (if (memv gb40ff@t '(case)) gb30ba@case-macro (if (memv gb40ff@t '(identifier-syntax)) gb30e6@identifier-syntax-macro (if (memv gb40ff@t '(time)) gb30de@time-macro (if (memv gb40ff@t '(delay)) gb30e0@delay-macro (if (memv gb40ff@t '(assert)) gb30e2@assert-macro (if (memv gb40ff@t '(endianness)) gb30e4@endianness-macro (if (memv gb40ff@t '(guard)) gb30da@guard-macro (if (memv gb40ff@t '(define-enumeration)) gb30dc@define-enumeration-macro (if (memv gb40ff@t '(trace-lambda)) gb30ce@trace-lambda-macro (if (memv gb40ff@t '(trace-define)) gb30d0@trace-define-macro (if (memv gb40ff@t '(trace-define-syntax)) gb30d2@trace-define-syntax-macro (if (memv gb40ff@t '(trace-let-syntax)) gb30d6@trace-let-syntax-macro (if (memv gb40ff@t '(trace-letrec-syntax)) gb30d8@trace-letrec-syntax-macro (if (memv gb40ff@t '(define-condition-type)) gb3102@define-condition-type-macro (if (memv gb40ff@t '(parameterize)) gb3106@parameterize-macro (if (memv gb40ff@t '(include-into)) gb30f6@include-into-macro (if (memv gb40ff@t '(eol-style)) (lambda (gb4101@x) (gb311c@symbol-macro gb4101@x '(none lf cr crlf nel crnel ls))) (if (memv gb40ff@t '(error-handling-mode)) (lambda (gb4103@x) (gb311c@symbol-macro gb4103@x '(ignore raise replace))) (if (memv gb40ff@t '(buffer-mode)) (lambda (gb4105@x) (gb311c@symbol-macro gb4105@x '(none line block))) (if (memv gb40ff@t '(file-options)) gb2e80@file-options-macro (if (memv gb40ff@t '(... => _ else unquote unquote-splicing unsyntax unsyntax-splicing fields mutable immutable parent protocol sealed opaque nongenerative parent-rtd)) gb3104@incorrect-usage-macro (error 'macro-transformer '"BUG: invalid macro" gb40fd@x)))))))))))))))))))))))))))))))))))))))) (error 'core-macro-transformer '"BUG: invalid macro" gb40fd@x))))) (set! gb4c21@gb311e@macro-transformer gb311e@macro-transformer) (set! gb3120@local-macro-transformer (lambda (gb4107@x) (car gb4107@x))) (set! gb4c22@gb3120@local-macro-transformer gb3120@local-macro-transformer) (set! gb3122@do-macro-call (lambda (gb4109@transformer gb410a@expr gb410b@rib) (let ((gb410f@out (gb4109@transformer (gb2ef1@add-mark gb2ee9@anti-mark '#f gb410a@expr '#f)))) (begin (let gb4113@f ((gb4111@x gb410f@out)) (if (not (gb2ed1@stx? gb4111@x)) (if (pair? gb4111@x) (begin (gb4113@f (car gb4111@x)) (gb4113@f (cdr gb4111@x))) (if (vector? gb4111@x) (vector-for-each gb4113@f gb4111@x) (if (symbol? gb4111@x) (gb31ec@syntax-violation '#f '"raw symbol encountered in output of macro" gb410a@expr gb4111@x) (void)))) (void))) (gb2ef1@add-mark (gb2ee7@gen-mark) gb410b@rib gb410f@out gb410a@expr))))) (set! gb4c23@gb3122@do-macro-call gb3122@do-macro-call) (set! gb3124@chi-macro (lambda (gb4115@p gb4116@e gb4117@rib) (gb3122@do-macro-call (gb311e@macro-transformer gb4115@p) gb4116@e gb4117@rib))) (set! gb4c24@gb3124@chi-macro gb3124@chi-macro) (set! gb3126@chi-local-macro (lambda (gb411b@p gb411c@e gb411d@rib) (gb3122@do-macro-call (gb3120@local-macro-transformer gb411b@p) gb411c@e gb411d@rib))) (set! gb4c25@gb3126@chi-local-macro gb3126@chi-local-macro) (set! gb3128@chi-global-macro (lambda (gb4121@p gb4122@e gb4123@rib) (let ((gb4127@lib (car gb4121@p)) (gb4128@loc (cdr gb4121@p))) (begin (gb2d22@gb2b71@visit-library gb4127@lib) (let ((gb412b@x (symbol-value gb4128@loc))) (let ((gb412d@transformer (if (procedure? gb412b@x) gb412b@x (assertion-violation 'chi-global-macro '"BUG: not a procedure" gb412b@x)))) (gb3122@do-macro-call gb412d@transformer gb4122@e gb4123@rib))))))) (set! gb4c26@gb3128@chi-global-macro gb3128@chi-global-macro) (set! gb312a@chi-expr* (lambda (gb412f@e* gb4130@r gb4131@mr) (if (null? gb412f@e*) '() (let ((gb4135@e (gb312e@chi-expr (car gb412f@e*) gb4130@r gb4131@mr))) (cons gb4135@e (gb312a@chi-expr* (cdr gb412f@e*) gb4130@r gb4131@mr)))))) (set! gb4c27@gb312a@chi-expr* gb312a@chi-expr*) (set! gb312c@chi-application (lambda (gb4137@e gb4138@r gb4139@mr) (let ((gb413d@t gb4137@e)) (let ((gb413f@ls/false (gb310c@syntax-dispatch gb413d@t '(any . each-any)))) (if gb413f@ls/false (apply (lambda (gb4141@rator gb4142@rands) (let ((gb4145@rator (gb312e@chi-expr gb4141@rator gb4138@r gb4139@mr))) (cons gb4145@rator (gb312a@chi-expr* gb4142@rands gb4138@r gb4139@mr)))) gb413f@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb413d@t)))))) (set! gb4c28@gb312c@chi-application gb312c@chi-application) (set! gb312e@chi-expr (lambda (gb4147@e gb4148@r gb4149@mr) (call-with-values (lambda () (gb2f27@syntax-type gb4147@e gb4148@r)) (lambda (gb4153@gb414e gb4154@gb4150 gb4155@gb4152) (let ((gb4159@kwd gb4155@gb4152) (gb415a@value gb4154@gb4150) (gb415b@type gb4153@gb414e)) (let ((gb415f@t gb415b@type)) (if (memv gb415f@t '(core-macro)) (let ((gb4161@transformer (gb311a@core-macro-transformer gb415a@value))) (gb4161@transformer gb4147@e gb4148@r gb4149@mr)) (if (memv gb415f@t '(global)) (let ((gb4163@lib (car gb415a@value))) (let ((gb4165@loc (cdr gb415a@value))) (begin ((gb3174@inv-collector) gb4163@lib) gb4165@loc))) (if (memv gb415f@t '(core-prim)) (let ((gb4167@name gb415a@value)) (list 'primitive gb4167@name)) (if (memv gb415f@t '(call)) (gb312c@chi-application gb4147@e gb4148@r gb4149@mr) (if (memv gb415f@t '(lexical)) (let ((gb4169@lex (gb3096@lexical-var gb415a@value))) gb4169@lex) (if (memv gb415f@t '(global-macro global-macro!)) (gb312e@chi-expr (gb3128@chi-global-macro gb415a@value gb4147@e '#f) gb4148@r gb4149@mr) (if (memv gb415f@t '(local-macro local-macro!)) (gb312e@chi-expr (gb3126@chi-local-macro gb415a@value gb4147@e '#f) gb4148@r gb4149@mr) (if (memv gb415f@t '(macro macro!)) (gb312e@chi-expr (gb3124@chi-macro gb415a@value gb4147@e '#f) gb4148@r gb4149@mr) (if (memv gb415f@t '(constant)) (let ((gb416b@datum gb415a@value)) (list 'quote gb416b@datum)) (if (memv gb415f@t '(set!)) (gb3130@chi-set! gb4147@e gb4148@r gb4149@mr) (if (memv gb415f@t '(begin)) (let ((gb416d@t gb4147@e)) (let ((gb416f@ls/false (gb310c@syntax-dispatch gb416d@t '(_ any . each-any)))) (if gb416f@ls/false (apply (lambda (gb4171@x gb4172@x*) (gb2e6a@gb2dca@build-sequence '#f (gb312a@chi-expr* (cons gb4171@x gb4172@x*) gb4148@r gb4149@mr))) gb416f@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb416d@t)))) (if (memv gb415f@t '(let-syntax letrec-syntax)) (let ((gb4175@t gb4147@e)) (let ((gb4177@ls/false (gb310c@syntax-dispatch gb4175@t '(_ #(each (any any)) any . each-any)))) (if (and gb4177@ls/false (apply (lambda (gb4179@xlhs* gb417a@xrhs* gb417b@xbody gb417c@xbody*) (if (not (gb2f0d@valid-bound-ids? gb4179@xlhs*)) (gb31ec@syntax-violation '#f '"invalid identifiers" gb4147@e) (void))) gb4177@ls/false)) (apply (lambda (gb4181@xlhs* gb4182@xrhs* gb4183@xbody gb4184@xbody*) (let ((gb4189@xlab* (map gb2e91@gen-label gb4181@xlhs*))) (let ((gb418b@xrib (gb2ec5@make-full-rib gb4181@xlhs* gb4189@xlab*))) (let ((gb418d@xb* (map (lambda (gb418f@x) (gb2f3d@make-eval-transformer (gb3166@expand-transformer (if (eq? gb415b@type 'let-syntax) gb418f@x (gb2eef@add-subst gb418b@xrib gb418f@x)) gb4149@mr))) gb4182@xrhs*))) (gb2e6a@gb2dca@build-sequence '#f (gb312a@chi-expr* (map (lambda (gb4191@x) (gb2eef@add-subst gb418b@xrib gb4191@x)) (cons gb4183@xbody gb4184@xbody*)) (append (map cons gb4189@xlab* gb418d@xb*) gb4148@r) (append (map cons gb4189@xlab* gb418d@xb*) gb4149@mr))))))) gb4177@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb4175@t)))) (if (memv gb415f@t '(displaced-lexical)) (gb31ec@syntax-violation '#f '"identifier out of context" gb4147@e) (if (memv gb415f@t '(syntax)) (gb31ec@syntax-violation '#f '"reference to pattern variable outside a syntax form" gb4147@e) (if (memv gb415f@t '(define define-syntax module import library)) (gb31ec@syntax-violation '#f (string-append (let ((gb4193@t gb415b@type)) (if (memv gb4193@t '(define)) '"a definition" (if (memv gb4193@t '(define-syntax)) '"a define-syntax" (if (memv gb4193@t '(module)) '"a module definition" (if (memv gb4193@t '(library)) '"a library definition" (if (memv gb4193@t '(import)) '"an import declaration" (if (memv gb4193@t '(export)) '"an export declaration" '"a non-expression"))))))) '" was found where an expression was expected") gb4147@e) (if (memv gb415f@t '(mutable)) (gb31ec@syntax-violation '#f '"attempt to reference an unexportable variable" gb4147@e) (gb31ec@syntax-violation '#f '"invalid expression" gb4147@e))))))))))))))))))))))) (set! gb4c29@gb312e@chi-expr gb312e@chi-expr) (set! gb3130@chi-set! (lambda (gb4195@e gb4196@r gb4197@mr) (let ((gb419b@t gb4195@e)) (let ((gb419d@ls/false (gb310c@syntax-dispatch gb419b@t '(_ any any)))) (if (and gb419d@ls/false (apply (lambda (gb419f@x gb41a0@v) (gb2f05@id? gb419f@x)) gb419d@ls/false)) (apply (lambda (gb41a3@x gb41a4@v) (call-with-values (lambda () (gb2f27@syntax-type gb41a3@x gb4196@r)) (lambda (gb41ad@gb41a8 gb41ae@gb41aa gb41af@gb41ac) (let ((gb41b3@kwd gb41af@gb41ac) (gb41b4@value gb41ae@gb41aa) (gb41b5@type gb41ad@gb41a8)) (let ((gb41b9@t gb41b5@type)) (if (memv gb41b9@t '(lexical)) (begin (gb309a@set-lexical-mutable! gb41b4@value '#t) (list 'set! (gb3096@lexical-var gb41b4@value) (gb312e@chi-expr gb41a4@v gb4196@r gb4197@mr))) (if (memv gb41b9@t '(core-prim)) (gb31ec@syntax-violation '#f '"cannot modify imported core primitive" gb4195@e) (if (memv gb41b9@t '(global)) (gb31ec@syntax-violation '#f '"attempt to modify imported binding" gb4195@e) (if (memv gb41b9@t '(global-macro!)) (gb312e@chi-expr (gb3128@chi-global-macro gb41b4@value gb4195@e '#f) gb4196@r gb4197@mr) (if (memv gb41b9@t '(local-macro!)) (gb312e@chi-expr (gb3126@chi-local-macro gb41b4@value gb4195@e '#f) gb4196@r gb4197@mr) (if (memv gb41b9@t '(mutable)) (gb31ec@syntax-violation '#f '"attempt to assign to an unexportable variable" gb4195@e) (gb31ec@syntax-violation '#f '"invalid syntax" gb4195@e)))))))))))) gb419d@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb419b@t)))))) (set! gb4c2a@gb3130@chi-set! gb3130@chi-set!) (set! gb3132@verify-formals (lambda (gb41bb@fmls gb41bc@stx) (let ((gb41bf@t gb41bb@fmls)) (let ((gb41c1@ls/false (gb310c@syntax-dispatch gb41bf@t 'each-any))) (if gb41c1@ls/false (apply (lambda (gb41c3@x*) (if (not (gb2f0d@valid-bound-ids? gb41c3@x*)) (gb30c6@invalid-fmls-error gb41bc@stx gb41bb@fmls) (void))) gb41c1@ls/false) (let ((gb41c5@t gb41bf@t)) (let ((gb41c7@ls/false (gb310c@syntax-dispatch gb41c5@t '#(each+ any () any)))) (if gb41c7@ls/false (apply (lambda (gb41c9@x* gb41ca@x) (if (not (gb2f0d@valid-bound-ids? (cons gb41ca@x gb41c9@x*))) (gb30c6@invalid-fmls-error gb41bc@stx gb41bb@fmls) (void))) gb41c7@ls/false) (let ((gb41cd@t gb41c5@t)) (let ((gb41cf@ls/false (gb310c@syntax-dispatch gb41cd@t '_))) (if gb41cf@ls/false (apply (lambda () (gb31ec@syntax-violation '#f '"invalid syntax" gb41bc@stx)) gb41cf@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb41cd@t)))))))))))) (set! gb4c2b@gb3132@verify-formals gb3132@verify-formals) (set! gb3134@chi-lambda-clause (lambda (gb41d1@stx gb41d2@fmls gb41d3@body* gb41d4@r gb41d5@mr) (let ((gb41db@t gb41d2@fmls)) (let ((gb41dd@ls/false (gb310c@syntax-dispatch gb41db@t 'each-any))) (if gb41dd@ls/false (apply (lambda (gb41df@x*) (begin (gb3132@verify-formals gb41d2@fmls gb41d1@stx) (let ((gb41e1@lex* (map gb2e8d@gen-lexical gb41df@x*)) (gb41e2@lab* (map gb2e91@gen-label gb41df@x*))) (values gb41e1@lex* (gb3144@chi-internal (gb2eef@add-subst (gb2ec5@make-full-rib gb41df@x* gb41e2@lab*) gb41d3@body*) (gb309e@add-lexicals gb41e2@lab* gb41e1@lex* gb41d4@r) gb41d5@mr))))) gb41dd@ls/false) (let ((gb41e5@t gb41db@t)) (let ((gb41e7@ls/false (gb310c@syntax-dispatch gb41e5@t '#(each+ any () any)))) (if gb41e7@ls/false (apply (lambda (gb41e9@x* gb41ea@x) (begin (gb3132@verify-formals gb41d2@fmls gb41d1@stx) (let ((gb41ed@lex* (map gb2e8d@gen-lexical gb41e9@x*)) (gb41ee@lab* (map gb2e91@gen-label gb41e9@x*)) (gb41ef@lex (gb2e8d@gen-lexical gb41ea@x)) (gb41f0@lab (gb2e91@gen-label gb41ea@x))) (values (append gb41ed@lex* gb41ef@lex) (gb3144@chi-internal (gb2eef@add-subst (gb2ec5@make-full-rib (cons gb41ea@x gb41e9@x*) (cons gb41f0@lab gb41ee@lab*)) gb41d3@body*) (gb309e@add-lexicals (cons gb41f0@lab gb41ee@lab*) (cons gb41ef@lex gb41ed@lex*) gb41d4@r) gb41d5@mr))))) gb41e7@ls/false) (let ((gb41f5@t gb41e5@t)) (let ((gb41f7@ls/false (gb310c@syntax-dispatch gb41f5@t '_))) (if gb41f7@ls/false (apply (lambda () (gb31ec@syntax-violation '#f '"invalid syntax" gb41d2@fmls)) gb41f7@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb41f5@t)))))))))))) (set! gb4c2c@gb3134@chi-lambda-clause gb3134@chi-lambda-clause) (set! gb3136@chi-lambda-clause* (lambda (gb41f9@stx gb41fa@fmls* gb41fb@body** gb41fc@r gb41fd@mr) (if (null? gb41fa@fmls*) (values '() '()) (call-with-values (lambda () (gb3134@chi-lambda-clause gb41f9@stx (car gb41fa@fmls*) (car gb41fb@body**) gb41fc@r gb41fd@mr)) (lambda (gb4207@gb4204 gb4208@gb4206) (let ((gb420b@b gb4208@gb4206) (gb420c@a gb4207@gb4204)) (call-with-values (lambda () (gb3136@chi-lambda-clause* gb41f9@stx (cdr gb41fa@fmls*) (cdr gb41fb@body**) gb41fc@r gb41fd@mr)) (lambda (gb4213@gb4210 gb4214@gb4212) (let ((gb4217@b* gb4214@gb4212) (gb4218@a* gb4213@gb4210)) (values (cons gb420c@a gb4218@a*) (cons gb420b@b gb4217@b*))))))))))) (set! gb4c2d@gb3136@chi-lambda-clause* gb3136@chi-lambda-clause*) (set! gb3138@chi-defun (lambda (gb421b@x gb421c@r gb421d@mr) (let ((gb4221@fmls (car gb421b@x)) (gb4222@body* (cdr gb421b@x))) (call-with-values (lambda () (gb3134@chi-lambda-clause gb4221@fmls gb4221@fmls gb4222@body* gb421c@r gb421d@mr)) (lambda (gb4229@gb4226 gb422a@gb4228) (let ((gb422d@body gb422a@gb4228) (gb422e@fmls gb4229@gb4226)) (gb2e68@gb2d9a@build-lambda '#f gb422e@fmls gb422d@body))))))) (set! gb4c2e@gb3138@chi-defun gb3138@chi-defun) (set! gb313a@chi-rhs (lambda (gb4231@rhs gb4232@r gb4233@mr) (let ((gb4237@t (car gb4231@rhs))) (if (memv gb4237@t '(defun)) (gb3138@chi-defun (cdr gb4231@rhs) gb4232@r gb4233@mr) (if (memv gb4237@t '(expr)) (let ((gb4239@expr (cdr gb4231@rhs))) (gb312e@chi-expr gb4239@expr gb4232@r gb4233@mr)) (if (memv gb4237@t '(top-expr)) (let ((gb423b@expr (cdr gb4231@rhs))) (gb2e6a@gb2dca@build-sequence '#f (list (gb312e@chi-expr gb423b@expr gb4232@r gb4233@mr) (gb2e6b@gb2dcc@build-void)))) (assertion-violation 'chi-rhs '"BUG: invalid rhs" gb4231@rhs))))))) (set! gb4c2f@gb313a@chi-rhs gb313a@chi-rhs) (set! gb313c@expand-interaction-rhs*/init* (lambda (gb423d@lhs* gb423e@rhs* gb423f@init* gb4240@r gb4241@mr) (let gb424b@f ((gb4247@lhs* gb423d@lhs*) (gb4248@rhs* gb423e@rhs*)) (if (null? gb4247@lhs*) (map (lambda (gb424d@x) (gb312e@chi-expr gb424d@x gb4240@r gb4241@mr)) gb423f@init*) (let ((gb424f@lhs (car gb4247@lhs*)) (gb4250@rhs (car gb4248@rhs*))) (let ((gb4253@t (car gb4250@rhs))) (if (memv gb4253@t '(defun)) (let ((gb4255@rhs (gb3138@chi-defun (cdr gb4250@rhs) gb4240@r gb4241@mr))) (cons (list 'set! gb424f@lhs gb4255@rhs) (gb424b@f (cdr gb4247@lhs*) (cdr gb4248@rhs*)))) (if (memv gb4253@t '(expr)) (let ((gb4257@rhs (gb312e@chi-expr (cdr gb4250@rhs) gb4240@r gb4241@mr))) (cons (list 'set! gb424f@lhs gb4257@rhs) (gb424b@f (cdr gb4247@lhs*) (cdr gb4248@rhs*)))) (if (memv gb4253@t '(top-expr)) (let ((gb4259@e (gb312e@chi-expr (cdr gb4250@rhs) gb4240@r gb4241@mr))) (cons gb4259@e (gb424b@f (cdr gb4247@lhs*) (cdr gb4248@rhs*)))) (error 'expand-interaction '"invallid" gb4250@rhs)))))))))) (set! gb4c30@gb313c@expand-interaction-rhs*/init* gb313c@expand-interaction-rhs*/init*) (set! gb313e@chi-rhs* (lambda (gb425b@rhs* gb425c@r gb425d@mr) (let gb4263@f ((gb4261@ls gb425b@rhs*)) (if (null? gb4261@ls) '() (let ((gb4265@a (gb313a@chi-rhs (car gb4261@ls) gb425c@r gb425d@mr))) (cons gb4265@a (gb4263@f (cdr gb4261@ls)))))))) (set! gb4c31@gb313e@chi-rhs* gb313e@chi-rhs*) (set! gb3140@find-bound=? (lambda (gb4267@x gb4268@lhs* gb4269@rhs*) (if (null? gb4268@lhs*) '#f (if (gb2f09@bound-id=? gb4267@x (car gb4268@lhs*)) (car gb4269@rhs*) (gb3140@find-bound=? gb4267@x (cdr gb4268@lhs*) (cdr gb4269@rhs*)))))) (set! gb4c32@gb3140@find-bound=? gb3140@find-bound=?) (set! gb3142@find-dups (lambda (gb426d@ls) (let gb4273@f ((gb426f@ls gb426d@ls) (gb4270@dups '())) (if (null? gb426f@ls) gb4270@dups (let ((gb4275@t (gb3140@find-bound=? (car gb426f@ls) (cdr gb426f@ls) (cdr gb426f@ls)))) (if gb4275@t ((lambda (gb4277@x) (gb4273@f (cdr gb426f@ls) (cons (list (car gb426f@ls) gb4277@x) gb4270@dups))) gb4275@t) (gb4273@f (cdr gb426f@ls) gb4270@dups))))))) (set! gb4c33@gb3142@find-dups gb3142@find-dups) (set! gb3144@chi-internal (lambda (gb4279@e* gb427a@r gb427b@mr) (let ((gb427f@rib (gb2eb9@make-empty-rib))) (call-with-values (lambda () (gb3164@chi-body* (map (lambda (gb4291@x) (gb2eef@add-subst gb427f@rib gb4291@x)) (gb2f03@syntax->list gb4279@e*)) gb427a@r gb427b@mr '() '() '() '() '() gb427f@rib '#f)) (lambda (gb4293@gb4282 gb4294@gb4284 gb4295@gb4286 gb4296@gb4288 gb4297@gb428a gb4298@gb428c gb4299@gb428e gb429a@gb4290) (let ((gb42a3@_exp* gb429a@gb4290) (gb42a4@kwd* gb4299@gb428e) (gb42a5@mod** gb4298@gb428c) (gb42a6@rhs* gb4297@gb428a) (gb42a7@lex* gb4296@gb4288) (gb42a8@mr gb4295@gb4286) (gb42a9@r gb4294@gb4284) (gb42aa@e* gb4293@gb4282)) (begin (if (null? gb42aa@e*) (gb31ec@syntax-violation '#f '"no expression in body" gb42aa@e*) (void)) (let ((gb42b3@init* (gb312a@chi-expr* (append (apply append (reverse gb42a5@mod**)) gb42aa@e*) gb42a9@r gb42a8@mr))) (let ((gb42b5@rhs* (gb313e@chi-rhs* gb42a6@rhs* gb42a9@r gb42a8@mr))) (gb2e6f@gb2dd4@build-letrec* '#f (reverse gb42a7@lex*) (reverse gb42b5@rhs*) (gb2e6a@gb2dca@build-sequence '#f gb42b3@init*))))))))))) (set! gb4c34@gb3144@chi-internal gb3144@chi-internal) (set! gb3146@parse-module (lambda (gb42b7@e) (let ((gb42b9@t gb42b7@e)) (let ((gb42bb@ls/false (gb310c@syntax-dispatch gb42b9@t '(_ each-any . each-any)))) (if gb42bb@ls/false (apply (lambda (gb42bd@export* gb42be@b*) (begin (if (not (for-all gb2f05@id? gb42bd@export*)) (gb31ec@syntax-violation '#f '"module exports must be identifiers" gb42b7@e) (void)) (values '#f (list->vector gb42bd@export*) gb42be@b*))) gb42bb@ls/false) (let ((gb42c1@t gb42b9@t)) (let ((gb42c3@ls/false (gb310c@syntax-dispatch gb42c1@t '(_ any each-any . each-any)))) (if gb42c3@ls/false (apply (lambda (gb42c5@name gb42c6@export* gb42c7@b*) (begin (if (not (gb2f05@id? gb42c5@name)) (gb31ec@syntax-violation '#f '"module name must be an identifier" gb42b7@e) (void)) (if (not (for-all gb2f05@id? gb42c6@export*)) (gb31ec@syntax-violation '#f '"module exports must be identifiers" gb42b7@e) (void)) (values gb42c5@name (list->vector gb42c6@export*) gb42c7@b*))) gb42c3@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb42c1@t))))))))) (set! gb4c35@gb3146@parse-module gb3146@parse-module) (set! gb3150@module-interface? (lambda (gb42cb@x) (and (simple-struct? gb42cb@x) (eq? (simple-struct-name gb42cb@x) 'module-interface)))) (set! gb4c36@gb3150@module-interface? gb3150@module-interface?) (set! gb3152@module-interface-first-mark (lambda (gb42cd@x) (simple-struct-ref gb42cd@x '0))) (set! gb4c37@gb3152@module-interface-first-mark gb3152@module-interface-first-mark) (set! gb3154@set-module-interface-first-mark! (lambda (gb42cf@x gb42d0@val) (simple-struct-set! gb42cf@x '0 gb42d0@val))) (set! gb4c38@gb3154@set-module-interface-first-mark! gb3154@set-module-interface-first-mark!) (set! gb3156@module-interface-exp-id-vec (lambda (gb42d3@x) (simple-struct-ref gb42d3@x '1))) (set! gb4c39@gb3156@module-interface-exp-id-vec gb3156@module-interface-exp-id-vec) (set! gb3158@set-module-interface-exp-id-vec! (lambda (gb42d5@x gb42d6@val) (simple-struct-set! gb42d5@x '1 gb42d6@val))) (set! gb4c3a@gb3158@set-module-interface-exp-id-vec! gb3158@set-module-interface-exp-id-vec!) (set! gb315a@module-interface-exp-lab-vec (lambda (gb42d9@x) (simple-struct-ref gb42d9@x '2))) (set! gb4c3b@gb315a@module-interface-exp-lab-vec gb315a@module-interface-exp-lab-vec) (set! gb315c@set-module-interface-exp-lab-vec! (lambda (gb42db@x gb42dc@val) (simple-struct-set! gb42db@x '2 gb42dc@val))) (set! gb4c3c@gb315c@set-module-interface-exp-lab-vec! gb315c@set-module-interface-exp-lab-vec!) (set! gb315e@dummy '3) (set! gb4c3d@gb315e@dummy gb315e@dummy) (set! gb3160@module-interface-exp-id* (lambda (gb42df@iface gb42e0@id) (letrec* ((gb42e4@diff-marks (lambda (gb42eb@ls gb42ec@x) (begin (if (null? gb42eb@ls) (error 'diff-marks '"BUG: should not happen") (void)) (let ((gb42ef@a (car gb42eb@ls))) (if (eq? gb42ef@a gb42ec@x) '() (cons gb42ef@a (gb42e4@diff-marks (cdr gb42eb@ls) gb42ec@x)))))))) (let ((gb42e5@diff (gb42e4@diff-marks (gb2ed7@stx-mark* gb42e0@id) (gb3152@module-interface-first-mark gb42df@iface))) (gb42e6@id-vec (gb3156@module-interface-exp-id-vec gb42df@iface))) (if (null? gb42e5@diff) gb42e6@id-vec (vector-map (lambda (gb42e9@x) (make-simple-struct 'stx '5 (list (gb2ed3@stx-expr gb42e9@x) (append gb42e5@diff (gb2ed7@stx-mark* gb42e9@x)) '() '()))) gb42e6@id-vec)))))) (set! gb4c3e@gb3160@module-interface-exp-id* gb3160@module-interface-exp-id*) (set! gb3162@chi-internal-module (lambda (gb42f1@e gb42f2@r gb42f3@mr gb42f4@lex* gb42f5@rhs* gb42f6@mod** gb42f7@kwd*) (call-with-values (lambda () (gb3146@parse-module gb42f1@e)) (lambda (gb4305@gb4300 gb4306@gb4302 gb4307@gb4304) (let ((gb430b@e* gb4307@gb4304) (gb430c@exp-id* gb4306@gb4302) (gb430d@name gb4305@gb4300)) (let ((gb4311@rib (gb2eb9@make-empty-rib))) (let ((gb4313@e* (map (lambda (gb4315@x) (gb2eef@add-subst gb4311@rib gb4315@x)) (gb2f03@syntax->list gb430b@e*)))) (call-with-values (lambda () (gb3164@chi-body* gb4313@e* gb42f2@r gb42f3@mr gb42f4@lex* gb42f5@rhs* gb42f6@mod** gb42f7@kwd* '() gb4311@rib '#f)) (lambda (gb4327@gb4318 gb4328@gb431a gb4329@gb431c gb432a@gb431e gb432b@gb4320 gb432c@gb4322 gb432d@gb4324 gb432e@gb4326) (let ((gb4337@_exp* gb432e@gb4326) (gb4338@kwd* gb432d@gb4324) (gb4339@mod** gb432c@gb4322) (gb433a@rhs* gb432b@gb4320) (gb433b@lex* gb432a@gb431e) (gb433c@mr gb4329@gb431c) (gb433d@r gb4328@gb431a) (gb433e@e* gb4327@gb4318)) (let ((gb4347@exp-lab* (vector-map (lambda (gb434b@x) (or (gb2f1b@id->label (make-simple-struct 'stx '5 (list (gb2f07@id->sym gb434b@x) (gb2ed7@stx-mark* gb434b@x) (list gb4311@rib) '()))) (gb31ec@syntax-violation '#f '"cannot find module export" gb434b@x))) gb430c@exp-id*)) (gb4348@mod** (cons gb433e@e* gb4339@mod**))) (if (not gb430d@name) (values gb433b@lex* gb433a@rhs* gb430c@exp-id* gb4347@exp-lab* gb433d@r gb433c@mr gb4348@mod** gb4338@kwd*) (let ((gb434d@lab (gb2e91@gen-label 'module)) (gb434e@iface (make-simple-struct 'module-interface '4 (list (car (gb2ed7@stx-mark* gb430d@name)) (vector-map (lambda (gb4351@x) (make-simple-struct 'stx '5 (list (gb2ed3@stx-expr gb4351@x) (gb2ed7@stx-mark* gb4351@x) '() '()))) gb430c@exp-id*) gb4347@exp-lab*)))) (values gb433b@lex* gb433a@rhs* (vector gb430d@name) (vector gb434d@lab) (cons (cons gb434d@lab (cons '$module gb434e@iface)) gb433d@r) (cons (cons gb434d@lab (cons '$module gb434e@iface)) gb433c@mr) gb4348@mod** gb4338@kwd*)))))))))))))) (set! gb4c3f@gb3162@chi-internal-module gb3162@chi-internal-module) (set! gb3164@chi-body* (lambda (gb4353@e* gb4354@r gb4355@mr gb4356@lex* gb4357@rhs* gb4358@mod** gb4359@kwd* gb435a@exp* gb435b@rib gb435c@top?) (if (null? gb4353@e*) (values gb4353@e* gb4354@r gb4355@mr gb4356@lex* gb4357@rhs* gb4358@mod** gb4359@kwd* gb435a@exp*) (let ((gb4367@e (car gb4353@e*))) (call-with-values (lambda () (gb2f27@syntax-type gb4367@e gb4354@r)) (lambda (gb436f@gb436a gb4370@gb436c gb4371@gb436e) (let ((gb4375@kwd gb4371@gb436e) (gb4376@value gb4370@gb436c) (gb4377@type gb436f@gb436a)) (let ((gb437b@kwd* (if (gb2f05@id? gb4375@kwd) (cons gb4375@kwd gb4359@kwd*) gb4359@kwd*))) (let ((gb437d@t gb4377@type)) (if (memv gb437d@t '(define)) (call-with-values (lambda () (gb308e@parse-define gb4367@e)) (lambda (gb4383@gb4380 gb4384@gb4382) (let ((gb4387@rhs gb4384@gb4382) (gb4388@id gb4383@gb4380)) (begin (if (gb2f11@bound-id-member? gb4388@id gb437b@kwd*) (gb31ec@syntax-violation '#f '"cannot redefine keyword" gb4367@e) (void)) (call-with-values (lambda () (gb2e95@gen-define-label+loc gb4388@id gb435b@rib)) (lambda (gb438f@gb438c gb4390@gb438e) (let ((gb4393@lex gb4390@gb438e) (gb4394@lab gb438f@gb438c)) (begin (gb2ebb@extend-rib! gb435b@rib gb4388@id gb4394@lab) (gb3164@chi-body* (cdr gb4353@e*) (gb309c@add-lexical gb4394@lab gb4393@lex gb4354@r) gb4355@mr (cons gb4393@lex gb4356@lex*) (cons gb4387@rhs gb4357@rhs*) gb4358@mod** gb437b@kwd* gb435a@exp* gb435b@rib gb435c@top?))))))))) (if (memv gb437d@t '(define-syntax)) (call-with-values (lambda () (gb3090@parse-define-syntax gb4367@e)) (lambda (gb439b@gb4398 gb439c@gb439a) (let ((gb439f@rhs gb439c@gb439a) (gb43a0@id gb439b@gb4398)) (begin (if (gb2f11@bound-id-member? gb43a0@id gb437b@kwd*) (gb31ec@syntax-violation '#f '"cannot redefine keyword" gb4367@e) (void)) (let ((gb43a3@lab (gb2e97@gen-define-label gb43a0@id gb435b@rib)) (gb43a4@expanded-rhs (gb3166@expand-transformer gb439f@rhs gb4355@mr))) (begin (gb2ebb@extend-rib! gb435b@rib gb43a0@id gb43a3@lab) (let ((gb43a7@b (gb2f3d@make-eval-transformer gb43a4@expanded-rhs))) (gb3164@chi-body* (cdr gb4353@e*) (cons (cons gb43a3@lab gb43a7@b) gb4354@r) (cons (cons gb43a3@lab gb43a7@b) gb4355@mr) gb4356@lex* gb4357@rhs* gb4358@mod** gb437b@kwd* gb435a@exp* gb435b@rib gb435c@top?)))))))) (if (memv gb437d@t '(let-syntax letrec-syntax)) (let ((gb43a9@t gb4367@e)) (let ((gb43ab@ls/false (gb310c@syntax-dispatch gb43a9@t '(_ #(each (any any)) . each-any)))) (if (and gb43ab@ls/false (apply (lambda (gb43ad@xlhs* gb43ae@xrhs* gb43af@xbody*) (if (not (gb2f0d@valid-bound-ids? gb43ad@xlhs*)) (gb31ec@syntax-violation '#f '"invalid identifiers" gb4367@e) (void))) gb43ab@ls/false)) (apply (lambda (gb43b3@xlhs* gb43b4@xrhs* gb43b5@xbody*) (let ((gb43b9@xlab* (map gb2e91@gen-label gb43b3@xlhs*))) (let ((gb43bb@xrib (gb2ec5@make-full-rib gb43b3@xlhs* gb43b9@xlab*))) (let ((gb43bd@xb* (map (lambda (gb43bf@x) (gb2f3d@make-eval-transformer (gb3166@expand-transformer (if (eq? gb4377@type 'let-syntax) gb43bf@x (gb2eef@add-subst gb43bb@xrib gb43bf@x)) gb4355@mr))) gb43b4@xrhs*))) (gb3164@chi-body* (append (map (lambda (gb43c1@x) (gb2eef@add-subst gb43bb@xrib gb43c1@x)) gb43b5@xbody*) (cdr gb4353@e*)) (append (map cons gb43b9@xlab* gb43bd@xb*) gb4354@r) (append (map cons gb43b9@xlab* gb43bd@xb*) gb4355@mr) gb4356@lex* gb4357@rhs* gb4358@mod** gb437b@kwd* gb435a@exp* gb435b@rib gb435c@top?))))) gb43ab@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb43a9@t)))) (if (memv gb437d@t '(begin)) (let ((gb43c3@t gb4367@e)) (let ((gb43c5@ls/false (gb310c@syntax-dispatch gb43c3@t '(_ . each-any)))) (if gb43c5@ls/false (apply (lambda (gb43c7@x*) (gb3164@chi-body* (append gb43c7@x* (cdr gb4353@e*)) gb4354@r gb4355@mr gb4356@lex* gb4357@rhs* gb4358@mod** gb437b@kwd* gb435a@exp* gb435b@rib gb435c@top?)) gb43c5@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb43c3@t)))) (if (memv gb437d@t '(global-macro global-macro!)) (gb3164@chi-body* (cons (gb3128@chi-global-macro gb4376@value gb4367@e gb435b@rib) (cdr gb4353@e*)) gb4354@r gb4355@mr gb4356@lex* gb4357@rhs* gb4358@mod** gb437b@kwd* gb435a@exp* gb435b@rib gb435c@top?) (if (memv gb437d@t '(local-macro local-macro!)) (gb3164@chi-body* (cons (gb3126@chi-local-macro gb4376@value gb4367@e gb435b@rib) (cdr gb4353@e*)) gb4354@r gb4355@mr gb4356@lex* gb4357@rhs* gb4358@mod** gb437b@kwd* gb435a@exp* gb435b@rib gb435c@top?) (if (memv gb437d@t '(macro macro!)) (gb3164@chi-body* (cons (gb3124@chi-macro gb4376@value gb4367@e gb435b@rib) (cdr gb4353@e*)) gb4354@r gb4355@mr gb4356@lex* gb4357@rhs* gb4358@mod** gb437b@kwd* gb435a@exp* gb435b@rib gb435c@top?) (if (memv gb437d@t '(module)) (call-with-values (lambda () (gb3162@chi-internal-module gb4367@e gb4354@r gb4355@mr gb4356@lex* gb4357@rhs* gb4358@mod** gb437b@kwd*)) (lambda (gb43d9@gb43ca gb43da@gb43cc gb43db@gb43ce gb43dc@gb43d0 gb43dd@gb43d2 gb43de@gb43d4 gb43df@gb43d6 gb43e0@gb43d8) (let ((gb43e9@kwd* gb43e0@gb43d8) (gb43ea@mod** gb43df@gb43d6) (gb43eb@mr gb43de@gb43d4) (gb43ec@r gb43dd@gb43d2) (gb43ed@m-exp-lab* gb43dc@gb43d0) (gb43ee@m-exp-id* gb43db@gb43ce) (gb43ef@rhs* gb43da@gb43cc) (gb43f0@lex* gb43d9@gb43ca)) (begin (vector-for-each (lambda (gb43f9@id gb43fa@lab) (gb2ebb@extend-rib! gb435b@rib gb43f9@id gb43fa@lab)) gb43ee@m-exp-id* gb43ed@m-exp-lab*) (gb3164@chi-body* (cdr gb4353@e*) gb43ec@r gb43eb@mr gb43f0@lex* gb43ef@rhs* gb43ea@mod** gb43e9@kwd* gb435a@exp* gb435b@rib gb435c@top?))))) (if (memv gb437d@t '(library)) (begin (gb31ce@library-expander (gb2f19@stx->datum gb4367@e)) (gb3164@chi-body* (cdr gb4353@e*) gb4354@r gb4355@mr gb4356@lex* gb4357@rhs* gb4358@mod** gb437b@kwd* gb435a@exp* gb435b@rib gb435c@top?)) (if (memv gb437d@t '(export)) (let ((gb43fd@t gb4367@e)) (let ((gb43ff@ls/false (gb310c@syntax-dispatch gb43fd@t '(_ . each-any)))) (if gb43ff@ls/false (apply (lambda (gb4401@exp-decl*) (gb3164@chi-body* (cdr gb4353@e*) gb4354@r gb4355@mr gb4356@lex* gb4357@rhs* gb4358@mod** gb437b@kwd* (append gb4401@exp-decl* gb435a@exp*) gb435b@rib gb435c@top?)) gb43ff@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb43fd@t)))) (if (memv gb437d@t '(import)) (letrec* ((gb4404@module-import? (lambda (gb4457@e) (let ((gb4459@t gb4457@e)) (let ((gb445b@ls/false (gb310c@syntax-dispatch gb4459@t '(_ any)))) (if (and gb445b@ls/false (apply (lambda (gb445d@id) (gb2f05@id? gb445d@id)) gb445b@ls/false)) (apply (lambda (gb445f@id) '#t) gb445b@ls/false) (let ((gb4461@t gb4459@t)) (let ((gb4463@ls/false (gb310c@syntax-dispatch gb4461@t '(_ . each-any)))) (if gb4463@ls/false (apply (lambda (gb4465@imp*) '#f) gb4463@ls/false) (let ((gb4467@t gb4461@t)) (let ((gb4469@ls/false (gb310c@syntax-dispatch gb4467@t '_))) (if gb4469@ls/false (apply (lambda () (gb31ec@syntax-violation '#f '"malformed import form" gb4457@e)) gb4469@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb4467@t)))))))))))) (gb4406@module-import (lambda (gb4435@e gb4436@r) (let ((gb4439@t gb4435@e)) (let ((gb443b@ls/false (gb310c@syntax-dispatch gb4439@t '(_ any)))) (if (and gb443b@ls/false (apply (lambda (gb443d@id) (gb2f05@id? gb443d@id)) gb443b@ls/false)) (apply (lambda (gb443f@id) (call-with-values (lambda () (gb2f27@syntax-type gb443f@id gb4436@r)) (lambda (gb4447@gb4442 gb4448@gb4444 gb4449@gb4446) (let ((gb444d@kwd gb4449@gb4446) (gb444e@value gb4448@gb4444) (gb444f@type gb4447@gb4442)) (let ((gb4453@t gb444f@type)) (if (memv gb4453@t '($module)) (let ((gb4455@iface gb444e@value)) (values (gb3160@module-interface-exp-id* gb4455@iface gb443f@id) (gb315a@module-interface-exp-lab-vec gb4455@iface))) (gb31ec@syntax-violation '#f '"invalid import" gb4435@e))))))) gb443b@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb4439@t)))))) (gb4408@library-import (lambda (gb4419@e) (let ((gb441b@t gb4419@e)) (let ((gb441d@ls/false (gb310c@syntax-dispatch gb441b@t '(any . each-any)))) (if gb441d@ls/false (apply (lambda (gb441f@ctxt gb4420@imp*) (call-with-values (lambda () (gb316e@parse-import-spec* (gb31f2@syntax->datum gb4420@imp*))) (lambda (gb4427@gb4424 gb4428@gb4426) (let ((gb442b@subst-labels gb4428@gb4426) (gb442c@subst-names gb4427@gb4424)) (values (vector-map (lambda (gb442f@name) (gb2ee5@datum->stx gb441f@ctxt gb442f@name)) gb442c@subst-names) gb442b@subst-labels))))) gb441d@ls/false) (let ((gb4431@t gb441b@t)) (let ((gb4433@ls/false (gb310c@syntax-dispatch gb4431@t '_))) (if gb4433@ls/false (apply (lambda () (gb31ec@syntax-violation '#f '"invalid import form" gb4419@e)) gb4433@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb4431@t)))))))))) (begin (call-with-values (lambda () (if (gb4404@module-import? gb4367@e) (gb4406@module-import gb4367@e gb4354@r) (gb4408@library-import gb4367@e))) (lambda (gb440d@gb440a gb440e@gb440c) (let ((gb4411@lab* gb440e@gb440c) (gb4412@id* gb440d@gb440a)) (vector-for-each (lambda (gb4415@id gb4416@lab) (gb2ebb@extend-rib! gb435b@rib gb4415@id gb4416@lab)) gb4412@id* gb4411@lab*)))) (gb3164@chi-body* (cdr gb4353@e*) gb4354@r gb4355@mr gb4356@lex* gb4357@rhs* gb4358@mod** gb437b@kwd* gb435a@exp* gb435b@rib gb435c@top?))) (if gb435c@top? (gb3164@chi-body* (cdr gb4353@e*) gb4354@r gb4355@mr (cons (gb2e8d@gen-lexical 'dummy) gb4356@lex*) (cons (cons 'top-expr gb4367@e) gb4357@rhs*) gb4358@mod** gb437b@kwd* gb435a@exp* gb435b@rib gb435c@top?) (values gb4353@e* gb4354@r gb4355@mr gb4356@lex* gb4357@rhs* gb4358@mod** gb437b@kwd* gb435a@exp*)))))))))))))))))))))) (set! gb4c40@gb3164@chi-body* gb3164@chi-body*) (set! gb3166@expand-transformer (lambda (gb446b@expr gb446c@r) (let ((gb446f@rtc (gb3172@make-collector))) (let ((gb4471@expanded-rhs (let ((gb447b@gb4474 gb3174@inv-collector) (gb447c@gb4476 gb3176@vis-collector) (gb447d@gb4478 gb446f@rtc) (gb447e@gb447a (lambda (gb4483@x) (values)))) (let ((gb4485@swap (lambda () (begin (let ((gb4487@t (gb447b@gb4474))) (begin (gb447b@gb4474 gb447d@gb4478) (set! gb447d@gb4478 gb4487@t))) (let ((gb4489@t (gb447c@gb4476))) (begin (gb447c@gb4476 gb447e@gb447a) (set! gb447e@gb447a gb4489@t))))))) (dynamic-wind gb4485@swap (lambda () (gb312e@chi-expr gb446b@expr gb446c@r gb446c@r)) gb4485@swap))))) (begin (for-each (let ((gb448b@mark-visit (gb3176@vis-collector))) (lambda (gb448d@x) (begin (gb2d21@gb2b6f@invoke-library gb448d@x) (gb448b@mark-visit gb448d@x)))) (gb446f@rtc)) gb4471@expanded-rhs))))) (set! gb4c41@gb3166@expand-transformer gb3166@expand-transformer) (set! gb3168@parse-exports (lambda (gb448f@exp*) (let gb4497@f ((gb4491@exp* gb448f@exp*) (gb4492@int* '()) (gb4493@ext* '())) (if (null? gb4491@exp*) (begin (if (not (gb2f0d@valid-bound-ids? gb4493@ext*)) (gb31ec@syntax-violation 'export '"invalid exports" (gb3142@find-dups gb4493@ext*)) (void)) (values (map gb31f2@syntax->datum gb4493@ext*) gb4492@int*)) (let ((gb4499@t (car gb4491@exp*))) (let ((gb449b@ls/false (gb310c@syntax-dispatch gb4499@t '(any . #(each (any any)))))) (if gb449b@ls/false (apply (lambda (gb449d@rename gb449e@i* gb449f@e*) (begin (if (not (and (eq? (gb31f2@syntax->datum gb449d@rename) 'rename) (for-all gb2f05@id? gb449e@i*) (for-all gb2f05@id? gb449f@e*))) (gb31ec@syntax-violation 'export '"invalid export specifier" (car gb4491@exp*)) (void)) (gb4497@f (cdr gb4491@exp*) (append gb449e@i* gb4492@int*) (append gb449f@e* gb4493@ext*)))) gb449b@ls/false) (let ((gb44a3@t gb4499@t)) (let ((gb44a5@ls/false (gb310c@syntax-dispatch gb44a3@t 'any))) (if gb44a5@ls/false (apply (lambda (gb44a7@ie) (begin (if (not (gb2f05@id? gb44a7@ie)) (gb31ec@syntax-violation 'export '"invalid export" gb44a7@ie) (void)) (gb4497@f (cdr gb4491@exp*) (cons gb44a7@ie gb4492@int*) (cons gb44a7@ie gb4493@ext*)))) gb44a5@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb44a3@t))))))))))) (set! gb4c42@gb3168@parse-exports gb3168@parse-exports) (set! gb316a@parse-library-name (lambda (gb44a9@spec) (letrec* ((gb44ac@parse (lambda (gb44b9@x) (let ((gb44bb@t gb44b9@x)) (let ((gb44bd@ls/false (gb310c@syntax-dispatch gb44bb@t '(each-any)))) (if (and gb44bd@ls/false (apply (lambda (gb44bf@v*) (for-all (lambda (gb44c1@x) (let ((gb44c3@x (gb31f2@syntax->datum gb44c1@x))) (and (integer? gb44c3@x) (exact? gb44c3@x)))) gb44bf@v*)) gb44bd@ls/false)) (apply (lambda (gb44c5@v*) (values '() (map gb31f2@syntax->datum gb44c5@v*))) gb44bd@ls/false) (let ((gb44c7@t gb44bb@t)) (let ((gb44c9@ls/false (gb310c@syntax-dispatch gb44c7@t '(any . any)))) (if (and gb44c9@ls/false (apply (lambda (gb44cb@x gb44cc@rest) (symbol? (gb31f2@syntax->datum gb44cb@x))) gb44c9@ls/false)) (apply (lambda (gb44cf@x gb44d0@rest) (call-with-values (lambda () (gb44ac@parse gb44d0@rest)) (lambda (gb44d7@gb44d4 gb44d8@gb44d6) (let ((gb44db@v* gb44d8@gb44d6) (gb44dc@x* gb44d7@gb44d4)) (values (cons (gb31f2@syntax->datum gb44cf@x) gb44dc@x*) gb44db@v*))))) gb44c9@ls/false) (let ((gb44df@t gb44c7@t)) (let ((gb44e1@ls/false (gb310c@syntax-dispatch gb44df@t '()))) (if gb44e1@ls/false (apply (lambda () (values '() '())) gb44e1@ls/false) (let ((gb44e3@t gb44df@t)) (let ((gb44e5@ls/false (gb310c@syntax-dispatch gb44e3@t '_))) (if gb44e5@ls/false (apply (lambda () (gb31ec@syntax-violation '#f '"invalid library name" gb44a9@spec)) gb44e5@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb44e3@t)))))))))))))))) (call-with-values (lambda () (gb44ac@parse gb44a9@spec)) (lambda (gb44b1@gb44ae gb44b2@gb44b0) (let ((gb44b5@ver* gb44b2@gb44b0) (gb44b6@name* gb44b1@gb44ae)) (begin (if (null? gb44b6@name*) (gb31ec@syntax-violation '#f '"empty library name" gb44a9@spec) (void)) (values gb44b6@name* gb44b5@ver*)))))))) (set! gb4c43@gb316a@parse-library-name gb316a@parse-library-name) (set! gb316c@parse-library (lambda (gb44e7@e) (let ((gb44e9@t gb44e7@e)) (let ((gb44eb@ls/false (gb310c@syntax-dispatch gb44e9@t '(any each-any (any . each-any) (any . each-any) . each-any)))) (if (and gb44eb@ls/false (apply (lambda (gb44ed@library gb44ee@name* gb44ef@export gb44f0@exp* gb44f1@import gb44f2@imp* gb44f3@b*) (and (eq? (gb31f2@syntax->datum gb44ef@export) 'export) (eq? (gb31f2@syntax->datum gb44f1@import) 'import) (eq? (gb31f2@syntax->datum gb44ed@library) 'library))) gb44eb@ls/false)) (apply (lambda (gb44fb@library gb44fc@name* gb44fd@export gb44fe@exp* gb44ff@import gb4500@imp* gb4501@b*) (values gb44fc@name* gb44fe@exp* gb4500@imp* gb4501@b*)) gb44eb@ls/false) (let ((gb4509@t gb44e9@t)) (let ((gb450b@ls/false (gb310c@syntax-dispatch gb4509@t '_))) (if gb450b@ls/false (apply (lambda () (gb31ec@syntax-violation '#f '"malformed library" gb44e7@e)) gb450b@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb4509@t))))))))) (set! gb4c44@gb316c@parse-library gb316c@parse-library) (set! gb316e@parse-import-spec* (letrec* ((gb450e@idsyn? (lambda (gb4717@x) (symbol? (gb31f2@syntax->datum gb4717@x)))) (gb4510@dup-error (lambda (gb4715@name) (gb31ec@syntax-violation 'import '"two imports with different bindings" gb4715@name))) (gb4512@merge-substs (lambda (gb4703@s gb4704@subst) (letrec* ((gb4708@insert-to-subst (lambda (gb4709@a gb470a@subst) (let ((gb470d@name (car gb4709@a)) (gb470e@label (cdr gb4709@a))) (let ((gb4711@t (assq gb470d@name gb470a@subst))) (if gb4711@t ((lambda (gb4713@x) (if (eq? (cdr gb4713@x) gb470e@label) gb470a@subst (gb4510@dup-error gb470d@name))) gb4711@t) (cons gb4709@a gb470a@subst))))))) (if (null? gb4703@s) gb4704@subst (gb4708@insert-to-subst (car gb4703@s) (gb4512@merge-substs (cdr gb4703@s) gb4704@subst)))))) (gb4514@exclude* (lambda (gb46d3@sym* gb46d4@subst) (letrec* ((gb46d8@exclude (lambda (gb46f1@sym gb46f2@subst) (if (null? gb46f2@subst) (gb31ec@syntax-violation 'import '"cannot rename unbound identifier" gb46f1@sym) (if (eq? gb46f1@sym (caar gb46f2@subst)) (values (cdar gb46f2@subst) (cdr gb46f2@subst)) (let ((gb46f5@a (car gb46f2@subst))) (call-with-values (lambda () (gb46d8@exclude gb46f1@sym (cdr gb46f2@subst))) (lambda (gb46fb@gb46f8 gb46fc@gb46fa) (let ((gb46ff@subst gb46fc@gb46fa) (gb4700@old gb46fb@gb46f8)) (values gb4700@old (cons gb46f5@a gb46ff@subst))))))))))) (if (null? gb46d3@sym*) (values '() gb46d4@subst) (call-with-values (lambda () (gb46d8@exclude (car gb46d3@sym*) gb46d4@subst)) (lambda (gb46dd@gb46da gb46de@gb46dc) (let ((gb46e1@subst gb46de@gb46dc) (gb46e2@old gb46dd@gb46da)) (call-with-values (lambda () (gb4514@exclude* (cdr gb46d3@sym*) gb46e1@subst)) (lambda (gb46e9@gb46e6 gb46ea@gb46e8) (let ((gb46ed@subst gb46ea@gb46e8) (gb46ee@old* gb46e9@gb46e6)) (values (cons gb46e2@old gb46ee@old*) gb46ed@subst))))))))))) (gb4516@find* (lambda (gb46cb@sym* gb46cc@subst) (map (lambda (gb46cf@x) (let ((gb46d1@t (assq gb46cf@x gb46cc@subst))) (if gb46d1@t (cdr gb46d1@t) (gb31ec@syntax-violation 'import '"cannot find identifier" gb46cf@x)))) gb46cb@sym*))) (gb4518@rem* (lambda (gb46c3@sym* gb46c4@subst) (let gb46c9@f ((gb46c7@subst gb46c4@subst)) (if (null? gb46c7@subst) '() (if (memq (caar gb46c7@subst) gb46c3@sym*) (gb46c9@f (cdr gb46c7@subst)) (cons (car gb46c7@subst) (gb46c9@f (cdr gb46c7@subst)))))))) (gb451a@remove-dups (lambda (gb46c1@ls) (if (null? gb46c1@ls) '() (if (memq (car gb46c1@ls) (cdr gb46c1@ls)) (gb451a@remove-dups (cdr gb46c1@ls)) (cons (car gb46c1@ls) (gb451a@remove-dups (cdr gb46c1@ls))))))) (gb451c@parse-library-name (lambda (gb45d9@spec) (letrec* ((gb45dc@subversion? (lambda (gb46bd@x) (let ((gb46bf@x (gb31f2@syntax->datum gb46bd@x))) (and (integer? gb46bf@x) (exact? gb46bf@x) (>= gb46bf@x '0))))) (gb45de@subversion-pred (lambda (gb465d@x*) (let ((gb465f@t gb465d@x*)) (let ((gb4661@ls/false (gb310c@syntax-dispatch gb465f@t 'any))) (if (and gb4661@ls/false (apply (lambda (gb4663@n) (gb45dc@subversion? gb4663@n)) gb4661@ls/false)) (apply (lambda (gb4665@n) (lambda (gb4667@x) (= gb4667@x (gb31f2@syntax->datum gb4665@n)))) gb4661@ls/false) (let ((gb4669@t gb465f@t)) (let ((gb466b@ls/false (gb310c@syntax-dispatch gb4669@t '(any . each-any)))) (if (and gb466b@ls/false (apply (lambda (gb466d@p? gb466e@sub*) (eq? (gb31f2@syntax->datum gb466d@p?) 'and)) gb466b@ls/false)) (apply (lambda (gb4671@p? gb4672@sub*) (let ((gb4675@p* (map gb45de@subversion-pred gb4672@sub*))) (lambda (gb4677@x) (for-all (lambda (gb4679@p) (gb4679@p gb4677@x)) gb4675@p*)))) gb466b@ls/false) (let ((gb467b@t gb4669@t)) (let ((gb467d@ls/false (gb310c@syntax-dispatch gb467b@t '(any . each-any)))) (if (and gb467d@ls/false (apply (lambda (gb467f@p? gb4680@sub*) (eq? (gb31f2@syntax->datum gb467f@p?) 'or)) gb467d@ls/false)) (apply (lambda (gb4683@p? gb4684@sub*) (let ((gb4687@p* (map gb45de@subversion-pred gb4684@sub*))) (lambda (gb4689@x) (exists (lambda (gb468b@p) (gb468b@p gb4689@x)) gb4687@p*)))) gb467d@ls/false) (let ((gb468d@t gb467b@t)) (let ((gb468f@ls/false (gb310c@syntax-dispatch gb468d@t '(any any)))) (if (and gb468f@ls/false (apply (lambda (gb4691@p? gb4692@sub) (eq? (gb31f2@syntax->datum gb4691@p?) 'not)) gb468f@ls/false)) (apply (lambda (gb4695@p? gb4696@sub) (let ((gb4699@p (gb45de@subversion-pred gb4696@sub))) (lambda (gb469b@x) (not (gb4699@p gb469b@x))))) gb468f@ls/false) (let ((gb469d@t gb468d@t)) (let ((gb469f@ls/false (gb310c@syntax-dispatch gb469d@t '(any any)))) (if (and gb469f@ls/false (apply (lambda (gb46a1@p? gb46a2@n) (and (eq? (gb31f2@syntax->datum gb46a1@p?) '<=) (gb45dc@subversion? gb46a2@n))) gb469f@ls/false)) (apply (lambda (gb46a5@p? gb46a6@n) (lambda (gb46a9@x) (<= gb46a9@x (gb31f2@syntax->datum gb46a6@n)))) gb469f@ls/false) (let ((gb46ab@t gb469d@t)) (let ((gb46ad@ls/false (gb310c@syntax-dispatch gb46ab@t '(any any)))) (if (and gb46ad@ls/false (apply (lambda (gb46af@p? gb46b0@n) (and (eq? (gb31f2@syntax->datum gb46af@p?) '>=) (gb45dc@subversion? gb46b0@n))) gb46ad@ls/false)) (apply (lambda (gb46b3@p? gb46b4@n) (lambda (gb46b7@x) (>= gb46b7@x (gb31f2@syntax->datum gb46b4@n)))) gb46ad@ls/false) (let ((gb46b9@t gb46ab@t)) (let ((gb46bb@ls/false (gb310c@syntax-dispatch gb46b9@t '_))) (if gb46bb@ls/false (apply (lambda () (gb31ec@syntax-violation 'import '"invalid sub-version spec" gb45d9@spec gb465d@x*)) gb46bb@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb46b9@t)))))))))))))))))))))))) (gb45e0@version-pred (lambda (gb460d@x*) (let ((gb460f@t gb460d@x*)) (let ((gb4611@ls/false (gb310c@syntax-dispatch gb460f@t '()))) (if gb4611@ls/false (apply (lambda () (lambda (gb4613@x) '#t)) gb4611@ls/false) (let ((gb4615@t gb460f@t)) (let ((gb4617@ls/false (gb310c@syntax-dispatch gb4615@t '(any . each-any)))) (if (and gb4617@ls/false (apply (lambda (gb4619@c gb461a@ver*) (eq? (gb31f2@syntax->datum gb4619@c) 'and)) gb4617@ls/false)) (apply (lambda (gb461d@c gb461e@ver*) (let ((gb4621@p* (map gb45e0@version-pred gb461e@ver*))) (lambda (gb4623@x) (for-all (lambda (gb4625@p) (gb4625@p gb4623@x)) gb4621@p*)))) gb4617@ls/false) (let ((gb4627@t gb4615@t)) (let ((gb4629@ls/false (gb310c@syntax-dispatch gb4627@t '(any . each-any)))) (if (and gb4629@ls/false (apply (lambda (gb462b@c gb462c@ver*) (eq? (gb31f2@syntax->datum gb462b@c) 'or)) gb4629@ls/false)) (apply (lambda (gb462f@c gb4630@ver*) (let ((gb4633@p* (map gb45e0@version-pred gb4630@ver*))) (lambda (gb4635@x) (exists (lambda (gb4637@p) (gb4637@p gb4635@x)) gb4633@p*)))) gb4629@ls/false) (let ((gb4639@t gb4627@t)) (let ((gb463b@ls/false (gb310c@syntax-dispatch gb4639@t '(any any)))) (if (and gb463b@ls/false (apply (lambda (gb463d@c gb463e@ver) (eq? (gb31f2@syntax->datum gb463d@c) 'not)) gb463b@ls/false)) (apply (lambda (gb4641@c gb4642@ver) (let ((gb4645@p (gb45e0@version-pred gb4642@ver))) (lambda (gb4647@x) (not (gb4645@p gb4647@x))))) gb463b@ls/false) (let ((gb4649@t gb4639@t)) (let ((gb464b@ls/false (gb310c@syntax-dispatch gb4649@t 'each-any))) (if gb464b@ls/false (apply (lambda (gb464d@sub*) (let ((gb464f@p* (map gb45de@subversion-pred gb464d@sub*))) (lambda (gb4651@x) (let gb4657@f ((gb4653@p* gb464f@p*) (gb4654@x gb4651@x)) (if (null? gb4653@p*) '#t (if (null? gb4654@x) '#f (and ((car gb4653@p*) (car gb4654@x)) (gb4657@f (cdr gb4653@p*) (cdr gb4654@x))))))))) gb464b@ls/false) (let ((gb4659@t gb4649@t)) (let ((gb465b@ls/false (gb310c@syntax-dispatch gb4659@t '_))) (if gb465b@ls/false (apply (lambda () (gb31ec@syntax-violation 'import '"invalid version spec" gb45d9@spec gb460d@x*)) gb465b@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb4659@t)))))))))))))))))))))) (let gb45e3@f ((gb45e1@x gb45d9@spec)) (let ((gb45e5@t gb45e1@x)) (let ((gb45e7@ls/false (gb310c@syntax-dispatch gb45e5@t '(each-any)))) (if gb45e7@ls/false (apply (lambda (gb45e9@version-spec*) (values '() (gb45e0@version-pred gb45e9@version-spec*))) gb45e7@ls/false) (let ((gb45eb@t gb45e5@t)) (let ((gb45ed@ls/false (gb310c@syntax-dispatch gb45eb@t '(any . any)))) (if (and gb45ed@ls/false (apply (lambda (gb45ef@x gb45f0@x*) (gb450e@idsyn? gb45ef@x)) gb45ed@ls/false)) (apply (lambda (gb45f3@x gb45f4@x*) (call-with-values (lambda () (gb45e3@f gb45f4@x*)) (lambda (gb45fb@gb45f8 gb45fc@gb45fa) (let ((gb45ff@pred gb45fc@gb45fa) (gb4600@name gb45fb@gb45f8)) (values (cons (gb31f2@syntax->datum gb45f3@x) gb4600@name) gb45ff@pred))))) gb45ed@ls/false) (let ((gb4603@t gb45eb@t)) (let ((gb4605@ls/false (gb310c@syntax-dispatch gb4603@t '()))) (if gb4605@ls/false (apply (lambda () (values '() (lambda (gb4607@x) '#t))) gb4605@ls/false) (let ((gb4609@t gb4603@t)) (let ((gb460b@ls/false (gb310c@syntax-dispatch gb4609@t '_))) (if gb460b@ls/false (apply (lambda () (gb31ec@syntax-violation '#f '"invalid import spec" gb45d9@spec)) gb460b@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb4609@t))))))))))))))))) (gb451e@import-library (lambda (gb45c9@spec*) (call-with-values (lambda () (gb451c@parse-library-name gb45c9@spec*)) (lambda (gb45cf@gb45cc gb45d0@gb45ce) (let ((gb45d3@pred gb45d0@gb45ce) (gb45d4@name gb45cf@gb45cc)) (begin (if (null? gb45d4@name) (gb31ec@syntax-violation 'import '"empty library name" gb45c9@spec*) (void)) (let ((gb45d7@lib (gb2d1a@gb2b61@find-library-by-name gb45d4@name))) (begin (if (not gb45d7@lib) (gb31ec@syntax-violation 'import '"cannot find library with required name" gb45d4@name) (void)) (if (not (gb45d3@pred (gb2cf4@gb2b15@library-version gb45d7@lib))) (gb31ec@syntax-violation 'import '"library does not satisfy version specification" gb45c9@spec* gb45d7@lib) (void)) ((gb3178@imp-collector) gb45d7@lib) (gb2cfc@gb2b25@library-subst gb45d7@lib))))))))) (gb4520@get-import (lambda (gb453b@spec) (let ((gb453d@t gb453b@spec)) (let ((gb453f@ls/false (gb310c@syntax-dispatch gb453d@t '(any . each-any)))) (if (and gb453f@ls/false (apply (lambda (gb4541@x gb4542@x*) (not (memq (gb31f2@syntax->datum gb4541@x) '(for rename except only prefix library)))) gb453f@ls/false)) (apply (lambda (gb4545@x gb4546@x*) (gb451e@import-library (cons gb4545@x gb4546@x*))) gb453f@ls/false) (let ((gb4549@t gb453d@t)) (let ((gb454b@ls/false (gb310c@syntax-dispatch gb4549@t '(any any . #(each (any any)))))) (if (and gb454b@ls/false (apply (lambda (gb454d@rename gb454e@isp gb454f@old* gb4550@new*) (and (eq? (gb31f2@syntax->datum gb454d@rename) 'rename) (for-all gb450e@idsyn? gb454f@old*) (for-all gb450e@idsyn? gb4550@new*))) gb454b@ls/false)) (apply (lambda (gb4555@rename gb4556@isp gb4557@old* gb4558@new*) (let ((gb455d@subst (gb4520@get-import gb4556@isp)) (gb455e@old* (map gb31f2@syntax->datum gb4557@old*)) (gb455f@new* (map gb31f2@syntax->datum gb4558@new*))) (let ((gb4563@old-label* (gb4516@find* gb455e@old* gb455d@subst))) (let ((gb4565@subst (gb4518@rem* gb455e@old* gb455d@subst))) (gb4512@merge-substs (map cons gb455f@new* gb4563@old-label*) gb4565@subst))))) gb454b@ls/false) (let ((gb4567@t gb4549@t)) (let ((gb4569@ls/false (gb310c@syntax-dispatch gb4567@t '(any any . each-any)))) (if (and gb4569@ls/false (apply (lambda (gb456b@except gb456c@isp gb456d@sym*) (and (eq? (gb31f2@syntax->datum gb456b@except) 'except) (for-all gb450e@idsyn? gb456d@sym*))) gb4569@ls/false)) (apply (lambda (gb4571@except gb4572@isp gb4573@sym*) (let ((gb4577@subst (gb4520@get-import gb4572@isp))) (gb4518@rem* (map gb31f2@syntax->datum gb4573@sym*) gb4577@subst))) gb4569@ls/false) (let ((gb4579@t gb4567@t)) (let ((gb457b@ls/false (gb310c@syntax-dispatch gb4579@t '(any any . each-any)))) (if (and gb457b@ls/false (apply (lambda (gb457d@only gb457e@isp gb457f@sym*) (and (eq? (gb31f2@syntax->datum gb457d@only) 'only) (for-all gb450e@idsyn? gb457f@sym*))) gb457b@ls/false)) (apply (lambda (gb4583@only gb4584@isp gb4585@sym*) (let ((gb4589@subst (gb4520@get-import gb4584@isp)) (gb458a@sym* (map gb31f2@syntax->datum gb4585@sym*))) (let ((gb458d@sym* (gb451a@remove-dups gb458a@sym*))) (let ((gb458f@lab* (gb4516@find* gb458d@sym* gb4589@subst))) (map cons gb458d@sym* gb458f@lab*))))) gb457b@ls/false) (let ((gb4591@t gb4579@t)) (let ((gb4593@ls/false (gb310c@syntax-dispatch gb4591@t '(any any any)))) (if (and gb4593@ls/false (apply (lambda (gb4595@prefix gb4596@isp gb4597@p) (and (eq? (gb31f2@syntax->datum gb4595@prefix) 'prefix) (gb450e@idsyn? gb4597@p))) gb4593@ls/false)) (apply (lambda (gb459b@prefix gb459c@isp gb459d@p) (let ((gb45a1@subst (gb4520@get-import gb459c@isp)) (gb45a2@prefix (symbol->string (gb31f2@syntax->datum gb459d@p)))) (map (lambda (gb45a5@x) (cons (string->symbol (string-append gb45a2@prefix (symbol->string (car gb45a5@x)))) (cdr gb45a5@x))) gb45a1@subst))) gb4593@ls/false) (let ((gb45a7@t gb4591@t)) (let ((gb45a9@ls/false (gb310c@syntax-dispatch gb45a7@t '(any each-any)))) (if (and gb45a9@ls/false (apply (lambda (gb45ab@library gb45ac@spec*) (eq? (gb31f2@syntax->datum gb45ab@library) 'library)) gb45a9@ls/false)) (apply (lambda (gb45af@library gb45b0@spec*) (gb451e@import-library gb45b0@spec*)) gb45a9@ls/false) (let ((gb45b3@t gb45a7@t)) (let ((gb45b5@ls/false (gb310c@syntax-dispatch gb45b3@t '(any any . any)))) (if (and gb45b5@ls/false (apply (lambda (gb45b7@for gb45b8@isp gb45b9@rest) (eq? (gb31f2@syntax->datum gb45b7@for) 'for)) gb45b5@ls/false)) (apply (lambda (gb45bd@for gb45be@isp gb45bf@rest) (gb4520@get-import gb45be@isp)) gb45b5@ls/false) (let ((gb45c3@t gb45b3@t)) (let ((gb45c5@ls/false (gb310c@syntax-dispatch gb45c3@t 'any))) (if gb45c5@ls/false (apply (lambda (gb45c7@spec) (gb31ec@syntax-violation 'import '"invalid import spec" gb45c7@spec)) gb45c5@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb45c3@t))))))))))))))))))))))))))) (gb4522@add-imports! (lambda (gb452b@imp gb452c@h) (let ((gb452f@subst (gb4520@get-import gb452b@imp))) (for-each (lambda (gb4531@x) (let ((gb4533@name (car gb4531@x)) (gb4534@label (cdr gb4531@x))) (let ((gb4537@t (hashtable-ref gb452c@h gb4533@name '#f))) (if gb4537@t ((lambda (gb4539@l) (if (not (eq? gb4539@l gb4534@label)) (gb4510@dup-error gb4533@name) (void))) gb4537@t) (hashtable-set! gb452c@h gb4533@name gb4534@label))))) gb452f@subst))))) (lambda (gb4523@imp*) (let gb4529@f ((gb4525@imp* gb4523@imp*) (gb4526@h (make-eq-hashtable))) (if (null? gb4525@imp*) (hashtable-entries gb4526@h) (begin (gb4522@add-imports! (car gb4525@imp*) gb4526@h) (gb4529@f (cdr gb4525@imp*) gb4526@h))))))) (set! gb4c45@gb316e@parse-import-spec* gb316e@parse-import-spec*) (set! gb3170@make-top-rib (lambda (gb4719@names gb471a@labels) (let ((gb471d@rib (gb2eb9@make-empty-rib))) (begin (vector-for-each (lambda (gb471f@name gb4720@label) (begin (if (not (symbol? gb471f@name)) (error 'make-top-rib '"BUG: not a symbol" gb471f@name) (void)) (gb2ebd@extend-rib/nc! gb471d@rib (make-simple-struct 'stx '5 (list gb471f@name gb2e89@top-mark* '() '())) gb4720@label))) gb4719@names gb471a@labels) gb471d@rib)))) (set! gb4c46@gb3170@make-top-rib gb3170@make-top-rib) (set! gb3172@make-collector (lambda () (let ((gb4723@ls '())) (lambda gb4727 (let ((gb4728 (length gb4727))) (if (= gb4728 '0) (apply (lambda () gb4723@ls) gb4727) (if (= gb4728 '1) (apply (lambda (gb4725@x) (set! gb4723@ls (gb2e82@set-cons gb4725@x gb4723@ls))) gb4727) (error 'apply '"invalid arg count")))))))) (set! gb4c47@gb3172@make-collector gb3172@make-collector) (set! gb3174@inv-collector (gb2a55@gb2933@make-parameter (lambda gb4729@args (assertion-violation 'inv-collector '"BUG: not initialized")) (lambda (gb472b@x) (begin (if (not (procedure? gb472b@x)) (assertion-violation 'inv-collector '"BUG: not a procedure" gb472b@x) (void)) gb472b@x)))) (set! gb4c48@gb3174@inv-collector gb3174@inv-collector) (set! gb3176@vis-collector (gb2a55@gb2933@make-parameter (lambda gb472d@args (assertion-violation 'vis-collector '"BUG: not initialized")) (lambda (gb472f@x) (begin (if (not (procedure? gb472f@x)) (assertion-violation 'vis-collector '"BUG: not a procedure" gb472f@x) (void)) gb472f@x)))) (set! gb4c49@gb3176@vis-collector gb3176@vis-collector) (set! gb3178@imp-collector (gb2a55@gb2933@make-parameter (lambda gb4731@args (assertion-violation 'imp-collector '"BUG: not initialized")) (lambda (gb4733@x) (begin (if (not (procedure? gb4733@x)) (assertion-violation 'imp-collector '"BUG: not a procedure" gb4733@x) (void)) gb4733@x)))) (set! gb4c4a@gb3178@imp-collector gb3178@imp-collector) (set! gb317a@chi-library-internal (lambda (gb4735@e* gb4736@rib gb4737@top?) (call-with-values (lambda () (gb3164@chi-body* gb4735@e* '() '() '() '() '() '() '() gb4736@rib gb4737@top?)) (lambda (gb474b@gb473c gb474c@gb473e gb474d@gb4740 gb474e@gb4742 gb474f@gb4744 gb4750@gb4746 gb4751@gb4748 gb4752@gb474a) (let ((gb475b@exp* gb4752@gb474a) (gb475c@_kwd* gb4751@gb4748) (gb475d@mod** gb4750@gb4746) (gb475e@rhs* gb474f@gb4744) (gb475f@lex* gb474e@gb4742) (gb4760@mr gb474d@gb4740) (gb4761@r gb474c@gb473e) (gb4762@e* gb474b@gb473c)) (values (append (apply append (reverse gb475d@mod**)) gb4762@e*) gb4761@r gb4760@mr (reverse gb475f@lex*) (reverse gb475e@rhs*) gb475b@exp*)))))) (set! gb4c4b@gb317a@chi-library-internal gb317a@chi-library-internal) (set! gb317c@chi-interaction-expr (lambda (gb476b@e gb476c@rib gb476d@r) (call-with-values (lambda () (gb3164@chi-body* (list gb476b@e) gb476d@r gb476d@r '() '() '() '() '() gb476c@rib '#t)) (lambda (gb4781@gb4772 gb4782@gb4774 gb4783@gb4776 gb4784@gb4778 gb4785@gb477a gb4786@gb477c gb4787@gb477e gb4788@gb4780) (let ((gb4791@_exp* gb4788@gb4780) (gb4792@_kwd* gb4787@gb477e) (gb4793@mod** gb4786@gb477c) (gb4794@rhs* gb4785@gb477a) (gb4795@lex* gb4784@gb4778) (gb4796@mr gb4783@gb4776) (gb4797@r gb4782@gb4774) (gb4798@e* gb4781@gb4772)) (let ((gb47a1@e* (gb313c@expand-interaction-rhs*/init* (reverse gb4795@lex*) (reverse gb4794@rhs*) (append (apply append (reverse gb4793@mod**)) gb4798@e*) gb4797@r gb4796@mr))) (let ((gb47a3@e (if (null? gb47a1@e*) (gb2e6b@gb2dcc@build-void) (if (null? (cdr gb47a1@e*)) (car gb47a1@e*) (gb2e6a@gb2dca@build-sequence '#f gb47a1@e*))))) (values gb47a3@e gb4797@r)))))))) (set! gb4c4c@gb317c@chi-interaction-expr gb317c@chi-interaction-expr) (set! gb317e@library-body-expander (lambda (gb47a5@name gb47a6@main-exp* gb47a7@imp* gb47a8@b* gb47a9@top?) (letrec* ((gb47b0@itc (gb3172@make-collector))) (let ((gb47b9@gb47b2 gb3178@imp-collector) (gb47ba@gb47b4 gb31fc@top-level-context) (gb47bb@gb47b6 gb47b0@itc) (gb47bc@gb47b8 '#f)) (let ((gb47c1@swap (lambda () (begin (let ((gb47c3@t (gb47b9@gb47b2))) (begin (gb47b9@gb47b2 gb47bb@gb47b6) (set! gb47bb@gb47b6 gb47c3@t))) (let ((gb47c5@t (gb47ba@gb47b4))) (begin (gb47ba@gb47b4 gb47bc@gb47b8) (set! gb47bc@gb47b8 gb47c5@t))))))) (dynamic-wind gb47c1@swap (lambda () (call-with-values (lambda () (gb316e@parse-import-spec* gb47a7@imp*)) (lambda (gb47cb@gb47c8 gb47cc@gb47ca) (let ((gb47cf@subst-labels gb47cc@gb47ca) (gb47d0@subst-names gb47cb@gb47c8)) (let ((gb47d3@rib (gb3170@make-top-rib gb47d0@subst-names gb47cf@subst-labels))) (letrec* ((gb47d6@wrap (lambda (gb4851@x) (make-simple-struct 'stx '5 (list gb4851@x gb2e89@top-mark* (list gb47d3@rib) '()))))) (let ((gb47d7@b* (map gb47d6@wrap gb47a8@b*)) (gb47d8@main-exp* (map gb47d6@wrap gb47a6@main-exp*)) (gb47d9@rtc (gb3172@make-collector)) (gb47da@vtc (gb3172@make-collector))) (let ((gb47e7@gb47e0 gb3174@inv-collector) (gb47e8@gb47e2 gb3176@vis-collector) (gb47e9@gb47e4 gb47d9@rtc) (gb47ea@gb47e6 gb47da@vtc)) (let ((gb47ef@swap (lambda () (begin (let ((gb47f1@t (gb47e7@gb47e0))) (begin (gb47e7@gb47e0 gb47e9@gb47e4) (set! gb47e9@gb47e4 gb47f1@t))) (let ((gb47f3@t (gb47e8@gb47e2))) (begin (gb47e8@gb47e2 gb47ea@gb47e6) (set! gb47ea@gb47e6 gb47f3@t))))))) (dynamic-wind gb47ef@swap (lambda () (call-with-values (lambda () (gb317a@chi-library-internal gb47d7@b* gb47d3@rib gb47a9@top?)) (lambda (gb4801@gb47f6 gb4802@gb47f8 gb4803@gb47fa gb4804@gb47fc gb4805@gb47fe gb4806@gb4800) (let ((gb480d@internal-exp* gb4806@gb4800) (gb480e@rhs* gb4805@gb47fe) (gb480f@lex* gb4804@gb47fc) (gb4810@mr gb4803@gb47fa) (gb4811@r gb4802@gb47f8) (gb4812@init* gb4801@gb47f6)) (call-with-values (lambda () (gb3168@parse-exports (append gb47d8@main-exp* gb480d@internal-exp*))) (lambda (gb481d@gb481a gb481e@gb481c) (let ((gb4821@exp-id* gb481e@gb481c) (gb4822@exp-name* gb481d@gb481a)) (begin (gb2ec1@seal-rib! gb47d3@rib) (let ((gb4825@init* (gb312a@chi-expr* gb4812@init* gb4811@r gb4810@mr))) (let ((gb4827@rhs* (gb313e@chi-rhs* gb480e@rhs* gb4811@r gb4810@mr))) (begin (gb2ec3@unseal-rib! gb47d3@rib) (let ((gb4829@loc* (map gb2e8f@gen-global gb480f@lex*)) (gb482a@export-subst (gb31d6@make-export-subst gb4822@exp-name* gb4821@exp-id*))) (letrec* ((gb482e@errstr '"attempt to export mutated variable")) (call-with-values (lambda () (gb31d8@make-export-env/macros gb480f@lex* gb4829@loc* gb4811@r)) (lambda (gb4835@gb4830 gb4836@gb4832 gb4837@gb4834) (let ((gb483b@macro* gb4837@gb4834) (gb483c@global* gb4836@gb4832) (gb483d@export-env gb4835@gb4830)) (begin (for-each (lambda (gb4841@s) (let ((gb4843@name (car gb4841@s)) (gb4844@label (cdr gb4841@s))) (let ((gb4847@p (assq gb4844@label gb483d@export-env))) (if gb4847@p (let ((gb4849@b (cdr gb4847@p))) (let ((gb484b@type (car gb4849@b))) (if (eq? gb484b@type 'mutable) (gb31ec@syntax-violation 'export gb482e@errstr gb4843@name) (void)))) (void))))) gb482a@export-subst) (let ((gb484d@invoke-body (gb2e70@gb2dd6@build-library-letrec* '#f gb47a5@name gb480f@lex* gb4829@loc* gb4827@rhs* (if (null? gb4825@init*) (gb2e6b@gb2dcc@build-void) (gb2e6a@gb2dca@build-sequence '#f gb4825@init*)))) (gb484e@invoke-definitions (map gb2e67@gb2d29@build-global-define (map cdr gb483c@global*)))) (values (gb47b0@itc) (gb47d9@rtc) (gb47da@vtc) (gb2e6a@gb2dca@build-sequence '#f (append gb484e@invoke-definitions (list gb484d@invoke-body))) gb483b@macro* gb482a@export-subst gb483d@export-env))))))))))))))))))) gb47ef@swap)))))))))) gb47c1@swap)))))) (set! gb4c4d@gb317e@library-body-expander gb317e@library-body-expander) (set! gb3180@core-library-expander (lambda (gb4853@e gb4854@verify-name) (call-with-values (lambda () (gb316c@parse-library gb4853@e)) (lambda (gb485f@gb4858 gb4860@gb485a gb4861@gb485c gb4862@gb485e) (let ((gb4867@b* gb4862@gb485e) (gb4868@imp* gb4861@gb485c) (gb4869@exp* gb4860@gb485a) (gb486a@name* gb485f@gb4858)) (call-with-values (lambda () (gb316a@parse-library-name gb486a@name*)) (lambda (gb4873@gb4870 gb4874@gb4872) (let ((gb4877@ver gb4874@gb4872) (gb4878@name gb4873@gb4870)) (begin (gb4854@verify-name gb4878@name) (call-with-values (lambda () (gb317e@library-body-expander gb4878@name gb4869@exp* gb4868@imp* gb4867@b* '#f)) (lambda (gb4889@gb487c gb488a@gb487e gb488b@gb4880 gb488c@gb4882 gb488d@gb4884 gb488e@gb4886 gb488f@gb4888) (let ((gb4897@export-env gb488f@gb4888) (gb4898@export-subst gb488e@gb4886) (gb4899@visit-code gb488d@gb4884) (gb489a@invoke-code gb488c@gb4882) (gb489b@visit-req* gb488b@gb4880) (gb489c@invoke-req* gb488a@gb487e) (gb489d@imp* gb4889@gb487c)) (values gb4878@name gb4877@ver gb489d@imp* gb489c@invoke-req* gb489b@visit-req* gb489a@invoke-code gb4899@visit-code gb4898@export-subst gb4897@export-env))))))))))))) (set! gb4c4e@gb3180@core-library-expander gb3180@core-library-expander) (set! gb3182@parse-top-level-program (lambda (gb48a5@e*) (let ((gb48a7@t gb48a5@e*)) (let ((gb48a9@ls/false (gb310c@syntax-dispatch gb48a7@t '((any . each-any) . each-any)))) (if (and gb48a9@ls/false (apply (lambda (gb48ab@import gb48ac@imp* gb48ad@b*) (eq? (gb31f2@syntax->datum gb48ab@import) 'import)) gb48a9@ls/false)) (apply (lambda (gb48b1@import gb48b2@imp* gb48b3@b*) (values gb48b2@imp* gb48b3@b*)) gb48a9@ls/false) (let ((gb48b7@t gb48a7@t)) (let ((gb48b9@ls/false (gb310c@syntax-dispatch gb48b7@t '((any . any) . any)))) (if (and gb48b9@ls/false (apply (lambda (gb48bb@import gb48bc@x gb48bd@y) (eq? (gb31f2@syntax->datum gb48bb@import) 'import)) gb48b9@ls/false)) (apply (lambda (gb48c1@import gb48c2@x gb48c3@y) (gb31ec@syntax-violation 'expander '"invalid syntax of top-level program" (gb2eff@syntax-car gb48a5@e*))) gb48b9@ls/false) (let ((gb48c7@t gb48b7@t)) (let ((gb48c9@ls/false (gb310c@syntax-dispatch gb48c7@t '_))) (if gb48c9@ls/false (apply (lambda () (assertion-violation 'expander '"top-level program is missing an (import ---) clause")) gb48c9@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb48c7@t)))))))))))) (set! gb4c4f@gb3182@parse-top-level-program gb3182@parse-top-level-program) (set! gb3184@top-level-expander (lambda (gb48cb@e*) (call-with-values (lambda () (gb3182@parse-top-level-program gb48cb@e*)) (lambda (gb48d1@gb48ce gb48d2@gb48d0) (let ((gb48d5@b* gb48d2@gb48d0) (gb48d6@imp* gb48d1@gb48ce)) (call-with-values (lambda () (gb317e@library-body-expander '() '() gb48d6@imp* gb48d5@b* '#t)) (lambda (gb48e7@gb48da gb48e8@gb48dc gb48e9@gb48de gb48ea@gb48e0 gb48eb@gb48e2 gb48ec@gb48e4 gb48ed@gb48e6) (let ((gb48f5@export-env gb48ed@gb48e6) (gb48f6@export-subst gb48ec@gb48e4) (gb48f7@visit-code gb48eb@gb48e2) (gb48f8@invoke-code gb48ea@gb48e0) (gb48f9@visit-req* gb48e9@gb48de) (gb48fa@invoke-req* gb48e8@gb48dc) (gb48fb@imp* gb48e7@gb48da)) (values gb48fa@invoke-req* gb48f8@invoke-code))))))))) (set! gb4c50@gb3184@top-level-expander gb3184@top-level-expander) (set! gb3186@rp (gb2a52@gb292d@make-record-printer 'env (lambda (gb4903@x gb4904@p gb4905@wr) (display '"#<environment>" gb4904@p)))) (set! gb4c51@gb3186@rp gb3186@rp) (set! gb3190@env? (lambda (gb4909@x) (and (simple-struct? gb4909@x) (eq? (simple-struct-name gb4909@x) 'env)))) (set! gb4c52@gb3190@env? gb3190@env?) (set! gb3192@env-names (lambda (gb490b@x) (simple-struct-ref gb490b@x '0))) (set! gb4c53@gb3192@env-names gb3192@env-names) (set! gb3194@set-env-names! (lambda (gb490d@x gb490e@val) (simple-struct-set! gb490d@x '0 gb490e@val))) (set! gb4c54@gb3194@set-env-names! gb3194@set-env-names!) (set! gb3196@env-labels (lambda (gb4911@x) (simple-struct-ref gb4911@x '1))) (set! gb4c55@gb3196@env-labels gb3196@env-labels) (set! gb3198@set-env-labels! (lambda (gb4913@x gb4914@val) (simple-struct-set! gb4913@x '1 gb4914@val))) (set! gb4c56@gb3198@set-env-labels! gb3198@set-env-labels!) (set! gb319a@env-itc (lambda (gb4917@x) (simple-struct-ref gb4917@x '2))) (set! gb4c57@gb319a@env-itc gb319a@env-itc) (set! gb319c@set-env-itc! (lambda (gb4919@x gb491a@val) (simple-struct-set! gb4919@x '2 gb491a@val))) (set! gb4c58@gb319c@set-env-itc! gb319c@set-env-itc!) (set! gb319e@dummy '3) (set! gb4c59@gb319e@dummy gb319e@dummy) (set! gb31a0@rp (gb2a52@gb292d@make-record-printer 'interaction-env (lambda (gb491d@x gb491e@p gb491f@wr) (display '"#<environment>" gb491e@p)))) (set! gb4c5a@gb31a0@rp gb31a0@rp) (set! gb31aa@interaction-env? (lambda (gb4923@x) (and (simple-struct? gb4923@x) (eq? (simple-struct-name gb4923@x) 'interaction-env)))) (set! gb4c5b@gb31aa@interaction-env? gb31aa@interaction-env?) (set! gb31ac@interaction-env-rib (lambda (gb4925@x) (simple-struct-ref gb4925@x '0))) (set! gb4c5c@gb31ac@interaction-env-rib gb31ac@interaction-env-rib) (set! gb31ae@set-interaction-env-rib! (lambda (gb4927@x gb4928@val) (simple-struct-set! gb4927@x '0 gb4928@val))) (set! gb4c5d@gb31ae@set-interaction-env-rib! gb31ae@set-interaction-env-rib!) (set! gb31b0@interaction-env-r (lambda (gb492b@x) (simple-struct-ref gb492b@x '1))) (set! gb4c5e@gb31b0@interaction-env-r gb31b0@interaction-env-r) (set! gb31b2@set-interaction-env-r! (lambda (gb492d@x gb492e@val) (simple-struct-set! gb492d@x '1 gb492e@val))) (set! gb4c5f@gb31b2@set-interaction-env-r! gb31b2@set-interaction-env-r!) (set! gb31b4@interaction-env-locs (lambda (gb4931@x) (simple-struct-ref gb4931@x '2))) (set! gb4c60@gb31b4@interaction-env-locs gb31b4@interaction-env-locs) (set! gb31b6@set-interaction-env-locs! (lambda (gb4933@x gb4934@val) (simple-struct-set! gb4933@x '2 gb4934@val))) (set! gb4c61@gb31b6@set-interaction-env-locs! gb31b6@set-interaction-env-locs!) (set! gb31b8@dummy '3) (set! gb4c62@gb31b8@dummy gb31b8@dummy) (set! gb31ba@interaction-environment-symbols (lambda () (gb31c2@environment-symbols (gb31fa@interaction-environment)))) (set! gb4c63@gb31ba@interaction-environment-symbols gb31ba@interaction-environment-symbols) (set! gb31bc@environment-bindings (lambda (gb4937@e) (vector->list (vector-map (lambda (gb4939@name gb493a@label) (gb31be@parse-binding (cons gb4939@name (gb2d20@gb2b6d@imported-label->binding gb493a@label)))) (gb3192@env-names gb4937@e) (gb3196@env-labels gb4937@e))))) (set! gb4c64@gb31bc@environment-bindings gb31bc@environment-bindings) (set! gb31be@parse-binding (lambda (gb493d@b) (cons (car gb493d@b) (let ((gb493f@t (cadr gb493d@b))) (if (memv gb493f@t '(core-prim global)) 'procedure (if (memv gb493f@t '(core-macro macro global-macro)) 'syntax (if (memv gb493f@t '($core-rtd)) 'record (if (eq? (car gb493d@b) (cadr gb493d@b)) 'syntax 'unknown)))))))) (set! gb4c65@gb31be@parse-binding gb31be@parse-binding) (set! gb31c0@environment? (lambda (gb4941@x) (or (gb3190@env? gb4941@x) (gb31aa@interaction-env? gb4941@x)))) (set! gb4c66@gb31c0@environment? gb31c0@environment?) (set! gb31c2@environment-symbols (lambda (gb4943@x) (if (gb3190@env? gb4943@x) (vector->list (gb3192@env-names gb4943@x)) (if (gb31aa@interaction-env? gb4943@x) (map values (gb2ea3@rib-sym* (gb31ac@interaction-env-rib gb4943@x))) (assertion-violation 'environment-symbols '"not an environment" gb4943@x))))) (set! gb4c67@gb31c2@environment-symbols gb31c2@environment-symbols) (set! gb31c4@environment (lambda gb4945@imp* (let ((gb4947@itc (gb3172@make-collector))) (let ((gb494d@gb494a gb3178@imp-collector) (gb494e@gb494c gb4947@itc)) (let ((gb4951@swap (lambda () (let ((gb4953@t (gb494d@gb494a))) (begin (gb494d@gb494a gb494e@gb494c) (set! gb494e@gb494c gb4953@t)))))) (dynamic-wind gb4951@swap (lambda () (call-with-values (lambda () (gb316e@parse-import-spec* gb4945@imp*)) (lambda (gb4959@gb4956 gb495a@gb4958) (let ((gb495d@subst-labels gb495a@gb4958) (gb495e@subst-names gb4959@gb4956)) (make-simple-struct 'env '4 (list gb495e@subst-names gb495d@subst-labels gb4947@itc)))))) gb4951@swap)))))) (set! gb4c68@gb31c4@environment gb31c4@environment) (set! gb31c6@null-environment (lambda (gb4961@n) (begin (if (not (eqv? gb4961@n '5)) (assertion-violation 'null-environment '"not 5" gb4961@n) (void)) (gb31c4@environment '(psyntax null-environment-5))))) (set! gb4c69@gb31c6@null-environment gb31c6@null-environment) (set! gb31c8@scheme-report-environment (lambda (gb4963@n) (begin (if (not (eqv? gb4963@n '5)) (assertion-violation 'scheme-report-environment '"not 5" gb4963@n) (void)) (gb31c4@environment '(psyntax scheme-report-environment-5))))) (set! gb4c6a@gb31c8@scheme-report-environment gb31c8@scheme-report-environment) (set! gb31ca@expand (lambda (gb4965@x gb4966@env) (if (gb3190@env? gb4966@env) (let ((gb4969@rib (gb3170@make-top-rib (gb3192@env-names gb4966@env) (gb3196@env-labels gb4966@env)))) (let ((gb496b@x (make-simple-struct 'stx '5 (list gb4965@x gb2e89@top-mark* (list gb4969@rib) '()))) (gb496c@itc (gb319a@env-itc gb4966@env)) (gb496d@rtc (gb3172@make-collector)) (gb496e@vtc (gb3172@make-collector))) (let ((gb4973@x (let ((gb4985@gb4976 gb31fc@top-level-context) (gb4986@gb4978 gb3174@inv-collector) (gb4987@gb497a gb3176@vis-collector) (gb4988@gb497c gb3178@imp-collector) (gb4989@gb497e '#f) (gb498a@gb4980 gb496d@rtc) (gb498b@gb4982 gb496e@vtc) (gb498c@gb4984 gb496c@itc)) (let ((gb4995@swap (lambda () (begin (let ((gb4997@t (gb4985@gb4976))) (begin (gb4985@gb4976 gb4989@gb497e) (set! gb4989@gb497e gb4997@t))) (let ((gb4999@t (gb4986@gb4978))) (begin (gb4986@gb4978 gb498a@gb4980) (set! gb498a@gb4980 gb4999@t))) (let ((gb499b@t (gb4987@gb497a))) (begin (gb4987@gb497a gb498b@gb4982) (set! gb498b@gb4982 gb499b@t))) (let ((gb499d@t (gb4988@gb497c))) (begin (gb4988@gb497c gb498c@gb4984) (set! gb498c@gb4984 gb499d@t))))))) (dynamic-wind gb4995@swap (lambda () (gb312e@chi-expr gb496b@x '() '())) gb4995@swap))))) (begin (gb2ec1@seal-rib! gb4969@rib) (values gb4973@x (gb496d@rtc)))))) (if (gb31aa@interaction-env? gb4966@env) (let ((gb499f@rib (gb31ac@interaction-env-rib gb4966@env)) (gb49a0@r (gb31b0@interaction-env-r gb4966@env)) (gb49a1@rtc (gb3172@make-collector))) (let ((gb49a5@x (make-simple-struct 'stx '5 (list gb4965@x gb2e89@top-mark* (list gb499f@rib) '())))) (call-with-values (lambda () (let ((gb49bb@gb49ac gb31fc@top-level-context) (gb49bc@gb49ae gb3174@inv-collector) (gb49bd@gb49b0 gb3176@vis-collector) (gb49be@gb49b2 gb3178@imp-collector) (gb49bf@gb49b4 gb4966@env) (gb49c0@gb49b6 gb49a1@rtc) (gb49c1@gb49b8 (gb3172@make-collector)) (gb49c2@gb49ba (gb3172@make-collector))) (let ((gb49cb@swap (lambda () (begin (let ((gb49cd@t (gb49bb@gb49ac))) (begin (gb49bb@gb49ac gb49bf@gb49b4) (set! gb49bf@gb49b4 gb49cd@t))) (let ((gb49cf@t (gb49bc@gb49ae))) (begin (gb49bc@gb49ae gb49c0@gb49b6) (set! gb49c0@gb49b6 gb49cf@t))) (let ((gb49d1@t (gb49bd@gb49b0))) (begin (gb49bd@gb49b0 gb49c1@gb49b8) (set! gb49c1@gb49b8 gb49d1@t))) (let ((gb49d3@t (gb49be@gb49b2))) (begin (gb49be@gb49b2 gb49c2@gb49ba) (set! gb49c2@gb49ba gb49d3@t))))))) (dynamic-wind gb49cb@swap (lambda () (gb317c@chi-interaction-expr gb49a5@x gb499f@rib gb49a0@r)) gb49cb@swap)))) (lambda (gb49d5@gb49a8 gb49d6@gb49aa) (let ((gb49d9@r^ gb49d6@gb49aa) (gb49da@e gb49d5@gb49a8)) (begin (gb31b2@set-interaction-env-r! gb4966@env gb49d9@r^) (values gb49da@e (gb49a1@rtc)))))))) (assertion-violation 'expand '"not an environment" gb4966@env))))) (set! gb4c6b@gb31ca@expand gb31ca@expand) (set! gb31cc@eval (lambda (gb49dd@x gb49de@env) (begin (if (not (gb31c0@environment? gb49de@env)) (error 'eval '"not an environment" gb49de@env) (void)) (call-with-values (lambda () (gb31ca@expand gb49dd@x gb49de@env)) (lambda (gb49e5@gb49e2 gb49e6@gb49e4) (let ((gb49e9@invoke-req* gb49e6@gb49e4) (gb49ea@x gb49e5@gb49e2)) (begin (for-each gb2d21@gb2b6f@invoke-library gb49e9@invoke-req*) (eval-core (gb2aab@gb2a63@expanded->core gb49ea@x))))))))) (set! gb4c6c@gb31cc@eval gb31cc@eval) (set! gb31ce@library-expander (lambda gb4a5b (let ((gb4a5c (length gb4a5b))) (if (= gb4a5c '3) (apply (lambda (gb49ed@x gb49ee@filename gb49ef@verify-name) (letrec* ((gb49f4@build-visit-code (lambda (gb4a49@macro*) (if (null? gb4a49@macro*) (gb2e6b@gb2dcc@build-void) (gb2e6a@gb2dca@build-sequence '#f (map (lambda (gb4a4b@x) (let ((gb4a4d@loc (car gb4a4b@x)) (gb4a4e@src (cddr gb4a4b@x))) (list 'set! gb4a4d@loc gb4a4e@src))) gb4a49@macro*))))) (gb49f6@visit! (lambda (gb4a41@macro*) (for-each (lambda (gb4a43@x) (let ((gb4a45@loc (car gb4a43@x)) (gb4a46@proc (cadr gb4a43@x))) (set-symbol-value! gb4a45@loc gb4a46@proc))) gb4a41@macro*)))) (call-with-values (lambda () (gb3180@core-library-expander gb49ed@x gb49ef@verify-name)) (lambda (gb4a09@gb49f8 gb4a0a@gb49fa gb4a0b@gb49fc gb4a0c@gb49fe gb4a0d@gb4a00 gb4a0e@gb4a02 gb4a0f@gb4a04 gb4a10@gb4a06 gb4a11@gb4a08) (let ((gb4a1b@export-env gb4a11@gb4a08) (gb4a1c@export-subst gb4a10@gb4a06) (gb4a1d@macro* gb4a0f@gb4a04) (gb4a1e@invoke-code gb4a0e@gb4a02) (gb4a1f@vis* gb4a0d@gb4a00) (gb4a20@inv* gb4a0c@gb49fe) (gb4a21@imp* gb4a0b@gb49fc) (gb4a22@ver gb4a0a@gb49fa) (gb4a23@name gb4a09@gb49f8)) (let ((gb4a2d@id (gensym)) (gb4a2e@name gb4a23@name) (gb4a2f@ver gb4a22@ver) (gb4a30@imp* (map gb2d25@gb2b77@library-spec gb4a21@imp*)) (gb4a31@vis* (map gb2d25@gb2b77@library-spec gb4a1f@vis*)) (gb4a32@inv* (map gb2d25@gb2b77@library-spec gb4a20@inv*)) (gb4a33@visit-proc (lambda () (gb49f6@visit! gb4a1d@macro*))) (gb4a34@invoke-proc (lambda () (eval-core (gb2aab@gb2a63@expanded->core gb4a1e@invoke-code)))) (gb4a35@visit-code (gb49f4@build-visit-code gb4a1d@macro*)) (gb4a36@invoke-code gb4a1e@invoke-code)) (begin (gb2d1f@gb2b6b@install-library gb4a2d@id gb4a2e@name gb4a2f@ver gb4a30@imp* gb4a31@vis* gb4a32@inv* gb4a1c@export-subst gb4a1b@export-env gb4a33@visit-proc gb4a34@invoke-proc gb4a35@visit-code gb4a36@invoke-code '#t gb49ee@filename) (values gb4a2d@id gb4a2e@name gb4a2f@ver gb4a30@imp* gb4a31@vis* gb4a32@inv* gb4a36@invoke-code gb4a35@visit-code gb4a1c@export-subst gb4a1b@export-env)))))))) gb4a5b) (if (= gb4a5c '2) (apply (lambda (gb4a51@x gb4a52@filename) (gb31ce@library-expander gb4a51@x gb4a52@filename (lambda (gb4a55@x) (values)))) gb4a5b) (if (= gb4a5c '1) (apply (lambda (gb4a57@x) (gb31ce@library-expander gb4a57@x '#f (lambda (gb4a59@x) (values)))) gb4a5b) (error 'apply '"invalid arg count"))))))) (set! gb4c6d@gb31ce@library-expander gb31ce@library-expander) (set! gb31d0@boot-library-expand (lambda (gb4a5d@x) (call-with-values (lambda () (gb31ce@library-expander gb4a5d@x)) (lambda (gb4a73@gb4a60 gb4a74@gb4a62 gb4a75@gb4a64 gb4a76@gb4a66 gb4a77@gb4a68 gb4a78@gb4a6a gb4a79@gb4a6c gb4a7a@gb4a6e gb4a7b@gb4a70 gb4a7c@gb4a72) (let ((gb4a87@export-env gb4a7c@gb4a72) (gb4a88@export-subst gb4a7b@gb4a70) (gb4a89@visit-code gb4a7a@gb4a6e) (gb4a8a@invoke-code gb4a79@gb4a6c) (gb4a8b@inv* gb4a78@gb4a6a) (gb4a8c@vis* gb4a77@gb4a68) (gb4a8d@imp* gb4a76@gb4a66) (gb4a8e@ver gb4a75@gb4a64) (gb4a8f@name gb4a74@gb4a62) (gb4a90@id gb4a73@gb4a60)) (values gb4a8f@name gb4a8a@invoke-code gb4a88@export-subst gb4a87@export-env)))))) (set! gb4c6e@gb31d0@boot-library-expand gb31d0@boot-library-expand) (set! gb31d2@rev-map-append (lambda (gb4a9b@f gb4a9c@ls gb4a9d@ac) (if (null? gb4a9c@ls) gb4a9d@ac (gb31d2@rev-map-append gb4a9b@f (cdr gb4a9c@ls) (cons (gb4a9b@f (car gb4a9c@ls)) gb4a9d@ac))))) (set! gb4c6f@gb31d2@rev-map-append gb31d2@rev-map-append) (set! gb31d4@build-exports (lambda (gb4aa1@lex*+loc* gb4aa2@init*) (gb2e6a@gb2dca@build-sequence '#f (cons (gb2e6b@gb2dcc@build-void) (gb31d2@rev-map-append (lambda (gb4aa5@x) (list 'set! (cdr gb4aa5@x) (car gb4aa5@x))) gb4aa1@lex*+loc* gb4aa2@init*))))) (set! gb4c70@gb31d4@build-exports gb31d4@build-exports) (set! gb31d6@make-export-subst (lambda (gb4aa7@name* gb4aa8@id*) (map (lambda (gb4aab@name gb4aac@id) (let ((gb4aaf@label (gb2f1b@id->label gb4aac@id))) (begin (if (not gb4aaf@label) (gb31ec@syntax-violation '#f '"cannot export unbound identifier" gb4aac@id) (void)) (cons gb4aab@name gb4aaf@label)))) gb4aa7@name* gb4aa8@id*))) (set! gb4c71@gb31d6@make-export-subst gb31d6@make-export-subst) (set! gb31d8@make-export-env/macros (lambda (gb4ab1@lex* gb4ab2@loc* gb4ab3@r) (letrec* ((gb4ab8@lookup (lambda (gb4ad5@x) (let gb4add@f ((gb4ad7@x gb4ad5@x) (gb4ad8@lex* gb4ab1@lex*) (gb4ad9@loc* gb4ab2@loc*)) (if (pair? gb4ad8@lex*) (if (eq? gb4ad7@x (car gb4ad8@lex*)) (car gb4ad9@loc*) (gb4add@f gb4ad7@x (cdr gb4ad8@lex*) (cdr gb4ad9@loc*))) (assertion-violation 'lookup-make-export '"BUG")))))) (let gb4ac1@f ((gb4ab9@r gb4ab3@r) (gb4aba@env '()) (gb4abb@global* '()) (gb4abc@macro* '())) (if (null? gb4ab9@r) (values gb4aba@env gb4abb@global* gb4abc@macro*) (let ((gb4ac3@x (car gb4ab9@r))) (let ((gb4ac5@label (car gb4ac3@x)) (gb4ac6@b (cdr gb4ac3@x))) (let ((gb4ac9@t (gb2f21@binding-type gb4ac6@b))) (if (memv gb4ac9@t '(lexical)) (let ((gb4acb@v (gb2f23@binding-value gb4ac6@b))) (let ((gb4acd@loc (gb4ab8@lookup (gb3096@lexical-var gb4acb@v))) (gb4ace@type (if (gb3098@lexical-mutable? gb4acb@v) 'mutable 'global))) (gb4ac1@f (cdr gb4ab9@r) (cons (cons* gb4ac5@label gb4ace@type gb4acd@loc) gb4aba@env) (cons (cons (gb3096@lexical-var gb4acb@v) gb4acd@loc) gb4abb@global*) gb4abc@macro*))) (if (memv gb4ac9@t '(local-macro)) (let ((gb4ad1@loc (gensym))) (gb4ac1@f (cdr gb4ab9@r) (cons (cons* gb4ac5@label 'global-macro gb4ad1@loc) gb4aba@env) gb4abb@global* (cons (cons gb4ad1@loc (gb2f23@binding-value gb4ac6@b)) gb4abc@macro*))) (if (memv gb4ac9@t '(local-macro!)) (let ((gb4ad3@loc (gensym))) (gb4ac1@f (cdr gb4ab9@r) (cons (cons* gb4ac5@label 'global-macro! gb4ad3@loc) gb4aba@env) gb4abb@global* (cons (cons gb4ad3@loc (gb2f23@binding-value gb4ac6@b)) gb4abc@macro*))) (if (memv gb4ac9@t '($rtd $module)) (gb4ac1@f (cdr gb4ab9@r) (cons gb4ac3@x gb4aba@env) gb4abb@global* gb4abc@macro*) (assertion-violation 'expander '"BUG: do not know how to export" (gb2f21@binding-type gb4ac6@b) (gb2f23@binding-value gb4ac6@b)))))))))))))) (set! gb4c72@gb31d8@make-export-env/macros gb31d8@make-export-env/macros) (set! gb31da@generate-temporaries (lambda (gb4adf@ls) (let ((gb4ae1@t gb4adf@ls)) (let ((gb4ae3@ls/false (gb310c@syntax-dispatch gb4ae1@t 'each-any))) (if gb4ae3@ls/false (apply (lambda (gb4ae5@ls) (map (lambda (gb4ae7@x) (make-simple-struct 'stx '5 (list (let ((gb4ae9@x (gb31f2@syntax->datum gb4ae7@x))) (if (or (symbol? gb4ae9@x) (string? gb4ae9@x)) (gensym gb4ae9@x) (gensym 't))) gb2e89@top-mark* '() '()))) gb4ae5@ls)) gb4ae3@ls/false) (let ((gb4aeb@t gb4ae1@t)) (let ((gb4aed@ls/false (gb310c@syntax-dispatch gb4aeb@t '_))) (if gb4aed@ls/false (apply (lambda () (assertion-violation 'generate-temporaries '"not a list")) gb4aed@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb4aeb@t))))))))) (set! gb4c73@gb31da@generate-temporaries gb31da@generate-temporaries) (set! gb31dc@free-identifier=? (lambda (gb4aef@x gb4af0@y) (if (gb2f05@id? gb4aef@x) (if (gb2f05@id? gb4af0@y) (gb2f0b@free-id=? gb4aef@x gb4af0@y) (assertion-violation 'free-identifier=? '"not an identifier" gb4af0@y)) (assertion-violation 'free-identifier=? '"not an identifier" gb4aef@x)))) (set! gb4c74@gb31dc@free-identifier=? gb31dc@free-identifier=?) (set! gb31de@bound-identifier=? (lambda (gb4af3@x gb4af4@y) (if (gb2f05@id? gb4af3@x) (if (gb2f05@id? gb4af4@y) (gb2f09@bound-id=? gb4af3@x gb4af4@y) (assertion-violation 'bound-identifier=? '"not an identifier" gb4af4@y)) (assertion-violation 'bound-identifier=? '"not an identifier" gb4af3@x)))) (set! gb4c75@gb31de@bound-identifier=? gb31de@bound-identifier=?) (set! gb31e0@make-source-condition (lambda (gb4af7@x) (letrec* ((gb4b01@gb4afc (make-record-type-descriptor '&source-information &condition-rtd 'gb4aff '#f '#f '#((immutable file-name) (immutable line)))) (gb4b03@gb4afe '#f) (gb4b05@gb4afd (make-record-constructor-descriptor gb4b01@gb4afc &condition-rcd gb4b03@gb4afe)) (gb4b08@gb4afb (record-predicate gb4b01@gb4afc)) (gb4b0a@make-source-condition (record-constructor gb4b05@gb4afd)) (gb4b0c@gb4af9 (record-accessor gb4b01@gb4afc '0)) (gb4b0e@gb4afa (record-accessor gb4b01@gb4afc '1)) (gb4b10@source-condition? (condition-predicate gb4b01@gb4afc)) (gb4b12@source-filename (condition-accessor gb4b01@gb4afc gb4b0c@gb4af9)) (gb4b14@source-character (condition-accessor gb4b01@gb4afc gb4b0e@gb4afa))) (if (and (pair? gb4af7@x) (pair? (cdr gb4af7@x))) (gb4b0a@make-source-condition (car gb4af7@x) (cadr gb4af7@x)) (condition))))) (set! gb4c76@gb31e0@make-source-condition gb31e0@make-source-condition) (set! gb31e2@extract-position-condition (lambda (gb4b15@x) (gb31e0@make-source-condition (gb31e4@expression-position gb4b15@x)))) (set! gb4c77@gb31e2@extract-position-condition gb31e2@extract-position-condition) (set! gb31e4@expression-position (lambda (gb4b17@x) (and (gb2ed1@stx? gb4b17@x) (let ((gb4b19@x (gb2ed3@stx-expr gb4b17@x))) (and (gb2a49@gb291b@annotation? gb4b19@x) (gb2a4a@gb291d@annotation-source gb4b19@x)))))) (set! gb4c78@gb31e4@expression-position gb31e4@expression-position) (set! gb31e6@assertion-error (lambda (gb4b1b@expr gb4b1c@pos) (raise (condition (make-assertion-violation) (make-who-condition 'assert) (make-message-condition '"assertion failed") (make-irritants-condition (list gb4b1b@expr)) (gb31e0@make-source-condition gb4b1c@pos))))) (set! gb4c79@gb31e6@assertion-error gb31e6@assertion-error) (set! gb31e8@syntax-error (lambda (gb4b1f@x . gb4b21@args) (begin (if (not (for-all string? gb4b21@args)) (assertion-violation 'syntax-error '"invalid argument" gb4b21@args) (void)) (raise (condition (make-message-condition (if (null? gb4b21@args) '"invalid syntax" (apply string-append gb4b21@args))) (make-syntax-violation (gb31f2@syntax->datum gb4b1f@x) '#f) (gb31e2@extract-position-condition gb4b1f@x)))))) (set! gb4c7a@gb31e8@syntax-error gb31e8@syntax-error) (set! gb31ea@syntax-violation* (lambda (gb4b23@who gb4b24@msg gb4b25@form gb4b26@condition-object) (begin (if (not (string? gb4b24@msg)) (assertion-violation 'syntax-violation '"message is not a string" gb4b24@msg) (void)) (let ((gb4b2b@who (if (or (string? gb4b23@who) (symbol? gb4b23@who)) gb4b23@who (if (not gb4b23@who) (let ((gb4b2d@t gb4b25@form)) (let ((gb4b2f@ls/false (gb310c@syntax-dispatch gb4b2d@t 'any))) (if (and gb4b2f@ls/false (apply (lambda (gb4b31@id) (gb2f05@id? gb4b31@id)) gb4b2f@ls/false)) (apply (lambda (gb4b33@id) (gb31f2@syntax->datum gb4b33@id)) gb4b2f@ls/false) (let ((gb4b35@t gb4b2d@t)) (let ((gb4b37@ls/false (gb310c@syntax-dispatch gb4b35@t '(any . any)))) (if (and gb4b37@ls/false (apply (lambda (gb4b39@id gb4b3a@rest) (gb2f05@id? gb4b39@id)) gb4b37@ls/false)) (apply (lambda (gb4b3d@id gb4b3e@rest) (gb31f2@syntax->datum gb4b3d@id)) gb4b37@ls/false) (let ((gb4b41@t gb4b35@t)) (let ((gb4b43@ls/false (gb310c@syntax-dispatch gb4b41@t '_))) (if gb4b43@ls/false (apply (lambda () '#f) gb4b43@ls/false) (gb31ec@syntax-violation '#f '"invalid syntax" gb4b41@t)))))))))) (assertion-violation 'syntax-violation '"invalid who argument" gb4b23@who))))) (raise (condition (if gb4b2b@who (make-who-condition gb4b2b@who) (condition)) (make-message-condition gb4b24@msg) gb4b26@condition-object (gb31e2@extract-position-condition gb4b25@form))))))) (set! gb4c7b@gb31ea@syntax-violation* gb31ea@syntax-violation*) (set! gb31ec@syntax-violation (lambda gb4b53 (let ((gb4b54 (length gb4b53))) (if (= gb4b54 '3) (apply (lambda (gb4b45@who gb4b46@msg gb4b47@form) (gb31ec@syntax-violation gb4b45@who gb4b46@msg gb4b47@form '#f)) gb4b53) (if (= gb4b54 '4) (apply (lambda (gb4b4b@who gb4b4c@msg gb4b4d@form gb4b4e@subform) (gb31ea@syntax-violation* gb4b4b@who gb4b4c@msg gb4b4d@form (make-syntax-violation (gb31f2@syntax->datum gb4b4d@form) (gb31f2@syntax->datum gb4b4e@subform)))) gb4b53) (error 'apply '"invalid arg count")))))) (set! gb4c7c@gb31ec@syntax-violation gb31ec@syntax-violation) (set! gb31ee@identifier? (lambda (gb4b55@x) (gb2f05@id? gb4b55@x))) (set! gb4c7d@gb31ee@identifier? gb31ee@identifier?) (set! gb31f0@datum->syntax (lambda (gb4b57@id gb4b58@datum) (if (gb2f05@id? gb4b57@id) (gb2ee5@datum->stx gb4b57@id gb4b58@datum) (assertion-violation 'datum->syntax '"not an identifier" gb4b57@id)))) (set! gb4c7e@gb31f0@datum->syntax gb31f0@datum->syntax) (set! gb31f2@syntax->datum (lambda (gb4b5b@x) (gb2f19@stx->datum gb4b5b@x))) (set! gb4c7f@gb31f2@syntax->datum gb31f2@syntax->datum) (set! gb31f4@ungensym-all (lambda (gb4b5d@code) (if (pair? gb4b5d@code) (cons (gb31f4@ungensym-all (car gb4b5d@code)) (gb31f4@ungensym-all (cdr gb4b5d@code))) (if (symbol? gb4b5d@code) (ungensym gb4b5d@code) gb4b5d@code)))) (set! gb4c80@gb31f4@ungensym-all gb31f4@ungensym-all) (set! gb31f6@compile-r6rs-top-level (lambda (gb4b5f@x*) (call-with-values (lambda () (gb3184@top-level-expander gb4b5f@x*)) (lambda (gb4b65@gb4b62 gb4b66@gb4b64) (let ((gb4b69@invoke-code gb4b66@gb4b64) (gb4b6a@lib* gb4b65@gb4b62)) (lambda () (begin (for-each gb2d21@gb2b6f@invoke-library gb4b6a@lib*) (let ((gb4b6d@expanded (gb2aab@gb2a63@expanded->core gb4b69@invoke-code))) (begin (if (symbol-value 'debug-expand) (format '#t '"psyntax expanded=~a\n" (gb31f4@ungensym-all gb4b6d@expanded)) (void)) (eval-core gb4b6d@expanded)))))))))) (set! gb4c81@gb31f6@compile-r6rs-top-level gb31f6@compile-r6rs-top-level) (set! gb31f8@pre-compile-r6rs-top-level (lambda (gb4b6f@x*) (call-with-values (lambda () (gb3184@top-level-expander gb4b6f@x*)) (lambda (gb4b75@gb4b72 gb4b76@gb4b74) (let ((gb4b79@invoke-code gb4b76@gb4b74) (gb4b7a@lib* gb4b75@gb4b72)) (begin (for-each gb2d21@gb2b6f@invoke-library gb4b7a@lib*) (gb2a53@gb292f@compile-core (gb2aab@gb2a63@expanded->core gb4b79@invoke-code)))))))) (set! gb4c82@gb31f8@pre-compile-r6rs-top-level gb31f8@pre-compile-r6rs-top-level) (set! gb31fa@interaction-environment (let ((gb4b7d@the-env '#f)) (lambda () (or gb4b7d@the-env (let ((gb4b7f@lib (gb2d1a@gb2b61@find-library-by-name '(mosh interaction))) (gb4b80@rib (gb2eb9@make-empty-rib))) (begin (let ((gb4b83@subst (gb2cfc@gb2b25@library-subst gb4b7f@lib))) (begin (gb2ea5@set-rib-sym*! gb4b80@rib (map car gb4b83@subst)) (gb2ea9@set-rib-mark**! gb4b80@rib (map (lambda (gb4b85@x) gb2e89@top-mark*) gb4b83@subst)) (gb2ead@set-rib-label*! gb4b80@rib (map cdr gb4b83@subst)))) (let ((gb4b87@env (make-simple-struct 'interaction-env '4 (list gb4b80@rib '() '())))) (begin (set! gb4b7d@the-env gb4b87@env) gb4b87@env)))))))) (set! gb4c83@gb31fa@interaction-environment gb31fa@interaction-environment) (set! gb31fc@top-level-context (gb2a55@gb2933@make-parameter '#f)) (set! gb4c84@gb31fc@top-level-context gb31fc@top-level-context) (gb2d17@gb2b5b@current-library-expander gb31ce@library-expander))
(begin (begin (gb2aa8@gb2a5d@current-primitive-locations (lambda (gb51ed@x) (let ((gb51ef@t (assq gb51ed@x '((syntax-error . gb4c7a@gb31e8@syntax-error) (syntax-dispatch . gb4c18@gb310c@syntax-dispatch) (load . gb4e04@gb4cab@load) (interaction-environment . gb4c83@gb31fa@interaction-environment) (library-path . gb2d0f@gb2b4b@library-path) (mosh-cache-dir . gb2a56@gb2935@mosh-cache-dir) (make-parameter . gb2a55@gb2933@make-parameter) (make-variable-transformer . gb4bd5@gb2f37@make-variable-transformer) (identifier? . gb4c7d@gb31ee@identifier?) (generate-temporaries . gb4c73@gb31da@generate-temporaries) (free-identifier=? . gb4c74@gb31dc@free-identifier=?) (syntax->datum . gb4c7f@gb31f2@syntax->datum) (datum->syntax . gb4c7e@gb31f0@datum->syntax) (bound-identifier=? . gb4c75@gb31de@bound-identifier=?) (scheme-report-environment . gb4c6a@gb31c8@scheme-report-environment) (null-environment . gb4c69@gb31c6@null-environment) (command-line . gb4e01@gb4ca5@command-line) (eval . gb4c6c@gb31cc@eval) (environment . gb4c68@gb31c4@environment) (syntax-violation . gb4c7c@gb31ec@syntax-violation) (assertion-error . gb4c79@gb31e6@assertion-error))))) (if gb51ef@t (cdr gb51ef@t) '#f)))) (gb2d1f@gb2b6b@install-library 'gb51ca '(mosh interaction) '() '() '() '() '((regexp? . gb518a) (alist->eq-hash-table . gb5186) (format . gb5183) (string-split . gb5169) (%start-process . gb5162) (%call-process . gb5161) (set-current-directory! . gb515d) (expand-path . gb515c) (current-directory . gb515b) (%getpid . gb515a) (%waitpid . gb5159) (simple-struct-name . gb5158) (simple-struct-set! . gb5157) (simple-struct-ref . gb5156) (make-simple-struct . gb5155) (simple-struct? . gb5154) (pointer-ref-c-int64 . gb5153) (pointer-ref-c-int32 . gb5152) (pointer-ref-c-int16 . gb5151) (pointer-ref-c-int8 . gb5150) (pointer-ref-c-uint64 . gb514f) (pointer-ref-c-uint32 . gb514e) (pointer-ref-c-uint16 . gb514d) (pointer-ref-c-uint8 . gb514c) (pointer-set-c-uint64! . gb514b) (pointer-set-c-uint32! . gb514a) (pointer-set-c-uint16! . gb5149) (pointer-set-c-uint8! . gb5148) (pointer-set-c-int64! . gb5147) (pointer-set-c-int32! . gb5146) (pointer-set-c-int16! . gb5145) (pointer-set-c-int8! . gb5144) (pointer-set-c-pointer! . gb5143) (pointer-set-c-double! . gb5142) (pointer-set-c-float! . gb5141) (pointer-set-c-long-long! . gb5140) (pointer-set-c-long! . gb513f) (pointer-set-c-int! . gb513e) (pointer-set-c-short! . gb513d) (pointer-set-c-char! . gb513c) (pointer-ref-c-pointer . gb513b) (pointer-ref-c-double . gb513a) (pointer-ref-c-float . gb5139) (pointer-ref-c-unsigned-long-long . gb5138) (pointer-ref-c-signed-long-long . gb5137) (pointer-ref-c-unsigned-long . gb5136) (pointer-ref-c-signed-long . gb5135) (pointer-ref-c-unsigned-int . gb5134) (pointer-ref-c-signed-int . gb5133) (pointer-ref-c-unsigned-short . gb5132) (pointer-ref-c-signed-short . gb5131) (pointer-ref-c-unsigned-char . gb5130) (pointer-ref-c-signed-char . gb512f) (pointer->integer . gb512e) (integer->pointer . gb512d) (pointer? . gb512c) (shared-errno . gb512b) (%ffi-supported? . gb5124) (%ffi-pointer->string . gb5123) (%ffi-call . gb5122) (%ffi-lookup . gb5121) (%ffi-open . gb5120) (null-terminated-utf8->string . gb511f) (null-terminated-bytevector->string . gb511e) (%exec . gb511d) (%fork . gb511c) (%pipe . gb511b) (p . gb5118) (whereis . gb50fc) (register . gb50fb) (vm-join! . gb50fa) (vm-set-value! . gb50f9) (vm? . gb50f8) (main-vm? . gb50f7) (vm-eval . gb50f6) (vm-self . gb50f5) (vm-start! . gb50f4) (make-vm . gb50f3) (mutex-try-lock! . gb50f2) (mutex-unlock! . gb50f1) (mutex-lock! . gb50f0) (mutex? . gb50ef) (make-mutex . gb50ee) (condition-variable-notify-all! . gb50ed) (condition-variable-notify! . gb50ec) (condition-variable-wait! . gb50eb) (make-condition-variable . gb50ea) (write/ss . gb50e9) (string-upcase . gb50cc) (string-titlecase . gb50cb) (string-normalize-nfkd . gb50ca) (string-normalize-nfkc . gb50c9) (string-normalize-nfd . gb50c8) (string-normalize-nfc . gb50c7) (string-foldcase . gb50c6) (string-downcase . gb50c5) (string-ci>? . gb50c4) (string-ci>=? . gb50c3) (string-ci=? . gb50c2) (string-ci<? . gb50c1) (string-ci<=? . gb50c0) (char-whitespace? . gb50bf) (char-upper-case? . gb50be) (char-title-case? . gb50bd) (char-numeric? . gb50bc) (char-lower-case? . gb50bb) (char-general-category . gb50ba) (char-upcase . gb50b9) (char-titlecase . gb50b8) (char-foldcase . gb50b7) (char-downcase . gb50b6) (char-ci>? . gb50b5) (char-ci>=? . gb50b4) (char-ci=? . gb50b3) (char-ci<? . gb50b2) (char-ci<=? . gb50b1) (char-alphabetic? . gb50b0) (make-variable-transformer . gb2f36) (identifier? . gb31ed) (generate-temporaries . gb31d9) (free-identifier=? . gb31db) (syntax->datum . gb31f1) (datum->syntax . gb31ef) (bound-identifier=? . gb31dd) (record-type-descriptor? . gb50af) (record-predicate . gb50ae) (record-mutator . gb50ad) (record-constructor . gb50ac) (record-accessor . gb50ab) (make-record-type-descriptor . gb50aa) (make-record-constructor-descriptor . gb50a9) (record? . gb50a8) (record-type-uid . gb50a7) (record-type-sealed? . gb50a6) (record-type-parent . gb50a5) (record-type-opaque? . gb50a4) (record-type-name . gb50a3) (record-type-generative? . gb50a2) (record-type-field-names . gb50a1) (record-rtd . gb50a0) (record-field-mutable? . gb509f) (delete-file . gb509e) (file-exists? . gb509d) (vector-sort! . gb509c) (vector-sort . gb509b) (list-sort . gb509a) (symbol-hash . gb5099) (string-ci-hash . gb5098) (string-hash . gb5097) (equal-hash . gb5096) (hashtable-equivalence-function . gb5095) (make-hashtable . gb5094) (hashtable-hash-function . gb5093) (make-eqv-hashtable . gb5092) (make-eq-hashtable . gb5091) (hashtable? . gb5090) (hashtable-update! . gb508f) (hashtable-size . gb508e) (hashtable-set! . gb508d) (hashtable-ref . gb508c) (hashtable-mutable? . gb508b) (hashtable-keys . gb508a) (hashtable-entries . gb5089) (hashtable-delete! . gb5088) (hashtable-copy . gb5087) (hashtable-contains? . gb5086) (hashtable-clear! . gb5085) (call-with-output-file . gb5084) (call-with-input-file . gb5083) (write-char . gb5082) (write . gb5081) (with-output-to-file . gb5080) (with-input-from-file . gb507f) (read-char . gb507e) (read . gb507d) (peek-char . gb507c) (open-output-file . gb507b) (open-input-file . gb507a) (newline . gb5079) (display . gb5078) (close-output-port . gb5077) (close-input-port . gb5076) (eof-object? . gb5075) (eof-object . gb5074) (current-error-port . gb5073) (current-output-port . gb5072) (current-input-port . gb5071) (output-port? . gb5070) (input-port? . gb506f) (utf-8-codec . gb506e) (utf-16-codec . gb506d) (transcoder-error-handling-mode . gb506c) (transcoder-eol-style . gb506b) (transcoder-codec . gb506a) (transcoded-port . gb5069) (textual-port? . gb5068) (string->bytevector . gb5067) (standard-output-port . gb5066) (standard-input-port . gb5065) (standard-error-port . gb5064) (set-port-position! . gb5063) (put-u8 . gb5062) (put-string . gb5061) (put-datum . gb5060) (put-char . gb505f) (put-bytevector . gb505e) (port? . gb505d) (port-transcoder . gb505c) (port-position . gb505b) (port-has-set-port-position!? . gb505a) (port-has-port-position? . gb5059) (port-eof? . gb5058) (output-port-buffer-mode . gb5057) (open-string-output-port . gb5056) (open-string-input-port . gb5055) (open-file-output-port . gb5054) (open-file-input/output-port . gb5053) (open-file-input-port . gb5052) (open-bytevector-output-port . gb5051) (open-bytevector-input-port . gb5050) (native-transcoder . gb504f) (native-eol-style . gb504e) (make-transcoder . gb504d) (latin-1-codec . gb504c) (make-i/o-write-error . gb504b) (make-i/o-read-error . gb504a) (make-i/o-port-error . gb5049) (make-i/o-invalid-position-error . gb5048) (make-i/o-filename-error . gb5047) (make-i/o-file-protection-error . gb5046) (make-i/o-file-is-read-only-error . gb5045) (make-i/o-file-does-not-exist-error . gb5044) (make-i/o-file-already-exists-error . gb5043) (make-i/o-error . gb5042) (make-i/o-encoding-error . gb5041) (make-i/o-decoding-error . gb5040) (make-custom-textual-output-port . gb503f) (make-custom-textual-input/output-port . gb503e) (make-custom-textual-input-port . gb503d) (make-custom-binary-output-port . gb503c) (make-custom-binary-input/output-port . gb503b) (make-custom-binary-input-port . gb503a) (make-bytevector . gb5039) (lookahead-u8 . gb5038) (lookahead-char . gb5037) (i/o-write-error? . gb5036) (i/o-read-error? . gb5035) (i/o-port-error? . gb5034) (i/o-invalid-position-error? . gb5033) (i/o-filename-error? . gb5032) (i/o-file-protection-error? . gb5031) (i/o-file-is-read-only-error? . gb5030) (i/o-file-does-not-exist-error? . gb502f) (i/o-file-already-exists-error? . gb502e) (i/o-error? . gb502d) (i/o-error-position . gb502c) (i/o-error-port . gb502b) (i/o-error-filename . gb502a) (i/o-encoding-error? . gb5029) (i/o-encoding-error-char . gb5028) (i/o-decoding-error? . gb5027) (get-u8 . gb5026) (get-string-n! . gb5025) (get-string-n . gb5024) (get-string-all . gb5023) (get-line . gb5022) (get-datum . gb5021) (get-char . gb5020) (get-bytevector-some . gb501f) (get-bytevector-n! . gb501e) (get-bytevector-n . gb501d) (get-bytevector-all . gb501c) (flush-output-port . gb501b) (close-port . gb501a) (exit . gb5012) (command-line . gb4ca4) (string-fill! . gb5011) (string-set! . gb5010) (set-cdr! . gb500f) (set-car! . gb500e) (remove . gb500d) (remv . gb500c) (remp . gb500b) (remq . gb500a) (partition . gb5009) (memv . gb5008) (memq . gb5007) (memp . gb5006) (member . gb5005) (exists . gb5004) (for-all . gb5003) (fold-right . gb5002) (fold-left . gb5001) (find . gb5000) (filter . gb4fff) (cons* . gb4ffe) (assv . gb4ffd) (assq . gb4ffc) (assp . gb4ffb) (assoc . gb4ffa) (call-with-string-output-port . gb4ff9) (call-with-port . gb4ff8) (call-with-bytevector-output-port . gb4ff7) (bytevector->string . gb4ff6) (buffer-mode? . gb4ff5) (binary-port? . gb4ff4) (with-exception-handler . gb4ff3) (raise-continuable . gb4ff2) (raise . gb4ff1) (eval . gb31cb) (environment . gb31c3) (make-enumeration . gb4ff0) (enum-set=? . gb4fef) (enum-set-universe . gb4fee) (enum-set-union . gb4fed) (enum-set-subset? . gb4fec) (enum-set-projection . gb4feb) (enum-set-member? . gb4fea) (enum-set-intersection . gb4fe9) (enum-set-indexer . gb4fe8) (enum-set-difference . gb4fe7) (enum-set-constructor . gb4fe6) (enum-set-complement . gb4fe5) (enum-set->list . gb4fe4) (who-condition? . gb4fe3) (warning? . gb4fe2) (violation? . gb4fe1) (undefined-violation? . gb4fe0) (syntax-violation? . gb4fdf) (syntax-violation-subform . gb4fde) (syntax-violation-form . gb4fdd) (syntax-violation . gb31eb) (simple-conditions . gb4fdc) (serious-condition? . gb4fdb) (non-continuable-violation? . gb4fda) (message-condition? . gb4fd9) (make-who-condition . gb4fd8) (make-warning . gb4fd7) (make-violation . gb4fd6) (make-undefined-violation . gb4fd5) (make-syntax-violation . gb4fd4) (make-serious-condition . gb4fd3) (make-non-continuable-violation . gb4fd2) (make-message-condition . gb4fd1) (make-lexical-violation . gb4fd0) (make-irritants-condition . gb4fcf) (make-implementation-restriction-violation . gb4fce) (make-error . gb4fcd) (make-assertion-violation . gb4fcc) (lexical-violation? . gb4fcb) (irritants-condition? . gb4fca) (implementation-restriction-violation? . gb4fc9) (error? . gb4fc8) (condition-who . gb4fc7) (condition-predicate . gb4fc6) (condition-message . gb4fc5) (condition-irritants . gb4fc4) (condition-accessor . gb4fc3) (condition . gb4fc2) (assertion-violation? . gb4fc1) (condition? . gb4fc0) (utf32->string . gb4fbf) (utf16->string . gb4fbe) (utf8->string . gb4fbd) (uint-list->bytevector . gb4fbc) (u8-list->bytevector . gb4fbb) (string->utf8 . gb4fba) (string->utf32 . gb4fb9) (string->utf16 . gb4fb8) (sint-list->bytevector . gb4fb7) (native-endianness . gb4fb6) (bytevector? . gb4fb5) (bytevector=? . gb4fb4) (bytevector-uint-set! . gb4fb3) (bytevector-uint-ref . gb4fb2) (bytevector-u8-set! . gb4fb1) (bytevector-u8-ref . gb4fb0) (bytevector-u64-set! . gb4faf) (bytevector-u64-ref . gb4fae) (bytevector-u64-native-set! . gb4fad) (bytevector-u64-native-ref . gb4fac) (bytevector-u32-set! . gb4fab) (bytevector-u32-ref . gb4faa) (bytevector-u32-native-set! . gb4fa9) (bytevector-u32-native-ref . gb4fa8) (bytevector-u16-set! . gb4fa7) (bytevector-u16-ref . gb4fa6) (bytevector-u16-native-set! . gb4fa5) (bytevector-u16-native-ref . gb4fa4) (bytevector-sint-set! . gb4fa3) (bytevector-sint-ref . gb4fa2) (bytevector-s8-set! . gb4fa1) (bytevector-s8-ref . gb4fa0) (bytevector-s64-set! . gb4f9f) (bytevector-s64-ref . gb4f9e) (bytevector-s64-native-set! . gb4f9d) (bytevector-s64-native-ref . gb4f9c) (bytevector-s32-set! . gb4f9b) (bytevector-s32-ref . gb4f9a) (bytevector-s32-native-set! . gb4f99) (bytevector-s32-native-ref . gb4f98) (bytevector-s16-set! . gb4f97) (bytevector-s16-ref . gb4f96) (bytevector-s16-native-set! . gb4f95) (bytevector-s16-native-ref . gb4f94) (bytevector-length . gb4f93) (bytevector-ieee-single-ref . gb4f92) (bytevector-ieee-single-set! . gb4f91) (bytevector-ieee-single-native-set! . gb4f90) (bytevector-ieee-single-native-ref . gb4f8f) (bytevector-ieee-double-set! . gb4f8e) (bytevector-ieee-double-ref . gb4f8d) (bytevector-ieee-double-native-set! . gb4f8c) (bytevector-ieee-double-native-ref . gb4f8b) (bytevector-fill! . gb4f8a) (bytevector-copy! . gb4f89) (bytevector-copy . gb4f88) (bytevector->uint-list . gb4f87) (bytevector->u8-list . gb4f86) (bytevector->sint-list . gb4f85) (no-nans-violation? . gb4f84) (no-infinities-violation? . gb4f83) (make-no-nans-violation . gb4f82) (make-no-infinities-violation . gb4f81) (real->flonum . gb4f80) (flzero? . gb4f7f) (fltruncate . gb4f7e) (fltan . gb4f7d) (flsqrt . gb4f7c) (flsin . gb4f7b) (flround . gb4f7a) (flpositive? . gb4f79) (flonum? . gb4f78) (flodd? . gb4f77) (flnumerator . gb4f76) (flnegative? . gb4f75) (flnan? . gb4f74) (flmod0 . gb4f73) (flmod . gb4f72) (flmin . gb4f71) (flmax . gb4f70) (fllog . gb4f6f) (flinteger? . gb4f6e) (flinfinite? . gb4f6d) (flfloor . gb4f6c) (flfinite? . gb4f6b) (flexpt . gb4f6a) (flexp . gb4f69) (fleven? . gb4f68) (fldiv0-and-mod0 . gb4f67) (fldiv0 . gb4f66) (fldiv-and-mod . gb4f65) (fldiv . gb4f64) (fldenominator . gb4f63) (flcos . gb4f62) (flceiling . gb4f61) (flatan . gb4f60) (flasin . gb4f5f) (flacos . gb4f5e) (flabs . gb4f5d) (fl>? . gb4f5c) (fl>=? . gb4f5b) (fl=? . gb4f5a) (fl<? . gb4f59) (fl<=? . gb4f58) (fl/ . gb4f57) (fl- . gb4f56) (fl+ . gb4f55) (fl* . gb4f54) (fixnum->flonum . gb4f53) (fxzero? . gb4f52) (fxxor . gb4f51) (fxrotate-bit-field . gb4f50) (fxreverse-bit-field . gb4f4f) (fxpositive? . gb4f4e) (fxodd? . gb4f4d) (fxnot . gb4f4c) (fxnegative? . gb4f4b) (fxmod0 . gb4f4a) (fxmod . gb4f49) (fxmin . gb4f48) (fxmax . gb4f47) (fxlength . gb4f46) (fxior . gb4f45) (fxif . gb4f44) (fxfirst-bit-set . gb4f43) (fxeven? . gb4f42) (fxdiv0-and-mod0 . gb4f41) (fxdiv0 . gb4f40) (fxdiv-and-mod . gb4f3f) (fxdiv . gb4f3e) (fxcopy-bit-field . gb4f3d) (fxcopy-bit . gb4f3c) (fxbit-set? . gb4f3b) (fxbit-field . gb4f3a) (fxbit-count . gb4f39) (fxarithmetic-shift-right . gb4f38) (fxarithmetic-shift-left . gb4f37) (fxarithmetic-shift . gb4f36) (fxand . gb4f35) (fx>? . gb4f34) (fx>=? . gb4f33) (fx=? . gb4f32) (fx<? . gb4f31) (fx<=? . gb4f30) (fx-/carry . gb4f2f) (fx- . gb4f2e) (fx+/carry . gb4f2d) (fx+ . gb4f2c) (fx*/carry . gb4f2b) (fx* . gb4f2a) (greatest-fixnum . gb4f29) (least-fixnum . gb4f28) (fixnum-width . gb4f27) (fixnum? . gb4f26) (bitwise-rotate-bit-field . gb4f25) (bitwise-reverse-bit-field . gb4f24) (bitwise-length . gb4f23) (bitwise-if . gb4f22) (bitwise-first-bit-set . gb4f21) (bitwise-copy-bit-field . gb4f20) (bitwise-copy-bit . gb4f1f) (bitwise-bit-set? . gb4f1e) (bitwise-bit-field . gb4f1d) (bitwise-bit-count . gb4f1c) (bitwise-xor . gb4f1b) (bitwise-ior . gb4f1a) (bitwise-and . gb4f19) (bitwise-not . gb4f18) (bitwise-arithmetic-shift-right . gb4f17) (bitwise-arithmetic-shift-left . gb4f16) (bitwise-arithmetic-shift . gb4f15) (zero? . gb4f14) (vector? . gb4f13) (vector-set! . gb4f12) (vector-ref . gb4f11) (vector-map . gb4f10) (vector-length . gb4f0f) (vector-for-each . gb4f0e) (vector-fill! . gb4f0d) (vector->list . gb4f0c) (vector . gb4f0b) (values . gb4f0a) (truncate . gb4f09) (tan . gb4f08) (symbol? . gb4f07) (symbol=? . gb4f06) (symbol->string . gb4f05) (substring . gb4f04) (string? . gb4f03) (string>? . gb4f02) (string>=? . gb4f01) (string=? . gb4f00) (string<? . gb4eff) (string<=? . gb4efe) (string-ref . gb4efd) (string-length . gb4efc) (string-for-each . gb4efb) (string-copy . gb4efa) (string-append . gb4ef9) (string->symbol . gb4ef8) (string->number . gb4ef7) (string->list . gb4ef6) (string . gb4ef5) (sqrt . gb4ef4) (sin . gb4ef3) (round . gb4ef2) (reverse . gb4ef1) (real? . gb4ef0) (real-valued? . gb4eef) (real-part . gb4eee) (rationalize . gb4eed) (rational? . gb4eec) (rational-valued? . gb4eeb) (procedure? . gb4eea) (positive? . gb4ee9) (pair? . gb4ee8) (odd? . gb4ee7) (numerator . gb4ee6) (number? . gb4ee5) (number->string . gb4ee4) (null? . gb4ee3) (not . gb4ee2) (negative? . gb4ee1) (nan? . gb4ee0) (min . gb4edf) (max . gb4ede) (map . gb4edd) (make-vector . gb4edc) (make-string . gb4edb) (make-rectangular . gb4eda) (make-polar . gb4ed9) (magnitude . gb4ed8) (log . gb4ed7) (list? . gb4ed6) (list-tail . gb4ed5) (list-ref . gb4ed4) (list->vector . gb4ed3) (list->string . gb4ed2) (list . gb4ed1) (length . gb4ed0) (lcm . gb4ecf) (integer? . gb4ece) (integer-valued? . gb4ecd) (integer->char . gb4ecc) (infinite? . gb4ecb) (inexact? . gb4eca) (inexact . gb4ec9) (imag-part . gb4ec8) (gcd . gb4ec7) (for-each . gb4ec6) (floor . gb4ec5) (finite? . gb4ec4) (expt . gb4ec3) (exp . gb4ec2) (exact? . gb4ec1) (exact-integer-sqrt . gb4ec0) (exact . gb4ebf) (even? . gb4ebe) (error . gb4ebd) (eqv? . gb4ebc) (equal? . gb4ebb) (eq? . gb4eba) (dynamic-wind . gb4eb9) (div0-and-mod0 . gb4eb8) (mod0 . gb4eb7) (div0 . gb4eb6) (div-and-mod . gb4eb5) (mod . gb4eb4) (div . gb4eb3) (denominator . gb4eb2) (cos . gb4eb1) (cons . gb4eb0) (complex? . gb4eaf) (char? . gb4eae) (char>? . gb4ead) (char>=? . gb4eac) (char=? . gb4eab) (char<? . gb4eaa) (char<=? . gb4ea9) (char->integer . gb4ea8) (ceiling . gb4ea7) (call-with-values . gb4ea6) (call/cc . gb4ea5) (call-with-current-continuation . gb4ea4) (cddddr . gb4ea3) (cdddar . gb4ea2) (cddadr . gb4ea1) (cddaar . gb4ea0) (cdaddr . gb4e9f) (cdadar . gb4e9e) (cdaadr . gb4e9d) (cdaaar . gb4e9c) (cadddr . gb4e9b) (caddar . gb4e9a) (cadadr . gb4e99) (cadaar . gb4e98) (caaddr . gb4e97) (caadar . gb4e96) (caaadr . gb4e95) (caaaar . gb4e94) (cdddr . gb4e93) (cddar . gb4e92) (cdadr . gb4e91) (cdaar . gb4e90) (caddr . gb4e8f) (cadar . gb4e8e) (caadr . gb4e8d) (caaar . gb4e8c) (cddr . gb4e8b) (cdar . gb4e8a) (cadr . gb4e89) (caar . gb4e88) (cdr . gb4e87) (car . gb4e86) (boolean? . gb4e85) (boolean=? . gb4e84) (atan . gb4e83) (assertion-violation . gb4e82) (asin . gb4e81) (apply . gb4e80) (append . gb4e7f) (angle . gb4e7e) (acos . gb4e7d) (abs . gb4e7c) (/ . gb4e7b) (* . gb4e7a) (- . gb4e79) (+ . gb4e78) (>= . gb4e77) (> . gb4e76) (= . gb4e75) (<= . gb4e74) (< . gb4e73) (library . gb4e72) (&no-nans . gb4e71) (&no-infinities . gb4e70) (&i/o-encoding . gb4e6f) (&i/o-decoding . gb4e6e) (&i/o-port . gb4e6d) (&i/o-file-does-not-exist . gb4e6c) (&i/o-file-already-exists . gb4e6b) (&i/o-file-is-read-only . gb4e6a) (&i/o-file-protection . gb4e69) (&i/o-filename . gb4e68) (&i/o-invalid-position . gb4e67) (&i/o-write . gb4e66) (&i/o-read . gb4e65) (&i/o . gb4e64) (&undefined . gb4e63) (&syntax . gb4e62) (&lexical . gb4e61) (&implementation-restriction . gb4e60) (&non-continuable . gb4e5f) (&who . gb4e5e) (&irritants . gb4e5d) (&assertion . gb4e5c) (&violation . gb4e5b) (&error . gb4e5a) (&serious . gb4e59) (&warning . gb4e58) (&message . gb4e57) (&condition . gb4e56) (define-condition-type . gb4e55) (define-enumeration . gb4e54) (define-record-type . gb4e53) (parent-rtd . gb4e52) (nongenerative . gb4e51) (opaque . gb4e50) (sealed . gb4e4f) (protocol . gb4e4e) (parent . gb4e4d) (immutable . gb4e4c) (mutable . gb4e4b) (fields . gb4e4a) (error-handling-mode . gb4e49) (file-options . gb4e48) (buffer-mode . gb4e47) (eol-style . gb4e46) (guard . gb4e45) (unsyntax-splicing . gb4e42) (unsyntax . gb4e41) (unquote-splicing . gb4e40) (unquote . gb4e3f) (_ . gb4e3e) (else . gb4e3d) (=> . gb4e3c) (... . gb4e3b) (assert . gb4e3a) (endianness . gb4e39) (time . gb4e37) (do . gb4e36) (cond . gb4e35) (let* . gb4e34) (let*-values . gb4e33) (let-values . gb4e32) (identifier-syntax . gb4e31) (with-syntax . gb4e30) (quasisyntax . gb4e2f) (quasiquote . gb4e2e) (syntax-rules . gb4e2d) (include . gb4e2c) (record-constructor-descriptor . gb4e2a) (record-type-descriptor . gb4e29) (case . gb4e28) (unless . gb4e26) (when . gb4e25) (or . gb4e24) (and . gb4e23) (if . gb4e22) (let . gb4e21) (letrec* . gb4e20) (letrec . gb4e1f) (case-lambda . gb4e1d) (lambda . gb4e1c) (syntax . gb4e1b) (syntax-case . gb4e1a) (quote . gb4e19) (letrec-syntax . gb4e17) (let-syntax . gb4e16) (set! . gb4e15) (import . gb4e14) (begin . gb4e13) (define-syntax . gb4e11) (define . gb4e10)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51cb '(psyntax null-environment-5) '() '() '() '() '((make-promise . gb5013) (unquote-splicing . gb4e40) (unquote . gb4e3f) (_ . gb4e3e) (else . gb4e3d) (=> . gb4e3c) (... . gb4e3b) (delay . gb4e38) (do . gb4e36) (cond . gb4e35) (let* . gb4e34) (quasiquote . gb4e2e) (syntax-rules . gb4e2d) (case . gb4e28) (or . gb4e24) (and . gb4e23) (if . gb4e22) (let . gb4e21) (letrec . gb4e1f) (lambda . gb4e1c) (quote . gb4e19) (letrec-syntax . gb4e17) (let-syntax . gb4e16) (set! . gb4e15) (begin . gb4e13) (define-syntax . gb4e11) (define . gb4e10)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51cc '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . gb50c4) (string-ci>=? . gb50c3) (string-ci=? . gb50c2) (string-ci<? . gb50c1) (string-ci<=? . gb50c0) (char-whitespace? . gb50bf) (char-upper-case? . gb50be) (char-numeric? . gb50bc) (char-lower-case? . gb50bb) (char-upcase . gb50b9) (char-downcase . gb50b6) (char-ci>? . gb50b5) (char-ci>=? . gb50b4) (char-ci=? . gb50b3) (char-ci<? . gb50b2) (char-ci<=? . gb50b1) (char-alphabetic? . gb50b0) (call-with-output-file . gb5084) (call-with-input-file . gb5083) (write-char . gb5082) (write . gb5081) (with-output-to-file . gb5080) (with-input-from-file . gb507f) (read-char . gb507e) (read . gb507d) (peek-char . gb507c) (open-output-file . gb507b) (open-input-file . gb507a) (newline . gb5079) (display . gb5078) (close-output-port . gb5077) (close-input-port . gb5076) (eof-object . gb5074) (current-output-port . gb5072) (current-input-port . gb5071) (output-port? . gb5070) (input-port? . gb506f) (scheme-report-environment . gb31c7) (quotient . gb5019) (null-environment . gb31c5) (remainder . gb5018) (modulo . gb5017) (inexact->exact . gb5016) (force . gb5015) (exact->inexact . gb5014) (make-promise . gb5013) (string-fill! . gb5011) (string-set! . gb5010) (set-cdr! . gb500f) (set-car! . gb500e) (memv . gb5008) (memq . gb5007) (member . gb5005) (assv . gb4ffd) (assq . gb4ffc) (assoc . gb4ffa) (eval . gb31cb) (zero? . gb4f14) (vector? . gb4f13) (vector-set! . gb4f12) (vector-ref . gb4f11) (vector-length . gb4f0f) (vector-fill! . gb4f0d) (vector->list . gb4f0c) (vector . gb4f0b) (values . gb4f0a) (truncate . gb4f09) (tan . gb4f08) (symbol? . gb4f07) (symbol->string . gb4f05) (substring . gb4f04) (string? . gb4f03) (string>? . gb4f02) (string>=? . gb4f01) (string=? . gb4f00) (string<? . gb4eff) (string<=? . gb4efe) (string-ref . gb4efd) (string-length . gb4efc) (string-copy . gb4efa) (string-append . gb4ef9) (string->symbol . gb4ef8) (string->number . gb4ef7) (string->list . gb4ef6) (string . gb4ef5) (sqrt . gb4ef4) (sin . gb4ef3) (round . gb4ef2) (reverse . gb4ef1) (real? . gb4ef0) (real-part . gb4eee) (rationalize . gb4eed) (rational? . gb4eec) (procedure? . gb4eea) (positive? . gb4ee9) (pair? . gb4ee8) (odd? . gb4ee7) (numerator . gb4ee6) (number? . gb4ee5) (number->string . gb4ee4) (not . gb4ee2) (negative? . gb4ee1) (min . gb4edf) (max . gb4ede) (map . gb4edd) (make-vector . gb4edc) (make-string . gb4edb) (make-rectangular . gb4eda) (make-polar . gb4ed9) (magnitude . gb4ed8) (log . gb4ed7) (list? . gb4ed6) (list-tail . gb4ed5) (list-ref . gb4ed4) (list->vector . gb4ed3) (list->string . gb4ed2) (list . gb4ed1) (length . gb4ed0) (lcm . gb4ecf) (integer? . gb4ece) (integer->char . gb4ecc) (inexact? . gb4eca) (imag-part . gb4ec8) (gcd . gb4ec7) (for-each . gb4ec6) (floor . gb4ec5) (expt . gb4ec3) (exp . gb4ec2) (exact? . gb4ec1) (even? . gb4ebe) (eqv? . gb4ebc) (equal? . gb4ebb) (eq? . gb4eba) (dynamic-wind . gb4eb9) (denominator . gb4eb2) (cos . gb4eb1) (cons . gb4eb0) (complex? . gb4eaf) (char? . gb4eae) (char>? . gb4ead) (char>=? . gb4eac) (char=? . gb4eab) (char<? . gb4eaa) (char<=? . gb4ea9) (char->integer . gb4ea8) (ceiling . gb4ea7) (call-with-values . gb4ea6) (call-with-current-continuation . gb4ea4) (cddddr . gb4ea3) (cdddar . gb4ea2) (cddadr . gb4ea1) (cddaar . gb4ea0) (cdaddr . gb4e9f) (cdadar . gb4e9e) (cdaadr . gb4e9d) (cdaaar . gb4e9c) (cadddr . gb4e9b) (caddar . gb4e9a) (cadadr . gb4e99) (cadaar . gb4e98) (caaddr . gb4e97) (caadar . gb4e96) (caaadr . gb4e95) (caaaar . gb4e94) (cdddr . gb4e93) (cddar . gb4e92) (cdadr . gb4e91) (cdaar . gb4e90) (caddr . gb4e8f) (cadar . gb4e8e) (caadr . gb4e8d) (caaar . gb4e8c) (cddr . gb4e8b) (cdar . gb4e8a) (cadr . gb4e89) (caar . gb4e88) (cdr . gb4e87) (car . gb4e86) (boolean? . gb4e85) (atan . gb4e83) (asin . gb4e81) (apply . gb4e80) (append . gb4e7f) (angle . gb4e7e) (acos . gb4e7d) (abs . gb4e7c) (/ . gb4e7b) (* . gb4e7a) (- . gb4e79) (+ . gb4e78) (>= . gb4e77) (> . gb4e76) (= . gb4e75) (<= . gb4e74) (< . gb4e73) (unquote-splicing . gb4e40) (unquote . gb4e3f) (else . gb4e3d) (=> . gb4e3c) (... . gb4e3b) (delay . gb4e38) (do . gb4e36) (cond . gb4e35) (let* . gb4e34) (quasiquote . gb4e2e) (syntax-rules . gb4e2d) (case . gb4e28) (or . gb4e24) (and . gb4e23) (if . gb4e22) (let . gb4e21) (letrec . gb4e1f) (lambda . gb4e1c) (quote . gb4e19) (letrec-syntax . gb4e17) (let-syntax . gb4e16) (set! . gb4e15) (begin . gb4e13) (define-syntax . gb4e11) (define . gb4e10)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51cd '(psyntax modules) '() '() '() '() '((module . gb4e12)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51ce '(chez parameters) '() '() '() '() '() '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51cf '(rnrs) '(6) '() '() '() '((regexp? . gb518a) (string-upcase . gb50cc) (string-titlecase . gb50cb) (string-normalize-nfkd . gb50ca) (string-normalize-nfkc . gb50c9) (string-normalize-nfd . gb50c8) (string-normalize-nfc . gb50c7) (string-foldcase . gb50c6) (string-downcase . gb50c5) (string-ci>? . gb50c4) (string-ci>=? . gb50c3) (string-ci=? . gb50c2) (string-ci<? . gb50c1) (string-ci<=? . gb50c0) (char-whitespace? . gb50bf) (char-upper-case? . gb50be) (char-title-case? . gb50bd) (char-numeric? . gb50bc) (char-lower-case? . gb50bb) (char-general-category . gb50ba) (char-upcase . gb50b9) (char-titlecase . gb50b8) (char-foldcase . gb50b7) (char-downcase . gb50b6) (char-ci>? . gb50b5) (char-ci>=? . gb50b4) (char-ci=? . gb50b3) (char-ci<? . gb50b2) (char-ci<=? . gb50b1) (char-alphabetic? . gb50b0) (make-variable-transformer . gb2f36) (identifier? . gb31ed) (generate-temporaries . gb31d9) (free-identifier=? . gb31db) (syntax->datum . gb31f1) (datum->syntax . gb31ef) (bound-identifier=? . gb31dd) (record-type-descriptor? . gb50af) (record-predicate . gb50ae) (record-mutator . gb50ad) (record-constructor . gb50ac) (record-accessor . gb50ab) (make-record-type-descriptor . gb50aa) (make-record-constructor-descriptor . gb50a9) (record? . gb50a8) (record-type-uid . gb50a7) (record-type-sealed? . gb50a6) (record-type-parent . gb50a5) (record-type-opaque? . gb50a4) (record-type-name . gb50a3) (record-type-generative? . gb50a2) (record-type-field-names . gb50a1) (record-rtd . gb50a0) (record-field-mutable? . gb509f) (delete-file . gb509e) (file-exists? . gb509d) (vector-sort! . gb509c) (vector-sort . gb509b) (list-sort . gb509a) (symbol-hash . gb5099) (string-ci-hash . gb5098) (string-hash . gb5097) (equal-hash . gb5096) (hashtable-equivalence-function . gb5095) (make-hashtable . gb5094) (hashtable-hash-function . gb5093) (make-eqv-hashtable . gb5092) (make-eq-hashtable . gb5091) (hashtable? . gb5090) (hashtable-update! . gb508f) (hashtable-size . gb508e) (hashtable-set! . gb508d) (hashtable-ref . gb508c) (hashtable-mutable? . gb508b) (hashtable-keys . gb508a) (hashtable-entries . gb5089) (hashtable-delete! . gb5088) (hashtable-copy . gb5087) (hashtable-contains? . gb5086) (hashtable-clear! . gb5085) (call-with-output-file . gb5084) (call-with-input-file . gb5083) (write-char . gb5082) (write . gb5081) (with-output-to-file . gb5080) (with-input-from-file . gb507f) (read-char . gb507e) (read . gb507d) (peek-char . gb507c) (open-output-file . gb507b) (open-input-file . gb507a) (newline . gb5079) (display . gb5078) (close-output-port . gb5077) (close-input-port . gb5076) (eof-object? . gb5075) (eof-object . gb5074) (current-error-port . gb5073) (current-output-port . gb5072) (current-input-port . gb5071) (output-port? . gb5070) (input-port? . gb506f) (utf-8-codec . gb506e) (utf-16-codec . gb506d) (transcoder-error-handling-mode . gb506c) (transcoder-eol-style . gb506b) (transcoder-codec . gb506a) (transcoded-port . gb5069) (textual-port? . gb5068) (string->bytevector . gb5067) (standard-output-port . gb5066) (standard-input-port . gb5065) (standard-error-port . gb5064) (set-port-position! . gb5063) (put-u8 . gb5062) (put-string . gb5061) (put-datum . gb5060) (put-char . gb505f) (put-bytevector . gb505e) (port? . gb505d) (port-transcoder . gb505c) (port-position . gb505b) (port-has-set-port-position!? . gb505a) (port-has-port-position? . gb5059) (port-eof? . gb5058) (output-port-buffer-mode . gb5057) (open-string-output-port . gb5056) (open-string-input-port . gb5055) (open-file-output-port . gb5054) (open-file-input/output-port . gb5053) (open-file-input-port . gb5052) (open-bytevector-output-port . gb5051) (open-bytevector-input-port . gb5050) (native-transcoder . gb504f) (native-eol-style . gb504e) (make-transcoder . gb504d) (latin-1-codec . gb504c) (make-i/o-write-error . gb504b) (make-i/o-read-error . gb504a) (make-i/o-port-error . gb5049) (make-i/o-invalid-position-error . gb5048) (make-i/o-filename-error . gb5047) (make-i/o-file-protection-error . gb5046) (make-i/o-file-is-read-only-error . gb5045) (make-i/o-file-does-not-exist-error . gb5044) (make-i/o-file-already-exists-error . gb5043) (make-i/o-error . gb5042) (make-i/o-encoding-error . gb5041) (make-i/o-decoding-error . gb5040) (make-custom-textual-output-port . gb503f) (make-custom-textual-input/output-port . gb503e) (make-custom-textual-input-port . gb503d) (make-custom-binary-output-port . gb503c) (make-custom-binary-input/output-port . gb503b) (make-custom-binary-input-port . gb503a) (make-bytevector . gb5039) (lookahead-u8 . gb5038) (lookahead-char . gb5037) (i/o-write-error? . gb5036) (i/o-read-error? . gb5035) (i/o-port-error? . gb5034) (i/o-invalid-position-error? . gb5033) (i/o-filename-error? . gb5032) (i/o-file-protection-error? . gb5031) (i/o-file-is-read-only-error? . gb5030) (i/o-file-does-not-exist-error? . gb502f) (i/o-file-already-exists-error? . gb502e) (i/o-error? . gb502d) (i/o-error-position . gb502c) (i/o-error-port . gb502b) (i/o-error-filename . gb502a) (i/o-encoding-error? . gb5029) (i/o-encoding-error-char . gb5028) (i/o-decoding-error? . gb5027) (get-u8 . gb5026) (get-string-n! . gb5025) (get-string-n . gb5024) (get-string-all . gb5023) (get-line . gb5022) (get-datum . gb5021) (get-char . gb5020) (get-bytevector-some . gb501f) (get-bytevector-n! . gb501e) (get-bytevector-n . gb501d) (get-bytevector-all . gb501c) (flush-output-port . gb501b) (close-port . gb501a) (exit . gb5012) (command-line . gb4ca4) (remove . gb500d) (remv . gb500c) (remp . gb500b) (remq . gb500a) (partition . gb5009) (memv . gb5008) (memq . gb5007) (memp . gb5006) (member . gb5005) (exists . gb5004) (for-all . gb5003) (fold-right . gb5002) (fold-left . gb5001) (find . gb5000) (filter . gb4fff) (cons* . gb4ffe) (assv . gb4ffd) (assq . gb4ffc) (assp . gb4ffb) (assoc . gb4ffa) (call-with-string-output-port . gb4ff9) (call-with-port . gb4ff8) (call-with-bytevector-output-port . gb4ff7) (bytevector->string . gb4ff6) (buffer-mode? . gb4ff5) (binary-port? . gb4ff4) (with-exception-handler . gb4ff3) (raise-continuable . gb4ff2) (raise . gb4ff1) (make-enumeration . gb4ff0) (enum-set=? . gb4fef) (enum-set-universe . gb4fee) (enum-set-union . gb4fed) (enum-set-subset? . gb4fec) (enum-set-projection . gb4feb) (enum-set-member? . gb4fea) (enum-set-intersection . gb4fe9) (enum-set-indexer . gb4fe8) (enum-set-difference . gb4fe7) (enum-set-constructor . gb4fe6) (enum-set-complement . gb4fe5) (enum-set->list . gb4fe4) (who-condition? . gb4fe3) (warning? . gb4fe2) (violation? . gb4fe1) (undefined-violation? . gb4fe0) (syntax-violation? . gb4fdf) (syntax-violation-subform . gb4fde) (syntax-violation-form . gb4fdd) (syntax-violation . gb31eb) (simple-conditions . gb4fdc) (serious-condition? . gb4fdb) (non-continuable-violation? . gb4fda) (message-condition? . gb4fd9) (make-who-condition . gb4fd8) (make-warning . gb4fd7) (make-violation . gb4fd6) (make-undefined-violation . gb4fd5) (make-syntax-violation . gb4fd4) (make-serious-condition . gb4fd3) (make-non-continuable-violation . gb4fd2) (make-message-condition . gb4fd1) (make-lexical-violation . gb4fd0) (make-irritants-condition . gb4fcf) (make-implementation-restriction-violation . gb4fce) (make-error . gb4fcd) (make-assertion-violation . gb4fcc) (lexical-violation? . gb4fcb) (irritants-condition? . gb4fca) (implementation-restriction-violation? . gb4fc9) (error? . gb4fc8) (condition-who . gb4fc7) (condition-predicate . gb4fc6) (condition-message . gb4fc5) (condition-irritants . gb4fc4) (condition-accessor . gb4fc3) (condition . gb4fc2) (assertion-violation? . gb4fc1) (condition? . gb4fc0) (utf32->string . gb4fbf) (utf16->string . gb4fbe) (utf8->string . gb4fbd) (uint-list->bytevector . gb4fbc) (u8-list->bytevector . gb4fbb) (string->utf8 . gb4fba) (string->utf32 . gb4fb9) (string->utf16 . gb4fb8) (sint-list->bytevector . gb4fb7) (native-endianness . gb4fb6) (bytevector? . gb4fb5) (bytevector=? . gb4fb4) (bytevector-uint-set! . gb4fb3) (bytevector-uint-ref . gb4fb2) (bytevector-u8-set! . gb4fb1) (bytevector-u8-ref . gb4fb0) (bytevector-u64-set! . gb4faf) (bytevector-u64-ref . gb4fae) (bytevector-u64-native-set! . gb4fad) (bytevector-u64-native-ref . gb4fac) (bytevector-u32-set! . gb4fab) (bytevector-u32-ref . gb4faa) (bytevector-u32-native-set! . gb4fa9) (bytevector-u32-native-ref . gb4fa8) (bytevector-u16-set! . gb4fa7) (bytevector-u16-ref . gb4fa6) (bytevector-u16-native-set! . gb4fa5) (bytevector-u16-native-ref . gb4fa4) (bytevector-sint-set! . gb4fa3) (bytevector-sint-ref . gb4fa2) (bytevector-s8-set! . gb4fa1) (bytevector-s8-ref . gb4fa0) (bytevector-s64-set! . gb4f9f) (bytevector-s64-ref . gb4f9e) (bytevector-s64-native-set! . gb4f9d) (bytevector-s64-native-ref . gb4f9c) (bytevector-s32-set! . gb4f9b) (bytevector-s32-ref . gb4f9a) (bytevector-s32-native-set! . gb4f99) (bytevector-s32-native-ref . gb4f98) (bytevector-s16-set! . gb4f97) (bytevector-s16-ref . gb4f96) (bytevector-s16-native-set! . gb4f95) (bytevector-s16-native-ref . gb4f94) (bytevector-length . gb4f93) (bytevector-ieee-single-ref . gb4f92) (bytevector-ieee-single-set! . gb4f91) (bytevector-ieee-single-native-set! . gb4f90) (bytevector-ieee-single-native-ref . gb4f8f) (bytevector-ieee-double-set! . gb4f8e) (bytevector-ieee-double-ref . gb4f8d) (bytevector-ieee-double-native-set! . gb4f8c) (bytevector-ieee-double-native-ref . gb4f8b) (bytevector-fill! . gb4f8a) (bytevector-copy! . gb4f89) (bytevector-copy . gb4f88) (bytevector->uint-list . gb4f87) (bytevector->u8-list . gb4f86) (bytevector->sint-list . gb4f85) (no-nans-violation? . gb4f84) (no-infinities-violation? . gb4f83) (make-no-nans-violation . gb4f82) (make-no-infinities-violation . gb4f81) (real->flonum . gb4f80) (flzero? . gb4f7f) (fltruncate . gb4f7e) (fltan . gb4f7d) (flsqrt . gb4f7c) (flsin . gb4f7b) (flround . gb4f7a) (flpositive? . gb4f79) (flonum? . gb4f78) (flodd? . gb4f77) (flnumerator . gb4f76) (flnegative? . gb4f75) (flnan? . gb4f74) (flmod0 . gb4f73) (flmod . gb4f72) (flmin . gb4f71) (flmax . gb4f70) (fllog . gb4f6f) (flinteger? . gb4f6e) (flinfinite? . gb4f6d) (flfloor . gb4f6c) (flfinite? . gb4f6b) (flexpt . gb4f6a) (flexp . gb4f69) (fleven? . gb4f68) (fldiv0-and-mod0 . gb4f67) (fldiv0 . gb4f66) (fldiv-and-mod . gb4f65) (fldiv . gb4f64) (fldenominator . gb4f63) (flcos . gb4f62) (flceiling . gb4f61) (flatan . gb4f60) (flasin . gb4f5f) (flacos . gb4f5e) (flabs . gb4f5d) (fl>? . gb4f5c) (fl>=? . gb4f5b) (fl=? . gb4f5a) (fl<? . gb4f59) (fl<=? . gb4f58) (fl/ . gb4f57) (fl- . gb4f56) (fl+ . gb4f55) (fl* . gb4f54) (fixnum->flonum . gb4f53) (fxzero? . gb4f52) (fxxor . gb4f51) (fxrotate-bit-field . gb4f50) (fxreverse-bit-field . gb4f4f) (fxpositive? . gb4f4e) (fxodd? . gb4f4d) (fxnot . gb4f4c) (fxnegative? . gb4f4b) (fxmod0 . gb4f4a) (fxmod . gb4f49) (fxmin . gb4f48) (fxmax . gb4f47) (fxlength . gb4f46) (fxior . gb4f45) (fxif . gb4f44) (fxfirst-bit-set . gb4f43) (fxeven? . gb4f42) (fxdiv0-and-mod0 . gb4f41) (fxdiv0 . gb4f40) (fxdiv-and-mod . gb4f3f) (fxdiv . gb4f3e) (fxcopy-bit-field . gb4f3d) (fxcopy-bit . gb4f3c) (fxbit-set? . gb4f3b) (fxbit-field . gb4f3a) (fxbit-count . gb4f39) (fxarithmetic-shift-right . gb4f38) (fxarithmetic-shift-left . gb4f37) (fxarithmetic-shift . gb4f36) (fxand . gb4f35) (fx>? . gb4f34) (fx>=? . gb4f33) (fx=? . gb4f32) (fx<? . gb4f31) (fx<=? . gb4f30) (fx-/carry . gb4f2f) (fx- . gb4f2e) (fx+/carry . gb4f2d) (fx+ . gb4f2c) (fx*/carry . gb4f2b) (fx* . gb4f2a) (greatest-fixnum . gb4f29) (least-fixnum . gb4f28) (fixnum-width . gb4f27) (fixnum? . gb4f26) (bitwise-rotate-bit-field . gb4f25) (bitwise-reverse-bit-field . gb4f24) (bitwise-length . gb4f23) (bitwise-if . gb4f22) (bitwise-first-bit-set . gb4f21) (bitwise-copy-bit-field . gb4f20) (bitwise-copy-bit . gb4f1f) (bitwise-bit-set? . gb4f1e) (bitwise-bit-field . gb4f1d) (bitwise-bit-count . gb4f1c) (bitwise-xor . gb4f1b) (bitwise-ior . gb4f1a) (bitwise-and . gb4f19) (bitwise-not . gb4f18) (bitwise-arithmetic-shift-right . gb4f17) (bitwise-arithmetic-shift-left . gb4f16) (bitwise-arithmetic-shift . gb4f15) (zero? . gb4f14) (vector? . gb4f13) (vector-set! . gb4f12) (vector-ref . gb4f11) (vector-map . gb4f10) (vector-length . gb4f0f) (vector-for-each . gb4f0e) (vector-fill! . gb4f0d) (vector->list . gb4f0c) (vector . gb4f0b) (values . gb4f0a) (truncate . gb4f09) (tan . gb4f08) (symbol? . gb4f07) (symbol=? . gb4f06) (symbol->string . gb4f05) (substring . gb4f04) (string? . gb4f03) (string>? . gb4f02) (string>=? . gb4f01) (string=? . gb4f00) (string<? . gb4eff) (string<=? . gb4efe) (string-ref . gb4efd) (string-length . gb4efc) (string-for-each . gb4efb) (string-copy . gb4efa) (string-append . gb4ef9) (string->symbol . gb4ef8) (string->number . gb4ef7) (string->list . gb4ef6) (string . gb4ef5) (sqrt . gb4ef4) (sin . gb4ef3) (round . gb4ef2) (reverse . gb4ef1) (real? . gb4ef0) (real-valued? . gb4eef) (real-part . gb4eee) (rationalize . gb4eed) (rational? . gb4eec) (rational-valued? . gb4eeb) (procedure? . gb4eea) (positive? . gb4ee9) (pair? . gb4ee8) (odd? . gb4ee7) (numerator . gb4ee6) (number? . gb4ee5) (number->string . gb4ee4) (null? . gb4ee3) (not . gb4ee2) (negative? . gb4ee1) (nan? . gb4ee0) (min . gb4edf) (max . gb4ede) (map . gb4edd) (make-vector . gb4edc) (make-string . gb4edb) (make-rectangular . gb4eda) (make-polar . gb4ed9) (magnitude . gb4ed8) (log . gb4ed7) (list? . gb4ed6) (list-tail . gb4ed5) (list-ref . gb4ed4) (list->vector . gb4ed3) (list->string . gb4ed2) (list . gb4ed1) (length . gb4ed0) (lcm . gb4ecf) (integer? . gb4ece) (integer-valued? . gb4ecd) (integer->char . gb4ecc) (infinite? . gb4ecb) (inexact? . gb4eca) (inexact . gb4ec9) (imag-part . gb4ec8) (gcd . gb4ec7) (for-each . gb4ec6) (floor . gb4ec5) (finite? . gb4ec4) (expt . gb4ec3) (exp . gb4ec2) (exact? . gb4ec1) (exact-integer-sqrt . gb4ec0) (exact . gb4ebf) (even? . gb4ebe) (error . gb4ebd) (eqv? . gb4ebc) (equal? . gb4ebb) (eq? . gb4eba) (dynamic-wind . gb4eb9) (div0-and-mod0 . gb4eb8) (mod0 . gb4eb7) (div0 . gb4eb6) (div-and-mod . gb4eb5) (mod . gb4eb4) (div . gb4eb3) (denominator . gb4eb2) (cos . gb4eb1) (cons . gb4eb0) (complex? . gb4eaf) (char? . gb4eae) (char>? . gb4ead) (char>=? . gb4eac) (char=? . gb4eab) (char<? . gb4eaa) (char<=? . gb4ea9) (char->integer . gb4ea8) (ceiling . gb4ea7) (call-with-values . gb4ea6) (call/cc . gb4ea5) (call-with-current-continuation . gb4ea4) (cddddr . gb4ea3) (cdddar . gb4ea2) (cddadr . gb4ea1) (cddaar . gb4ea0) (cdaddr . gb4e9f) (cdadar . gb4e9e) (cdaadr . gb4e9d) (cdaaar . gb4e9c) (cadddr . gb4e9b) (caddar . gb4e9a) (cadadr . gb4e99) (cadaar . gb4e98) (caaddr . gb4e97) (caadar . gb4e96) (caaadr . gb4e95) (caaaar . gb4e94) (cdddr . gb4e93) (cddar . gb4e92) (cdadr . gb4e91) (cdaar . gb4e90) (caddr . gb4e8f) (cadar . gb4e8e) (caadr . gb4e8d) (caaar . gb4e8c) (cddr . gb4e8b) (cdar . gb4e8a) (cadr . gb4e89) (caar . gb4e88) (cdr . gb4e87) (car . gb4e86) (boolean? . gb4e85) (boolean=? . gb4e84) (atan . gb4e83) (assertion-violation . gb4e82) (asin . gb4e81) (apply . gb4e80) (append . gb4e7f) (angle . gb4e7e) (acos . gb4e7d) (abs . gb4e7c) (/ . gb4e7b) (* . gb4e7a) (- . gb4e79) (+ . gb4e78) (>= . gb4e77) (> . gb4e76) (= . gb4e75) (<= . gb4e74) (< . gb4e73) (&no-nans . gb4e71) (&no-infinities . gb4e70) (&i/o-encoding . gb4e6f) (&i/o-decoding . gb4e6e) (&i/o-port . gb4e6d) (&i/o-file-does-not-exist . gb4e6c) (&i/o-file-already-exists . gb4e6b) (&i/o-file-is-read-only . gb4e6a) (&i/o-file-protection . gb4e69) (&i/o-filename . gb4e68) (&i/o-invalid-position . gb4e67) (&i/o-write . gb4e66) (&i/o-read . gb4e65) (&i/o . gb4e64) (&undefined . gb4e63) (&syntax . gb4e62) (&lexical . gb4e61) (&implementation-restriction . gb4e60) (&non-continuable . gb4e5f) (&who . gb4e5e) (&irritants . gb4e5d) (&assertion . gb4e5c) (&violation . gb4e5b) (&error . gb4e5a) (&serious . gb4e59) (&warning . gb4e58) (&message . gb4e57) (&condition . gb4e56) (define-condition-type . gb4e55) (define-enumeration . gb4e54) (define-record-type . gb4e53) (parent-rtd . gb4e52) (nongenerative . gb4e51) (opaque . gb4e50) (sealed . gb4e4f) (protocol . gb4e4e) (parent . gb4e4d) (immutable . gb4e4c) (mutable . gb4e4b) (fields . gb4e4a) (error-handling-mode . gb4e49) (file-options . gb4e48) (buffer-mode . gb4e47) (eol-style . gb4e46) (guard . gb4e45) (unsyntax-splicing . gb4e42) (unsyntax . gb4e41) (unquote-splicing . gb4e40) (unquote . gb4e3f) (_ . gb4e3e) (else . gb4e3d) (=> . gb4e3c) (... . gb4e3b) (assert . gb4e3a) (endianness . gb4e39) (do . gb4e36) (cond . gb4e35) (let* . gb4e34) (let*-values . gb4e33) (let-values . gb4e32) (identifier-syntax . gb4e31) (with-syntax . gb4e30) (quasisyntax . gb4e2f) (quasiquote . gb4e2e) (syntax-rules . gb4e2d) (record-constructor-descriptor . gb4e2a) (record-type-descriptor . gb4e29) (case . gb4e28) (unless . gb4e26) (when . gb4e25) (or . gb4e24) (and . gb4e23) (if . gb4e22) (let . gb4e21) (letrec* . gb4e20) (letrec . gb4e1f) (case-lambda . gb4e1d) (lambda . gb4e1c) (syntax . gb4e1b) (syntax-case . gb4e1a) (quote . gb4e19) (letrec-syntax . gb4e17) (let-syntax . gb4e16) (set! . gb4e15) (begin . gb4e13) (define-syntax . gb4e11) (define . gb4e10)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51d0 '(rnrs r5rs) '(6) '() '() '() '((scheme-report-environment . gb31c7) (quotient . gb5019) (null-environment . gb31c5) (remainder . gb5018) (modulo . gb5017) (inexact->exact . gb5016) (force . gb5015) (exact->inexact . gb5014) (make-promise . gb5013) (delay . gb4e38)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51d1 '(rnrs control) '(6) '() '() '() '((do . gb4e36) (unless . gb4e26) (when . gb4e25) (case-lambda . gb4e1d)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51d2 '(rnrs eval) '(6) '() '() '() '((eval . gb31cb) (environment . gb31c3)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51d3 '(rnrs mutable-pairs) '(6) '() '() '() '((set-cdr! . gb500f) (set-car! . gb500e)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51d4 '(rnrs mutable-strings) '(6) '() '() '() '((string-fill! . gb5011) (string-set! . gb5010)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51d5 '(rnrs programs) '(6) '() '() '() '((exit . gb5012) (command-line . gb4ca4)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51d6 '(rnrs syntax-case) '(6) '() '() '() '((make-variable-transformer . gb2f36) (identifier? . gb31ed) (generate-temporaries . gb31d9) (free-identifier=? . gb31db) (syntax->datum . gb31f1) (datum->syntax . gb31ef) (bound-identifier=? . gb31dd) (syntax-violation . gb31eb) (unsyntax-splicing . gb4e42) (unsyntax . gb4e41) (_ . gb4e3e) (... . gb4e3b) (with-syntax . gb4e30) (quasisyntax . gb4e2f) (syntax . gb4e1b) (syntax-case . gb4e1a)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51d7 '(rnrs files) '(6) '() '() '() '((delete-file . gb509e) (file-exists? . gb509d) (make-i/o-write-error . gb504b) (make-i/o-read-error . gb504a) (make-i/o-port-error . gb5049) (make-i/o-invalid-position-error . gb5048) (make-i/o-filename-error . gb5047) (make-i/o-file-protection-error . gb5046) (make-i/o-file-is-read-only-error . gb5045) (make-i/o-file-does-not-exist-error . gb5044) (make-i/o-file-already-exists-error . gb5043) (make-i/o-error . gb5042) (i/o-write-error? . gb5036) (i/o-read-error? . gb5035) (i/o-port-error? . gb5034) (i/o-invalid-position-error? . gb5033) (i/o-filename-error? . gb5032) (i/o-file-protection-error? . gb5031) (i/o-file-is-read-only-error? . gb5030) (i/o-file-does-not-exist-error? . gb502f) (i/o-file-already-exists-error? . gb502e) (i/o-error? . gb502d) (i/o-error-position . gb502c) (i/o-error-port . gb502b) (i/o-error-filename . gb502a) (&i/o-port . gb4e6d) (&i/o-file-does-not-exist . gb4e6c) (&i/o-file-already-exists . gb4e6b) (&i/o-file-is-read-only . gb4e6a) (&i/o-file-protection . gb4e69) (&i/o-filename . gb4e68) (&i/o-invalid-position . gb4e67) (&i/o-write . gb4e66) (&i/o-read . gb4e65) (&i/o . gb4e64)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51d8 '(rnrs sorting) '(6) '() '() '() '((vector-sort! . gb509c) (vector-sort . gb509b) (list-sort . gb509a)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51d9 '(rnrs base) '(6) '() '() '() '((zero? . gb4f14) (vector? . gb4f13) (vector-set! . gb4f12) (vector-ref . gb4f11) (vector-map . gb4f10) (vector-length . gb4f0f) (vector-for-each . gb4f0e) (vector-fill! . gb4f0d) (vector->list . gb4f0c) (vector . gb4f0b) (values . gb4f0a) (truncate . gb4f09) (tan . gb4f08) (symbol? . gb4f07) (symbol=? . gb4f06) (symbol->string . gb4f05) (substring . gb4f04) (string? . gb4f03) (string>? . gb4f02) (string>=? . gb4f01) (string=? . gb4f00) (string<? . gb4eff) (string<=? . gb4efe) (string-ref . gb4efd) (string-length . gb4efc) (string-for-each . gb4efb) (string-copy . gb4efa) (string-append . gb4ef9) (string->symbol . gb4ef8) (string->number . gb4ef7) (string->list . gb4ef6) (string . gb4ef5) (sqrt . gb4ef4) (sin . gb4ef3) (round . gb4ef2) (reverse . gb4ef1) (real? . gb4ef0) (real-valued? . gb4eef) (real-part . gb4eee) (rationalize . gb4eed) (rational? . gb4eec) (rational-valued? . gb4eeb) (procedure? . gb4eea) (positive? . gb4ee9) (pair? . gb4ee8) (odd? . gb4ee7) (numerator . gb4ee6) (number? . gb4ee5) (number->string . gb4ee4) (null? . gb4ee3) (not . gb4ee2) (negative? . gb4ee1) (nan? . gb4ee0) (min . gb4edf) (max . gb4ede) (map . gb4edd) (make-vector . gb4edc) (make-string . gb4edb) (make-rectangular . gb4eda) (make-polar . gb4ed9) (magnitude . gb4ed8) (log . gb4ed7) (list? . gb4ed6) (list-tail . gb4ed5) (list-ref . gb4ed4) (list->vector . gb4ed3) (list->string . gb4ed2) (list . gb4ed1) (length . gb4ed0) (lcm . gb4ecf) (integer? . gb4ece) (integer-valued? . gb4ecd) (integer->char . gb4ecc) (infinite? . gb4ecb) (inexact? . gb4eca) (inexact . gb4ec9) (imag-part . gb4ec8) (gcd . gb4ec7) (for-each . gb4ec6) (floor . gb4ec5) (finite? . gb4ec4) (expt . gb4ec3) (exp . gb4ec2) (exact? . gb4ec1) (exact-integer-sqrt . gb4ec0) (exact . gb4ebf) (even? . gb4ebe) (error . gb4ebd) (eqv? . gb4ebc) (equal? . gb4ebb) (eq? . gb4eba) (dynamic-wind . gb4eb9) (div0-and-mod0 . gb4eb8) (mod0 . gb4eb7) (div0 . gb4eb6) (div-and-mod . gb4eb5) (mod . gb4eb4) (div . gb4eb3) (denominator . gb4eb2) (cos . gb4eb1) (cons . gb4eb0) (complex? . gb4eaf) (char? . gb4eae) (char>? . gb4ead) (char>=? . gb4eac) (char=? . gb4eab) (char<? . gb4eaa) (char<=? . gb4ea9) (char->integer . gb4ea8) (ceiling . gb4ea7) (call-with-values . gb4ea6) (call/cc . gb4ea5) (call-with-current-continuation . gb4ea4) (cddddr . gb4ea3) (cdddar . gb4ea2) (cddadr . gb4ea1) (cddaar . gb4ea0) (cdaddr . gb4e9f) (cdadar . gb4e9e) (cdaadr . gb4e9d) (cdaaar . gb4e9c) (cadddr . gb4e9b) (caddar . gb4e9a) (cadadr . gb4e99) (cadaar . gb4e98) (caaddr . gb4e97) (caadar . gb4e96) (caaadr . gb4e95) (caaaar . gb4e94) (cdddr . gb4e93) (cddar . gb4e92) (cdadr . gb4e91) (cdaar . gb4e90) (caddr . gb4e8f) (cadar . gb4e8e) (caadr . gb4e8d) (caaar . gb4e8c) (cddr . gb4e8b) (cdar . gb4e8a) (cadr . gb4e89) (caar . gb4e88) (cdr . gb4e87) (car . gb4e86) (boolean? . gb4e85) (boolean=? . gb4e84) (atan . gb4e83) (assertion-violation . gb4e82) (asin . gb4e81) (apply . gb4e80) (append . gb4e7f) (angle . gb4e7e) (acos . gb4e7d) (abs . gb4e7c) (/ . gb4e7b) (* . gb4e7a) (- . gb4e79) (+ . gb4e78) (>= . gb4e77) (> . gb4e76) (= . gb4e75) (<= . gb4e74) (< . gb4e73) (unquote-splicing . gb4e40) (unquote . gb4e3f) (_ . gb4e3e) (else . gb4e3d) (=> . gb4e3c) (... . gb4e3b) (assert . gb4e3a) (cond . gb4e35) (let* . gb4e34) (let*-values . gb4e33) (let-values . gb4e32) (identifier-syntax . gb4e31) (quasiquote . gb4e2e) (syntax-rules . gb4e2d) (case . gb4e28) (or . gb4e24) (and . gb4e23) (if . gb4e22) (let . gb4e21) (letrec* . gb4e20) (letrec . gb4e1f) (lambda . gb4e1c) (quote . gb4e19) (letrec-syntax . gb4e17) (let-syntax . gb4e16) (set! . gb4e15) (begin . gb4e13) (define-syntax . gb4e11) (define . gb4e10)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51da '(rnrs lists) '(6) '() '() '() '((remove . gb500d) (remv . gb500c) (remp . gb500b) (remq . gb500a) (partition . gb5009) (memv . gb5008) (memq . gb5007) (memp . gb5006) (member . gb5005) (exists . gb5004) (for-all . gb5003) (fold-right . gb5002) (fold-left . gb5001) (find . gb5000) (filter . gb4fff) (cons* . gb4ffe) (assv . gb4ffd) (assq . gb4ffc) (assp . gb4ffb) (assoc . gb4ffa)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51db '(rnrs io simple) '(6) '() '() '() '((call-with-output-file . gb5084) (call-with-input-file . gb5083) (write-char . gb5082) (write . gb5081) (with-output-to-file . gb5080) (with-input-from-file . gb507f) (read-char . gb507e) (read . gb507d) (peek-char . gb507c) (open-output-file . gb507b) (open-input-file . gb507a) (newline . gb5079) (display . gb5078) (close-output-port . gb5077) (close-input-port . gb5076) (eof-object? . gb5075) (eof-object . gb5074) (current-error-port . gb5073) (current-output-port . gb5072) (current-input-port . gb5071) (output-port? . gb5070) (input-port? . gb506f) (make-i/o-write-error . gb504b) (make-i/o-read-error . gb504a) (make-i/o-port-error . gb5049) (make-i/o-invalid-position-error . gb5048) (make-i/o-filename-error . gb5047) (make-i/o-file-protection-error . gb5046) (make-i/o-file-is-read-only-error . gb5045) (make-i/o-file-does-not-exist-error . gb5044) (make-i/o-file-already-exists-error . gb5043) (make-i/o-error . gb5042) (i/o-write-error? . gb5036) (i/o-read-error? . gb5035) (i/o-port-error? . gb5034) (i/o-invalid-position-error? . gb5033) (i/o-filename-error? . gb5032) (i/o-file-protection-error? . gb5031) (i/o-file-is-read-only-error? . gb5030) (i/o-file-does-not-exist-error? . gb502f) (i/o-file-already-exists-error? . gb502e) (i/o-error? . gb502d) (i/o-error-position . gb502c) (i/o-error-port . gb502b) (i/o-error-filename . gb502a) (&i/o-port . gb4e6d) (&i/o-file-does-not-exist . gb4e6c) (&i/o-file-already-exists . gb4e6b) (&i/o-file-is-read-only . gb4e6a) (&i/o-file-protection . gb4e69) (&i/o-filename . gb4e68) (&i/o-invalid-position . gb4e67) (&i/o-write . gb4e66) (&i/o-read . gb4e65) (&i/o . gb4e64)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51dc '(rnrs bytevectors) '(6) '() '() '() '((make-bytevector . gb5039) (utf32->string . gb4fbf) (utf16->string . gb4fbe) (utf8->string . gb4fbd) (uint-list->bytevector . gb4fbc) (u8-list->bytevector . gb4fbb) (string->utf8 . gb4fba) (string->utf32 . gb4fb9) (string->utf16 . gb4fb8) (sint-list->bytevector . gb4fb7) (native-endianness . gb4fb6) (bytevector? . gb4fb5) (bytevector=? . gb4fb4) (bytevector-uint-set! . gb4fb3) (bytevector-uint-ref . gb4fb2) (bytevector-u8-set! . gb4fb1) (bytevector-u8-ref . gb4fb0) (bytevector-u64-set! . gb4faf) (bytevector-u64-ref . gb4fae) (bytevector-u64-native-set! . gb4fad) (bytevector-u64-native-ref . gb4fac) (bytevector-u32-set! . gb4fab) (bytevector-u32-ref . gb4faa) (bytevector-u32-native-set! . gb4fa9) (bytevector-u32-native-ref . gb4fa8) (bytevector-u16-set! . gb4fa7) (bytevector-u16-ref . gb4fa6) (bytevector-u16-native-set! . gb4fa5) (bytevector-u16-native-ref . gb4fa4) (bytevector-sint-set! . gb4fa3) (bytevector-sint-ref . gb4fa2) (bytevector-s8-set! . gb4fa1) (bytevector-s8-ref . gb4fa0) (bytevector-s64-set! . gb4f9f) (bytevector-s64-ref . gb4f9e) (bytevector-s64-native-set! . gb4f9d) (bytevector-s64-native-ref . gb4f9c) (bytevector-s32-set! . gb4f9b) (bytevector-s32-ref . gb4f9a) (bytevector-s32-native-set! . gb4f99) (bytevector-s32-native-ref . gb4f98) (bytevector-s16-set! . gb4f97) (bytevector-s16-ref . gb4f96) (bytevector-s16-native-set! . gb4f95) (bytevector-s16-native-ref . gb4f94) (bytevector-length . gb4f93) (bytevector-ieee-single-ref . gb4f92) (bytevector-ieee-single-set! . gb4f91) (bytevector-ieee-single-native-set! . gb4f90) (bytevector-ieee-single-native-ref . gb4f8f) (bytevector-ieee-double-set! . gb4f8e) (bytevector-ieee-double-ref . gb4f8d) (bytevector-ieee-double-native-set! . gb4f8c) (bytevector-ieee-double-native-ref . gb4f8b) (bytevector-fill! . gb4f8a) (bytevector-copy! . gb4f89) (bytevector-copy . gb4f88) (bytevector->uint-list . gb4f87) (bytevector->u8-list . gb4f86) (bytevector->sint-list . gb4f85) (endianness . gb4e39)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51dd '(rnrs unicode) '(6) '() '() '() '((string-upcase . gb50cc) (string-titlecase . gb50cb) (string-normalize-nfkd . gb50ca) (string-normalize-nfkc . gb50c9) (string-normalize-nfd . gb50c8) (string-normalize-nfc . gb50c7) (string-foldcase . gb50c6) (string-downcase . gb50c5) (string-ci>? . gb50c4) (string-ci>=? . gb50c3) (string-ci=? . gb50c2) (string-ci<? . gb50c1) (string-ci<=? . gb50c0) (char-whitespace? . gb50bf) (char-upper-case? . gb50be) (char-title-case? . gb50bd) (char-numeric? . gb50bc) (char-lower-case? . gb50bb) (char-general-category . gb50ba) (char-upcase . gb50b9) (char-titlecase . gb50b8) (char-foldcase . gb50b7) (char-downcase . gb50b6) (char-ci>? . gb50b5) (char-ci>=? . gb50b4) (char-ci=? . gb50b3) (char-ci<? . gb50b2) (char-ci<=? . gb50b1) (char-alphabetic? . gb50b0)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51de '(rnrs exceptions) '(6) '() '() '() '((with-exception-handler . gb4ff3) (raise-continuable . gb4ff2) (raise . gb4ff1) (guard . gb4e45) (else . gb4e3d) (=> . gb4e3c)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51df '(rnrs arithmetic bitwise) '(6) '() '() '() '((bitwise-rotate-bit-field . gb4f25) (bitwise-reverse-bit-field . gb4f24) (bitwise-length . gb4f23) (bitwise-if . gb4f22) (bitwise-first-bit-set . gb4f21) (bitwise-copy-bit-field . gb4f20) (bitwise-copy-bit . gb4f1f) (bitwise-bit-set? . gb4f1e) (bitwise-bit-field . gb4f1d) (bitwise-bit-count . gb4f1c) (bitwise-xor . gb4f1b) (bitwise-ior . gb4f1a) (bitwise-and . gb4f19) (bitwise-not . gb4f18) (bitwise-arithmetic-shift-right . gb4f17) (bitwise-arithmetic-shift-left . gb4f16) (bitwise-arithmetic-shift . gb4f15)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51e0 '(rnrs arithmetic fixnums) '(6) '() '() '() '((fxzero? . gb4f52) (fxxor . gb4f51) (fxrotate-bit-field . gb4f50) (fxreverse-bit-field . gb4f4f) (fxpositive? . gb4f4e) (fxodd? . gb4f4d) (fxnot . gb4f4c) (fxnegative? . gb4f4b) (fxmod0 . gb4f4a) (fxmod . gb4f49) (fxmin . gb4f48) (fxmax . gb4f47) (fxlength . gb4f46) (fxior . gb4f45) (fxif . gb4f44) (fxfirst-bit-set . gb4f43) (fxeven? . gb4f42) (fxdiv0-and-mod0 . gb4f41) (fxdiv0 . gb4f40) (fxdiv-and-mod . gb4f3f) (fxdiv . gb4f3e) (fxcopy-bit-field . gb4f3d) (fxcopy-bit . gb4f3c) (fxbit-set? . gb4f3b) (fxbit-field . gb4f3a) (fxbit-count . gb4f39) (fxarithmetic-shift-right . gb4f38) (fxarithmetic-shift-left . gb4f37) (fxarithmetic-shift . gb4f36) (fxand . gb4f35) (fx>? . gb4f34) (fx>=? . gb4f33) (fx=? . gb4f32) (fx<? . gb4f31) (fx<=? . gb4f30) (fx-/carry . gb4f2f) (fx- . gb4f2e) (fx+/carry . gb4f2d) (fx+ . gb4f2c) (fx*/carry . gb4f2b) (fx* . gb4f2a) (greatest-fixnum . gb4f29) (least-fixnum . gb4f28) (fixnum-width . gb4f27) (fixnum? . gb4f26)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51e1 '(rnrs arithmetic flonums) '(6) '() '() '() '((no-nans-violation? . gb4f84) (no-infinities-violation? . gb4f83) (make-no-nans-violation . gb4f82) (make-no-infinities-violation . gb4f81) (real->flonum . gb4f80) (flzero? . gb4f7f) (fltruncate . gb4f7e) (fltan . gb4f7d) (flsqrt . gb4f7c) (flsin . gb4f7b) (flround . gb4f7a) (flpositive? . gb4f79) (flonum? . gb4f78) (flodd? . gb4f77) (flnumerator . gb4f76) (flnegative? . gb4f75) (flnan? . gb4f74) (flmod0 . gb4f73) (flmod . gb4f72) (flmin . gb4f71) (flmax . gb4f70) (fllog . gb4f6f) (flinteger? . gb4f6e) (flinfinite? . gb4f6d) (flfloor . gb4f6c) (flfinite? . gb4f6b) (flexpt . gb4f6a) (flexp . gb4f69) (fleven? . gb4f68) (fldiv0-and-mod0 . gb4f67) (fldiv0 . gb4f66) (fldiv-and-mod . gb4f65) (fldiv . gb4f64) (fldenominator . gb4f63) (flcos . gb4f62) (flceiling . gb4f61) (flatan . gb4f60) (flasin . gb4f5f) (flacos . gb4f5e) (flabs . gb4f5d) (fl>? . gb4f5c) (fl>=? . gb4f5b) (fl=? . gb4f5a) (fl<? . gb4f59) (fl<=? . gb4f58) (fl/ . gb4f57) (fl- . gb4f56) (fl+ . gb4f55) (fl* . gb4f54) (fixnum->flonum . gb4f53) (&no-nans . gb4e71) (&no-infinities . gb4e70)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51e2 '(rnrs hashtables) '(6) '() '() '() '((symbol-hash . gb5099) (string-ci-hash . gb5098) (string-hash . gb5097) (equal-hash . gb5096) (hashtable-equivalence-function . gb5095) (make-hashtable . gb5094) (hashtable-hash-function . gb5093) (make-eqv-hashtable . gb5092) (make-eq-hashtable . gb5091) (hashtable? . gb5090) (hashtable-update! . gb508f) (hashtable-size . gb508e) (hashtable-set! . gb508d) (hashtable-ref . gb508c) (hashtable-mutable? . gb508b) (hashtable-keys . gb508a) (hashtable-entries . gb5089) (hashtable-delete! . gb5088) (hashtable-copy . gb5087) (hashtable-contains? . gb5086) (hashtable-clear! . gb5085)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51e3 '(rnrs io ports) '(6) '() '() '() '((eof-object? . gb5075) (eof-object . gb5074) (current-error-port . gb5073) (current-output-port . gb5072) (current-input-port . gb5071) (output-port? . gb5070) (input-port? . gb506f) (utf-8-codec . gb506e) (utf-16-codec . gb506d) (transcoder-error-handling-mode . gb506c) (transcoder-eol-style . gb506b) (transcoder-codec . gb506a) (transcoded-port . gb5069) (textual-port? . gb5068) (string->bytevector . gb5067) (standard-output-port . gb5066) (standard-input-port . gb5065) (standard-error-port . gb5064) (set-port-position! . gb5063) (put-u8 . gb5062) (put-string . gb5061) (put-datum . gb5060) (put-char . gb505f) (put-bytevector . gb505e) (port? . gb505d) (port-transcoder . gb505c) (port-position . gb505b) (port-has-set-port-position!? . gb505a) (port-has-port-position? . gb5059) (port-eof? . gb5058) (output-port-buffer-mode . gb5057) (open-string-output-port . gb5056) (open-string-input-port . gb5055) (open-file-output-port . gb5054) (open-file-input/output-port . gb5053) (open-file-input-port . gb5052) (open-bytevector-output-port . gb5051) (open-bytevector-input-port . gb5050) (native-transcoder . gb504f) (native-eol-style . gb504e) (make-transcoder . gb504d) (latin-1-codec . gb504c) (make-i/o-write-error . gb504b) (make-i/o-read-error . gb504a) (make-i/o-port-error . gb5049) (make-i/o-invalid-position-error . gb5048) (make-i/o-filename-error . gb5047) (make-i/o-file-protection-error . gb5046) (make-i/o-file-is-read-only-error . gb5045) (make-i/o-file-does-not-exist-error . gb5044) (make-i/o-file-already-exists-error . gb5043) (make-i/o-error . gb5042) (make-i/o-encoding-error . gb5041) (make-i/o-decoding-error . gb5040) (make-custom-textual-output-port . gb503f) (make-custom-textual-input/output-port . gb503e) (make-custom-textual-input-port . gb503d) (make-custom-binary-output-port . gb503c) (make-custom-binary-input/output-port . gb503b) (make-custom-binary-input-port . gb503a) (lookahead-u8 . gb5038) (lookahead-char . gb5037) (i/o-write-error? . gb5036) (i/o-read-error? . gb5035) (i/o-port-error? . gb5034) (i/o-invalid-position-error? . gb5033) (i/o-filename-error? . gb5032) (i/o-file-protection-error? . gb5031) (i/o-file-is-read-only-error? . gb5030) (i/o-file-does-not-exist-error? . gb502f) (i/o-file-already-exists-error? . gb502e) (i/o-error? . gb502d) (i/o-error-position . gb502c) (i/o-error-port . gb502b) (i/o-error-filename . gb502a) (i/o-encoding-error? . gb5029) (i/o-encoding-error-char . gb5028) (i/o-decoding-error? . gb5027) (get-u8 . gb5026) (get-string-n! . gb5025) (get-string-n . gb5024) (get-string-all . gb5023) (get-line . gb5022) (get-datum . gb5021) (get-char . gb5020) (get-bytevector-some . gb501f) (get-bytevector-n! . gb501e) (get-bytevector-n . gb501d) (get-bytevector-all . gb501c) (flush-output-port . gb501b) (close-port . gb501a) (call-with-string-output-port . gb4ff9) (call-with-port . gb4ff8) (call-with-bytevector-output-port . gb4ff7) (bytevector->string . gb4ff6) (buffer-mode? . gb4ff5) (binary-port? . gb4ff4) (&i/o-encoding . gb4e6f) (&i/o-decoding . gb4e6e) (&i/o-port . gb4e6d) (&i/o-file-does-not-exist . gb4e6c) (&i/o-file-already-exists . gb4e6b) (&i/o-file-is-read-only . gb4e6a) (&i/o-file-protection . gb4e69) (&i/o-filename . gb4e68) (&i/o-invalid-position . gb4e67) (&i/o-write . gb4e66) (&i/o-read . gb4e65) (&i/o . gb4e64) (error-handling-mode . gb4e49) (file-options . gb4e48) (buffer-mode . gb4e47) (eol-style . gb4e46)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51e4 '(rnrs enums) '(6) '() '() '() '((make-enumeration . gb4ff0) (enum-set=? . gb4fef) (enum-set-universe . gb4fee) (enum-set-union . gb4fed) (enum-set-subset? . gb4fec) (enum-set-projection . gb4feb) (enum-set-member? . gb4fea) (enum-set-intersection . gb4fe9) (enum-set-indexer . gb4fe8) (enum-set-difference . gb4fe7) (enum-set-constructor . gb4fe6) (enum-set-complement . gb4fe5) (enum-set->list . gb4fe4) (define-enumeration . gb4e54)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51e5 '(rnrs conditions) '(6) '() '() '() '((who-condition? . gb4fe3) (warning? . gb4fe2) (violation? . gb4fe1) (undefined-violation? . gb4fe0) (syntax-violation? . gb4fdf) (syntax-violation-subform . gb4fde) (syntax-violation-form . gb4fdd) (syntax-violation . gb31eb) (simple-conditions . gb4fdc) (serious-condition? . gb4fdb) (non-continuable-violation? . gb4fda) (message-condition? . gb4fd9) (make-who-condition . gb4fd8) (make-warning . gb4fd7) (make-violation . gb4fd6) (make-undefined-violation . gb4fd5) (make-syntax-violation . gb4fd4) (make-serious-condition . gb4fd3) (make-non-continuable-violation . gb4fd2) (make-message-condition . gb4fd1) (make-lexical-violation . gb4fd0) (make-irritants-condition . gb4fcf) (make-implementation-restriction-violation . gb4fce) (make-error . gb4fcd) (make-assertion-violation . gb4fcc) (lexical-violation? . gb4fcb) (irritants-condition? . gb4fca) (implementation-restriction-violation? . gb4fc9) (error? . gb4fc8) (condition-who . gb4fc7) (condition-predicate . gb4fc6) (condition-message . gb4fc5) (condition-irritants . gb4fc4) (condition-accessor . gb4fc3) (condition . gb4fc2) (assertion-violation? . gb4fc1) (condition? . gb4fc0) (&undefined . gb4e63) (&syntax . gb4e62) (&lexical . gb4e61) (&implementation-restriction . gb4e60) (&non-continuable . gb4e5f) (&who . gb4e5e) (&irritants . gb4e5d) (&assertion . gb4e5c) (&violation . gb4e5b) (&error . gb4e5a) (&serious . gb4e59) (&warning . gb4e58) (&message . gb4e57) (&condition . gb4e56) (define-condition-type . gb4e55)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51e6 '(rnrs records inspection) '(6) '() '() '() '((record? . gb50a8) (record-type-uid . gb50a7) (record-type-sealed? . gb50a6) (record-type-parent . gb50a5) (record-type-opaque? . gb50a4) (record-type-name . gb50a3) (record-type-generative? . gb50a2) (record-type-field-names . gb50a1) (record-rtd . gb50a0) (record-field-mutable? . gb509f)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51e7 '(rnrs records procedural) '(6) '() '() '() '((record-type-descriptor? . gb50af) (record-predicate . gb50ae) (record-mutator . gb50ad) (record-constructor . gb50ac) (record-accessor . gb50ab) (make-record-type-descriptor . gb50aa) (make-record-constructor-descriptor . gb50a9)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51e8 '(rnrs records syntactic) '(6) '() '() '() '((define-record-type . gb4e53) (parent-rtd . gb4e52) (nongenerative . gb4e51) (opaque . gb4e50) (sealed . gb4e4f) (protocol . gb4e4e) (parent . gb4e4d) (immutable . gb4e4c) (mutable . gb4e4b) (fields . gb4e4a) (record-constructor-descriptor . gb4e2a) (record-type-descriptor . gb4e29)) '() values values '#f '#f '#t '#f) (gb2d1f@gb2b6b@install-library 'gb51e9 '(psyntax system $all) '() '() '() '() '((&no-nans-rcd . gb51c9) (&no-nans-rtd . gb51c8) (&no-infinities-rcd . gb51c7) (&no-infinities-rtd . gb51c6) (&i/o-encoding-rcd . gb51c5) (&i/o-encoding-rtd . gb51c4) (&i/o-decoding-rcd . gb51c3) (&i/o-decoding-rtd . gb51c2) (&i/o-port-rcd . gb51c1) (&i/o-port-rtd . gb51c0) (&i/o-file-does-not-exist-rcd . gb51bf) (&i/o-file-does-not-exist-rtd . gb51be) (&i/o-file-already-exists-rcd . gb51bd) (&i/o-file-already-exists-rtd . gb51bc) (&i/o-file-is-read-only-rcd . gb51bb) (&i/o-file-is-read-only-rtd . gb51ba) (&i/o-file-protection-rcd . gb51b9) (&i/o-file-protection-rtd . gb51b8) (&i/o-filename-rcd . gb51b7) (&i/o-filename-rtd . gb51b6) (&i/o-invalid-position-rcd . gb51b5) (&i/o-invalid-position-rtd . gb51b4) (&i/o-write-rcd . gb51b3) (&i/o-write-rtd . gb51b2) (&i/o-read-rcd . gb51b1) (&i/o-read-rtd . gb51b0) (&i/o-rcd . gb51af) (&i/o-rtd . gb51ae) (&undefined-rcd . gb51ad) (&undefined-rtd . gb51ac) (&syntax-rcd . gb51ab) (&syntax-rtd . gb51aa) (&lexical-rcd . gb51a9) (&lexical-rtd . gb51a8) (&implementation-restriction-rcd . gb51a7) (&implementation-restriction-rtd . gb51a6) (&non-continuable-rcd . gb51a5) (&non-continuable-rtd . gb51a4) (&who-rcd . gb51a3) (&who-rtd . gb51a2) (&irritants-rcd . gb51a1) (&irritants-rtd . gb51a0) (&assertion-rcd . gb519f) (&assertion-rtd . gb519e) (&violation-rcd . gb519d) (&violation-rtd . gb519c) (&error-rcd . gb519b) (&error-rtd . gb519a) (&serious-rcd . gb5199) (&serious-rtd . gb5198) (&warning-rcd . gb5197) (&warning-rtd . gb5196) (&message-rcd . gb5195) (&message-rtd . gb5194) (&condition-rcd . gb5193) (&condition-rtd . gb5192) (syntax-error . gb31e7) (syntax-dispatch . gb310b) (pretty-print . gb5191) (eval-core . gb5190) (set-symbol-value! . gb518f) (symbol-value . gb518e) (gensym . gb518d) (void . gb518c) (load . gb4caa) (interaction-environment . gb31f9) (char-ready? . gb518b) (regexp? . gb518a) (read-line . gb5189) (gensym-prefix-set! . gb5188) (ungensym . gb5187) (alist->eq-hash-table . gb5186) (assoc-ref . gb5185) (print . gb5184) (format . gb5183) (host-os . gb5182) (library-path . gb2b4a) (standard-library-path . gb5181) (ssl-supported? . gb5180) (ssl-socket? . gb517f) (socket-sslize! . gb517e) (%monapi-stream-read . gb517d) (%monapi-stream-write . gb517c) (%monapi-stream-handle . gb517b) (%monapi-make-stream . gb517a) (%monapi-name-add! . gb5179) (%monapi-message-receive . gb5178) (%monapi-name-whereis . gb5177) (%monapi-message-reply . gb5176) (%monapi-message-send-receive . gb5175) (%monapi-message-send . gb5174) (process-terminate! . gb5173) (process-list . gb5172) (file-newer? . gb5171) (stat-mtime . gb5170) (write-to-file . gb516f) (file->list . gb516e) (file->string . gb516d) (digit->integer . gb516c) (call-with-string-input-port . gb516b) (call-with-string-io . gb516a) (string-split . gb5169) (bytevector-for-each . gb5168) (string->regexp . gb5167) (rxmatch . gb5166) (regexp-replace-all . gb5165) (hashtable-fold-left . gb5164) (hashtable-for-each . gb5163) (mosh-cache-dir . gb2934) (%start-process . gb5162) (%call-process . gb5161) (local-tz-offset . gb5160) (microseconds . gb515f) (directory-list . gb515e) (set-current-directory! . gb515d) (expand-path . gb515c) (current-directory . gb515b) (%getpid . gb515a) (%waitpid . gb5159) (simple-struct-name . gb5158) (simple-struct-set! . gb5157) (simple-struct-ref . gb5156) (make-simple-struct . gb5155) (simple-struct? . gb5154) (pointer-ref-c-int64 . gb5153) (pointer-ref-c-int32 . gb5152) (pointer-ref-c-int16 . gb5151) (pointer-ref-c-int8 . gb5150) (pointer-ref-c-uint64 . gb514f) (pointer-ref-c-uint32 . gb514e) (pointer-ref-c-uint16 . gb514d) (pointer-ref-c-uint8 . gb514c) (pointer-set-c-uint64! . gb514b) (pointer-set-c-uint32! . gb514a) (pointer-set-c-uint16! . gb5149) (pointer-set-c-uint8! . gb5148) (pointer-set-c-int64! . gb5147) (pointer-set-c-int32! . gb5146) (pointer-set-c-int16! . gb5145) (pointer-set-c-int8! . gb5144) (pointer-set-c-pointer! . gb5143) (pointer-set-c-double! . gb5142) (pointer-set-c-float! . gb5141) (pointer-set-c-long-long! . gb5140) (pointer-set-c-long! . gb513f) (pointer-set-c-int! . gb513e) (pointer-set-c-short! . gb513d) (pointer-set-c-char! . gb513c) (pointer-ref-c-pointer . gb513b) (pointer-ref-c-double . gb513a) (pointer-ref-c-float . gb5139) (pointer-ref-c-unsigned-long-long . gb5138) (pointer-ref-c-signed-long-long . gb5137) (pointer-ref-c-unsigned-long . gb5136) (pointer-ref-c-signed-long . gb5135) (pointer-ref-c-unsigned-int . gb5134) (pointer-ref-c-signed-int . gb5133) (pointer-ref-c-unsigned-short . gb5132) (pointer-ref-c-signed-short . gb5131) (pointer-ref-c-unsigned-char . gb5130) (pointer-ref-c-signed-char . gb512f) (pointer->integer . gb512e) (integer->pointer . gb512d) (pointer? . gb512c) (shared-errno . gb512b) (%ffi-error . gb512a) (%ffi-close . gb5129) (%ffi-free-c-callback-trampoline . gb5128) (%ffi-make-c-callback-trampoline . gb5127) (%ffi-free . gb5126) (%ffi-malloc . gb5125) (%ffi-supported? . gb5124) (%ffi-pointer->string . gb5123) (%ffi-call . gb5122) (%ffi-lookup . gb5121) (%ffi-open . gb5120) (null-terminated-utf8->string . gb511f) (null-terminated-bytevector->string . gb511e) (%exec . gb511d) (%fork . gb511c) (%pipe . gb511b) (%confstr . gb511a) (%dup . gb5119) (p . gb5118) (open-output-string . gb5117) (get-output-string . gb5116) (file-stat-ctime . gb5115) (file-stat-atime . gb5114) (file-stat-mtime . gb5113) (file-size-in-bytes . gb5112) (file-writable? . gb5111) (file-executable? . gb5110) (file-readable? . gb510f) (file-regular? . gb510e) (file-symbolic-link? . gb510d) (file-directory? . gb510c) (create-symbolic-link . gb510b) (rename-file . gb510a) (delete-directory . gb5109) (create-directory . gb5108) (create-mosh-cache-dir . gb5107) (get-environment-variables . gb5106) (current-exception-handler . gb5105) (get-environment-variable . gb5104) (join-wraps . gb5103) (id->real-label . gb5102) (same-marks? . gb5101) (same-marks*? . gb5100) (get-timeofday . gb50ff) (get-command-line . gb50fe) (sys-display . gb50fd) (whereis . gb50fc) (register . gb50fb) (vm-join! . gb50fa) (vm-set-value! . gb50f9) (vm? . gb50f8) (main-vm? . gb50f7) (vm-eval . gb50f6) (vm-self . gb50f5) (vm-start! . gb50f4) (make-vm . gb50f3) (mutex-try-lock! . gb50f2) (mutex-unlock! . gb50f1) (mutex-lock! . gb50f0) (mutex? . gb50ef) (make-mutex . gb50ee) (condition-variable-notify-all! . gb50ed) (condition-variable-notify! . gb50ec) (condition-variable-wait! . gb50eb) (make-condition-variable . gb50ea) (write/ss . gb50e9) (mosh-executable-path . gb50e8) (make-file-options . gb50e7) (source-info . gb50e6) (make-compiler-instruction . gb50e5) (make-instruction . gb50e4) (set-annotation! . gb50e3) (get-annotation . gb50e2) (annotated-pair? . gb50e1) (annotated-cons . gb50e0) (set-source-info! . gb50df) (bignum? . gb50de) (fast-equal? . gb50dd) (fasl-read . gb50dc) (fasl-write . gb50db) (time-usage . gb50da) (os-constant . gb50d9) (condition-printer . gb50d8) (disasm . gb50d7) (make-parameter . gb2932) (socket-port . gb50d6) (socket-shutdown . gb50d5) (socket-close . gb50d4) (socket-send . gb50d3) (socket-recv! . gb50d2) (socket-recv . gb50d1) (make-server-socket . gb50d0) (make-client-socket . gb50cf) (socket-accept . gb50ce) (socket? . gb50cd) (string-upcase . gb50cc) (string-titlecase . gb50cb) (string-normalize-nfkd . gb50ca) (string-normalize-nfkc . gb50c9) (string-normalize-nfd . gb50c8) (string-normalize-nfc . gb50c7) (string-foldcase . gb50c6) (string-downcase . gb50c5) (string-ci>? . gb50c4) (string-ci>=? . gb50c3) (string-ci=? . gb50c2) (string-ci<? . gb50c1) (string-ci<=? . gb50c0) (char-whitespace? . gb50bf) (char-upper-case? . gb50be) (char-title-case? . gb50bd) (char-numeric? . gb50bc) (char-lower-case? . gb50bb) (char-general-category . gb50ba) (char-upcase . gb50b9) (char-titlecase . gb50b8) (char-foldcase . gb50b7) (char-downcase . gb50b6) (char-ci>? . gb50b5) (char-ci>=? . gb50b4) (char-ci=? . gb50b3) (char-ci<? . gb50b2) (char-ci<=? . gb50b1) (char-alphabetic? . gb50b0) (make-variable-transformer . gb2f36) (identifier? . gb31ed) (generate-temporaries . gb31d9) (free-identifier=? . gb31db) (syntax->datum . gb31f1) (datum->syntax . gb31ef) (bound-identifier=? . gb31dd) (record-type-descriptor? . gb50af) (record-predicate . gb50ae) (record-mutator . gb50ad) (record-constructor . gb50ac) (record-accessor . gb50ab) (make-record-type-descriptor . gb50aa) (make-record-constructor-descriptor . gb50a9) (record? . gb50a8) (record-type-uid . gb50a7) (record-type-sealed? . gb50a6) (record-type-parent . gb50a5) (record-type-opaque? . gb50a4) (record-type-name . gb50a3) (record-type-generative? . gb50a2) (record-type-field-names . gb50a1) (record-rtd . gb50a0) (record-field-mutable? . gb509f) (delete-file . gb509e) (file-exists? . gb509d) (vector-sort! . gb509c) (vector-sort . gb509b) (list-sort . gb509a) (symbol-hash . gb5099) (string-ci-hash . gb5098) (string-hash . gb5097) (equal-hash . gb5096) (hashtable-equivalence-function . gb5095) (make-hashtable . gb5094) (hashtable-hash-function . gb5093) (make-eqv-hashtable . gb5092) (make-eq-hashtable . gb5091) (hashtable? . gb5090) (hashtable-update! . gb508f) (hashtable-size . gb508e) (hashtable-set! . gb508d) (hashtable-ref . gb508c) (hashtable-mutable? . gb508b) (hashtable-keys . gb508a) (hashtable-entries . gb5089) (hashtable-delete! . gb5088) (hashtable-copy . gb5087) (hashtable-contains? . gb5086) (hashtable-clear! . gb5085) (call-with-output-file . gb5084) (call-with-input-file . gb5083) (write-char . gb5082) (write . gb5081) (with-output-to-file . gb5080) (with-input-from-file . gb507f) (read-char . gb507e) (read . gb507d) (peek-char . gb507c) (open-output-file . gb507b) (open-input-file . gb507a) (newline . gb5079) (display . gb5078) (close-output-port . gb5077) (close-input-port . gb5076) (eof-object? . gb5075) (eof-object . gb5074) (current-error-port . gb5073) (current-output-port . gb5072) (current-input-port . gb5071) (output-port? . gb5070) (input-port? . gb506f) (utf-8-codec . gb506e) (utf-16-codec . gb506d) (transcoder-error-handling-mode . gb506c) (transcoder-eol-style . gb506b) (transcoder-codec . gb506a) (transcoded-port . gb5069) (textual-port? . gb5068) (string->bytevector . gb5067) (standard-output-port . gb5066) (standard-input-port . gb5065) (standard-error-port . gb5064) (set-port-position! . gb5063) (put-u8 . gb5062) (put-string . gb5061) (put-datum . gb5060) (put-char . gb505f) (put-bytevector . gb505e) (port? . gb505d) (port-transcoder . gb505c) (port-position . gb505b) (port-has-set-port-position!? . gb505a) (port-has-port-position? . gb5059) (port-eof? . gb5058) (output-port-buffer-mode . gb5057) (open-string-output-port . gb5056) (open-string-input-port . gb5055) (open-file-output-port . gb5054) (open-file-input/output-port . gb5053) (open-file-input-port . gb5052) (open-bytevector-output-port . gb5051) (open-bytevector-input-port . gb5050) (native-transcoder . gb504f) (native-eol-style . gb504e) (make-transcoder . gb504d) (latin-1-codec . gb504c) (make-i/o-write-error . gb504b) (make-i/o-read-error . gb504a) (make-i/o-port-error . gb5049) (make-i/o-invalid-position-error . gb5048) (make-i/o-filename-error . gb5047) (make-i/o-file-protection-error . gb5046) (make-i/o-file-is-read-only-error . gb5045) (make-i/o-file-does-not-exist-error . gb5044) (make-i/o-file-already-exists-error . gb5043) (make-i/o-error . gb5042) (make-i/o-encoding-error . gb5041) (make-i/o-decoding-error . gb5040) (make-custom-textual-output-port . gb503f) (make-custom-textual-input/output-port . gb503e) (make-custom-textual-input-port . gb503d) (make-custom-binary-output-port . gb503c) (make-custom-binary-input/output-port . gb503b) (make-custom-binary-input-port . gb503a) (make-bytevector . gb5039) (lookahead-u8 . gb5038) (lookahead-char . gb5037) (i/o-write-error? . gb5036) (i/o-read-error? . gb5035) (i/o-port-error? . gb5034) (i/o-invalid-position-error? . gb5033) (i/o-filename-error? . gb5032) (i/o-file-protection-error? . gb5031) (i/o-file-is-read-only-error? . gb5030) (i/o-file-does-not-exist-error? . gb502f) (i/o-file-already-exists-error? . gb502e) (i/o-error? . gb502d) (i/o-error-position . gb502c) (i/o-error-port . gb502b) (i/o-error-filename . gb502a) (i/o-encoding-error? . gb5029) (i/o-encoding-error-char . gb5028) (i/o-decoding-error? . gb5027) (get-u8 . gb5026) (get-string-n! . gb5025) (get-string-n . gb5024) (get-string-all . gb5023) (get-line . gb5022) (get-datum . gb5021) (get-char . gb5020) (get-bytevector-some . gb501f) (get-bytevector-n! . gb501e) (get-bytevector-n . gb501d) (get-bytevector-all . gb501c) (flush-output-port . gb501b) (close-port . gb501a) (scheme-report-environment . gb31c7) (quotient . gb5019) (null-environment . gb31c5) (remainder . gb5018) (modulo . gb5017) (inexact->exact . gb5016) (force . gb5015) (exact->inexact . gb5014) (make-promise . gb5013) (exit . gb5012) (command-line . gb4ca4) (string-fill! . gb5011) (string-set! . gb5010) (set-cdr! . gb500f) (set-car! . gb500e) (remove . gb500d) (remv . gb500c) (remp . gb500b) (remq . gb500a) (partition . gb5009) (memv . gb5008) (memq . gb5007) (memp . gb5006) (member . gb5005) (exists . gb5004) (for-all . gb5003) (fold-right . gb5002) (fold-left . gb5001) (find . gb5000) (filter . gb4fff) (cons* . gb4ffe) (assv . gb4ffd) (assq . gb4ffc) (assp . gb4ffb) (assoc . gb4ffa) (call-with-string-output-port . gb4ff9) (call-with-port . gb4ff8) (call-with-bytevector-output-port . gb4ff7) (bytevector->string . gb4ff6) (buffer-mode? . gb4ff5) (binary-port? . gb4ff4) (with-exception-handler . gb4ff3) (raise-continuable . gb4ff2) (raise . gb4ff1) (eval . gb31cb) (environment . gb31c3) (make-enumeration . gb4ff0) (enum-set=? . gb4fef) (enum-set-universe . gb4fee) (enum-set-union . gb4fed) (enum-set-subset? . gb4fec) (enum-set-projection . gb4feb) (enum-set-member? . gb4fea) (enum-set-intersection . gb4fe9) (enum-set-indexer . gb4fe8) (enum-set-difference . gb4fe7) (enum-set-constructor . gb4fe6) (enum-set-complement . gb4fe5) (enum-set->list . gb4fe4) (who-condition? . gb4fe3) (warning? . gb4fe2) (violation? . gb4fe1) (undefined-violation? . gb4fe0) (syntax-violation? . gb4fdf) (syntax-violation-subform . gb4fde) (syntax-violation-form . gb4fdd) (syntax-violation . gb31eb) (simple-conditions . gb4fdc) (serious-condition? . gb4fdb) (non-continuable-violation? . gb4fda) (message-condition? . gb4fd9) (make-who-condition . gb4fd8) (make-warning . gb4fd7) (make-violation . gb4fd6) (make-undefined-violation . gb4fd5) (make-syntax-violation . gb4fd4) (make-serious-condition . gb4fd3) (make-non-continuable-violation . gb4fd2) (make-message-condition . gb4fd1) (make-lexical-violation . gb4fd0) (make-irritants-condition . gb4fcf) (make-implementation-restriction-violation . gb4fce) (make-error . gb4fcd) (make-assertion-violation . gb4fcc) (lexical-violation? . gb4fcb) (irritants-condition? . gb4fca) (implementation-restriction-violation? . gb4fc9) (error? . gb4fc8) (condition-who . gb4fc7) (condition-predicate . gb4fc6) (condition-message . gb4fc5) (condition-irritants . gb4fc4) (condition-accessor . gb4fc3) (condition . gb4fc2) (assertion-violation? . gb4fc1) (condition? . gb4fc0) (utf32->string . gb4fbf) (utf16->string . gb4fbe) (utf8->string . gb4fbd) (uint-list->bytevector . gb4fbc) (u8-list->bytevector . gb4fbb) (string->utf8 . gb4fba) (string->utf32 . gb4fb9) (string->utf16 . gb4fb8) (sint-list->bytevector . gb4fb7) (native-endianness . gb4fb6) (bytevector? . gb4fb5) (bytevector=? . gb4fb4) (bytevector-uint-set! . gb4fb3) (bytevector-uint-ref . gb4fb2) (bytevector-u8-set! . gb4fb1) (bytevector-u8-ref . gb4fb0) (bytevector-u64-set! . gb4faf) (bytevector-u64-ref . gb4fae) (bytevector-u64-native-set! . gb4fad) (bytevector-u64-native-ref . gb4fac) (bytevector-u32-set! . gb4fab) (bytevector-u32-ref . gb4faa) (bytevector-u32-native-set! . gb4fa9) (bytevector-u32-native-ref . gb4fa8) (bytevector-u16-set! . gb4fa7) (bytevector-u16-ref . gb4fa6) (bytevector-u16-native-set! . gb4fa5) (bytevector-u16-native-ref . gb4fa4) (bytevector-sint-set! . gb4fa3) (bytevector-sint-ref . gb4fa2) (bytevector-s8-set! . gb4fa1) (bytevector-s8-ref . gb4fa0) (bytevector-s64-set! . gb4f9f) (bytevector-s64-ref . gb4f9e) (bytevector-s64-native-set! . gb4f9d) (bytevector-s64-native-ref . gb4f9c) (bytevector-s32-set! . gb4f9b) (bytevector-s32-ref . gb4f9a) (bytevector-s32-native-set! . gb4f99) (bytevector-s32-native-ref . gb4f98) (bytevector-s16-set! . gb4f97) (bytevector-s16-ref . gb4f96) (bytevector-s16-native-set! . gb4f95) (bytevector-s16-native-ref . gb4f94) (bytevector-length . gb4f93) (bytevector-ieee-single-ref . gb4f92) (bytevector-ieee-single-set! . gb4f91) (bytevector-ieee-single-native-set! . gb4f90) (bytevector-ieee-single-native-ref . gb4f8f) (bytevector-ieee-double-set! . gb4f8e) (bytevector-ieee-double-ref . gb4f8d) (bytevector-ieee-double-native-set! . gb4f8c) (bytevector-ieee-double-native-ref . gb4f8b) (bytevector-fill! . gb4f8a) (bytevector-copy! . gb4f89) (bytevector-copy . gb4f88) (bytevector->uint-list . gb4f87) (bytevector->u8-list . gb4f86) (bytevector->sint-list . gb4f85) (no-nans-violation? . gb4f84) (no-infinities-violation? . gb4f83) (make-no-nans-violation . gb4f82) (make-no-infinities-violation . gb4f81) (real->flonum . gb4f80) (flzero? . gb4f7f) (fltruncate . gb4f7e) (fltan . gb4f7d) (flsqrt . gb4f7c) (flsin . gb4f7b) (flround . gb4f7a) (flpositive? . gb4f79) (flonum? . gb4f78) (flodd? . gb4f77) (flnumerator . gb4f76) (flnegative? . gb4f75) (flnan? . gb4f74) (flmod0 . gb4f73) (flmod . gb4f72) (flmin . gb4f71) (flmax . gb4f70) (fllog . gb4f6f) (flinteger? . gb4f6e) (flinfinite? . gb4f6d) (flfloor . gb4f6c) (flfinite? . gb4f6b) (flexpt . gb4f6a) (flexp . gb4f69) (fleven? . gb4f68) (fldiv0-and-mod0 . gb4f67) (fldiv0 . gb4f66) (fldiv-and-mod . gb4f65) (fldiv . gb4f64) (fldenominator . gb4f63) (flcos . gb4f62) (flceiling . gb4f61) (flatan . gb4f60) (flasin . gb4f5f) (flacos . gb4f5e) (flabs . gb4f5d) (fl>? . gb4f5c) (fl>=? . gb4f5b) (fl=? . gb4f5a) (fl<? . gb4f59) (fl<=? . gb4f58) (fl/ . gb4f57) (fl- . gb4f56) (fl+ . gb4f55) (fl* . gb4f54) (fixnum->flonum . gb4f53) (fxzero? . gb4f52) (fxxor . gb4f51) (fxrotate-bit-field . gb4f50) (fxreverse-bit-field . gb4f4f) (fxpositive? . gb4f4e) (fxodd? . gb4f4d) (fxnot . gb4f4c) (fxnegative? . gb4f4b) (fxmod0 . gb4f4a) (fxmod . gb4f49) (fxmin . gb4f48) (fxmax . gb4f47) (fxlength . gb4f46) (fxior . gb4f45) (fxif . gb4f44) (fxfirst-bit-set . gb4f43) (fxeven? . gb4f42) (fxdiv0-and-mod0 . gb4f41) (fxdiv0 . gb4f40) (fxdiv-and-mod . gb4f3f) (fxdiv . gb4f3e) (fxcopy-bit-field . gb4f3d) (fxcopy-bit . gb4f3c) (fxbit-set? . gb4f3b) (fxbit-field . gb4f3a) (fxbit-count . gb4f39) (fxarithmetic-shift-right . gb4f38) (fxarithmetic-shift-left . gb4f37) (fxarithmetic-shift . gb4f36) (fxand . gb4f35) (fx>? . gb4f34) (fx>=? . gb4f33) (fx=? . gb4f32) (fx<? . gb4f31) (fx<=? . gb4f30) (fx-/carry . gb4f2f) (fx- . gb4f2e) (fx+/carry . gb4f2d) (fx+ . gb4f2c) (fx*/carry . gb4f2b) (fx* . gb4f2a) (greatest-fixnum . gb4f29) (least-fixnum . gb4f28) (fixnum-width . gb4f27) (fixnum? . gb4f26) (bitwise-rotate-bit-field . gb4f25) (bitwise-reverse-bit-field . gb4f24) (bitwise-length . gb4f23) (bitwise-if . gb4f22) (bitwise-first-bit-set . gb4f21) (bitwise-copy-bit-field . gb4f20) (bitwise-copy-bit . gb4f1f) (bitwise-bit-set? . gb4f1e) (bitwise-bit-field . gb4f1d) (bitwise-bit-count . gb4f1c) (bitwise-xor . gb4f1b) (bitwise-ior . gb4f1a) (bitwise-and . gb4f19) (bitwise-not . gb4f18) (bitwise-arithmetic-shift-right . gb4f17) (bitwise-arithmetic-shift-left . gb4f16) (bitwise-arithmetic-shift . gb4f15) (zero? . gb4f14) (vector? . gb4f13) (vector-set! . gb4f12) (vector-ref . gb4f11) (vector-map . gb4f10) (vector-length . gb4f0f) (vector-for-each . gb4f0e) (vector-fill! . gb4f0d) (vector->list . gb4f0c) (vector . gb4f0b) (values . gb4f0a) (truncate . gb4f09) (tan . gb4f08) (symbol? . gb4f07) (symbol=? . gb4f06) (symbol->string . gb4f05) (substring . gb4f04) (string? . gb4f03) (string>? . gb4f02) (string>=? . gb4f01) (string=? . gb4f00) (string<? . gb4eff) (string<=? . gb4efe) (string-ref . gb4efd) (string-length . gb4efc) (string-for-each . gb4efb) (string-copy . gb4efa) (string-append . gb4ef9) (string->symbol . gb4ef8) (string->number . gb4ef7) (string->list . gb4ef6) (string . gb4ef5) (sqrt . gb4ef4) (sin . gb4ef3) (round . gb4ef2) (reverse . gb4ef1) (real? . gb4ef0) (real-valued? . gb4eef) (real-part . gb4eee) (rationalize . gb4eed) (rational? . gb4eec) (rational-valued? . gb4eeb) (procedure? . gb4eea) (positive? . gb4ee9) (pair? . gb4ee8) (odd? . gb4ee7) (numerator . gb4ee6) (number? . gb4ee5) (number->string . gb4ee4) (null? . gb4ee3) (not . gb4ee2) (negative? . gb4ee1) (nan? . gb4ee0) (min . gb4edf) (max . gb4ede) (map . gb4edd) (make-vector . gb4edc) (make-string . gb4edb) (make-rectangular . gb4eda) (make-polar . gb4ed9) (magnitude . gb4ed8) (log . gb4ed7) (list? . gb4ed6) (list-tail . gb4ed5) (list-ref . gb4ed4) (list->vector . gb4ed3) (list->string . gb4ed2) (list . gb4ed1) (length . gb4ed0) (lcm . gb4ecf) (integer? . gb4ece) (integer-valued? . gb4ecd) (integer->char . gb4ecc) (infinite? . gb4ecb) (inexact? . gb4eca) (inexact . gb4ec9) (imag-part . gb4ec8) (gcd . gb4ec7) (for-each . gb4ec6) (floor . gb4ec5) (finite? . gb4ec4) (expt . gb4ec3) (exp . gb4ec2) (exact? . gb4ec1) (exact-integer-sqrt . gb4ec0) (exact . gb4ebf) (even? . gb4ebe) (error . gb4ebd) (eqv? . gb4ebc) (equal? . gb4ebb) (eq? . gb4eba) (dynamic-wind . gb4eb9) (div0-and-mod0 . gb4eb8) (mod0 . gb4eb7) (div0 . gb4eb6) (div-and-mod . gb4eb5) (mod . gb4eb4) (div . gb4eb3) (denominator . gb4eb2) (cos . gb4eb1) (cons . gb4eb0) (complex? . gb4eaf) (char? . gb4eae) (char>? . gb4ead) (char>=? . gb4eac) (char=? . gb4eab) (char<? . gb4eaa) (char<=? . gb4ea9) (char->integer . gb4ea8) (ceiling . gb4ea7) (call-with-values . gb4ea6) (call/cc . gb4ea5) (call-with-current-continuation . gb4ea4) (cddddr . gb4ea3) (cdddar . gb4ea2) (cddadr . gb4ea1) (cddaar . gb4ea0) (cdaddr . gb4e9f) (cdadar . gb4e9e) (cdaadr . gb4e9d) (cdaaar . gb4e9c) (cadddr . gb4e9b) (caddar . gb4e9a) (cadadr . gb4e99) (cadaar . gb4e98) (caaddr . gb4e97) (caadar . gb4e96) (caaadr . gb4e95) (caaaar . gb4e94) (cdddr . gb4e93) (cddar . gb4e92) (cdadr . gb4e91) (cdaar . gb4e90) (caddr . gb4e8f) (cadar . gb4e8e) (caadr . gb4e8d) (caaar . gb4e8c) (cddr . gb4e8b) (cdar . gb4e8a) (cadr . gb4e89) (caar . gb4e88) (cdr . gb4e87) (car . gb4e86) (boolean? . gb4e85) (boolean=? . gb4e84) (atan . gb4e83) (assertion-violation . gb4e82) (assertion-error . gb31e5) (asin . gb4e81) (apply . gb4e80) (append . gb4e7f) (angle . gb4e7e) (acos . gb4e7d) (abs . gb4e7c) (/ . gb4e7b) (* . gb4e7a) (- . gb4e79) (+ . gb4e78) (>= . gb4e77) (> . gb4e76) (= . gb4e75) (<= . gb4e74) (< . gb4e73) (library . gb4e72) (&no-nans . gb4e71) (&no-infinities . gb4e70) (&i/o-encoding . gb4e6f) (&i/o-decoding . gb4e6e) (&i/o-port . gb4e6d) (&i/o-file-does-not-exist . gb4e6c) (&i/o-file-already-exists . gb4e6b) (&i/o-file-is-read-only . gb4e6a) (&i/o-file-protection . gb4e69) (&i/o-filename . gb4e68) (&i/o-invalid-position . gb4e67) (&i/o-write . gb4e66) (&i/o-read . gb4e65) (&i/o . gb4e64) (&undefined . gb4e63) (&syntax . gb4e62) (&lexical . gb4e61) (&implementation-restriction . gb4e60) (&non-continuable . gb4e5f) (&who . gb4e5e) (&irritants . gb4e5d) (&assertion . gb4e5c) (&violation . gb4e5b) (&error . gb4e5a) (&serious . gb4e59) (&warning . gb4e58) (&message . gb4e57) (&condition . gb4e56) (define-condition-type . gb4e55) (define-enumeration . gb4e54) (define-record-type . gb4e53) (parent-rtd . gb4e52) (nongenerative . gb4e51) (opaque . gb4e50) (sealed . gb4e4f) (protocol . gb4e4e) (parent . gb4e4d) (immutable . gb4e4c) (mutable . gb4e4b) (fields . gb4e4a) (error-handling-mode . gb4e49) (file-options . gb4e48) (buffer-mode . gb4e47) (eol-style . gb4e46) (guard . gb4e45) (trace-define . gb4e44) (trace-lambda . gb4e43) (unsyntax-splicing . gb4e42) (unsyntax . gb4e41) (unquote-splicing . gb4e40) (unquote . gb4e3f) (_ . gb4e3e) (else . gb4e3d) (=> . gb4e3c) (... . gb4e3b) (assert . gb4e3a) (endianness . gb4e39) (delay . gb4e38) (time . gb4e37) (do . gb4e36) (cond . gb4e35) (let* . gb4e34) (let*-values . gb4e33) (let-values . gb4e32) (identifier-syntax . gb4e31) (with-syntax . gb4e30) (quasisyntax . gb4e2f) (quasiquote . gb4e2e) (syntax-rules . gb4e2d) (include . gb4e2c) (define-struct . gb4e2b) (record-constructor-descriptor . gb4e2a) (record-type-descriptor . gb4e29) (case . gb4e28) (parameterize . gb4e27) (unless . gb4e26) (when . gb4e25) (or . gb4e24) (and . gb4e23) (if . gb4e22) (let . gb4e21) (letrec* . gb4e20) (letrec . gb4e1f) (type-descriptor . gb4e1e) (case-lambda . gb4e1d) (lambda . gb4e1c) (syntax . gb4e1b) (syntax-case . gb4e1a) (quote . gb4e19) (foreign-call . gb4e18) (letrec-syntax . gb4e17) (let-syntax . gb4e16) (set! . gb4e15) (import . gb4e14) (begin . gb4e13) (module . gb4e12) (define-syntax . gb4e11) (define . gb4e10)) '((gb51c9 core-prim . &no-nans-rcd) (gb51c8 core-prim . &no-nans-rtd) (gb51c7 core-prim . &no-infinities-rcd) (gb51c6 core-prim . &no-infinities-rtd) (gb51c5 core-prim . &i/o-encoding-rcd) (gb51c4 core-prim . &i/o-encoding-rtd) (gb51c3 core-prim . &i/o-decoding-rcd) (gb51c2 core-prim . &i/o-decoding-rtd) (gb51c1 core-prim . &i/o-port-rcd) (gb51c0 core-prim . &i/o-port-rtd) (gb51bf core-prim . &i/o-file-does-not-exist-rcd) (gb51be core-prim . &i/o-file-does-not-exist-rtd) (gb51bd core-prim . &i/o-file-already-exists-rcd) (gb51bc core-prim . &i/o-file-already-exists-rtd) (gb51bb core-prim . &i/o-file-is-read-only-rcd) (gb51ba core-prim . &i/o-file-is-read-only-rtd) (gb51b9 core-prim . &i/o-file-protection-rcd) (gb51b8 core-prim . &i/o-file-protection-rtd) (gb51b7 core-prim . &i/o-filename-rcd) (gb51b6 core-prim . &i/o-filename-rtd) (gb51b5 core-prim . &i/o-invalid-position-rcd) (gb51b4 core-prim . &i/o-invalid-position-rtd) (gb51b3 core-prim . &i/o-write-rcd) (gb51b2 core-prim . &i/o-write-rtd) (gb51b1 core-prim . &i/o-read-rcd) (gb51b0 core-prim . &i/o-read-rtd) (gb51af core-prim . &i/o-rcd) (gb51ae core-prim . &i/o-rtd) (gb51ad core-prim . &undefined-rcd) (gb51ac core-prim . &undefined-rtd) (gb51ab core-prim . &syntax-rcd) (gb51aa core-prim . &syntax-rtd) (gb51a9 core-prim . &lexical-rcd) (gb51a8 core-prim . &lexical-rtd) (gb51a7 core-prim . &implementation-restriction-rcd) (gb51a6 core-prim . &implementation-restriction-rtd) (gb51a5 core-prim . &non-continuable-rcd) (gb51a4 core-prim . &non-continuable-rtd) (gb51a3 core-prim . &who-rcd) (gb51a2 core-prim . &who-rtd) (gb51a1 core-prim . &irritants-rcd) (gb51a0 core-prim . &irritants-rtd) (gb519f core-prim . &assertion-rcd) (gb519e core-prim . &assertion-rtd) (gb519d core-prim . &violation-rcd) (gb519c core-prim . &violation-rtd) (gb519b core-prim . &error-rcd) (gb519a core-prim . &error-rtd) (gb5199 core-prim . &serious-rcd) (gb5198 core-prim . &serious-rtd) (gb5197 core-prim . &warning-rcd) (gb5196 core-prim . &warning-rtd) (gb5195 core-prim . &message-rcd) (gb5194 core-prim . &message-rtd) (gb5193 core-prim . &condition-rcd) (gb5192 core-prim . &condition-rtd) (gb31e7 core-prim . syntax-error) (gb310b core-prim . syntax-dispatch) (gb5191 core-prim . pretty-print) (gb5190 core-prim . eval-core) (gb518f core-prim . set-symbol-value!) (gb518e core-prim . symbol-value) (gb518d core-prim . gensym) (gb518c core-prim . void) (gb4caa core-prim . load) (gb31f9 core-prim . interaction-environment) (gb518b core-prim . char-ready?) (gb518a core-prim . regexp?) (gb5189 core-prim . read-line) (gb5188 core-prim . gensym-prefix-set!) (gb5187 core-prim . ungensym) (gb5186 core-prim . alist->eq-hash-table) (gb5185 core-prim . assoc-ref) (gb5184 core-prim . print) (gb5183 core-prim . format) (gb5182 core-prim . host-os) (gb2b4a core-prim . library-path) (gb5181 core-prim . standard-library-path) (gb5180 core-prim . ssl-supported?) (gb517f core-prim . ssl-socket?) (gb517e core-prim . socket-sslize!) (gb517d core-prim . %monapi-stream-read) (gb517c core-prim . %monapi-stream-write) (gb517b core-prim . %monapi-stream-handle) (gb517a core-prim . %monapi-make-stream) (gb5179 core-prim . %monapi-name-add!) (gb5178 core-prim . %monapi-message-receive) (gb5177 core-prim . %monapi-name-whereis) (gb5176 core-prim . %monapi-message-reply) (gb5175 core-prim . %monapi-message-send-receive) (gb5174 core-prim . %monapi-message-send) (gb5173 core-prim . process-terminate!) (gb5172 core-prim . process-list) (gb5171 core-prim . file-newer?) (gb5170 core-prim . stat-mtime) (gb516f core-prim . write-to-file) (gb516e core-prim . file->list) (gb516d core-prim . file->string) (gb516c core-prim . digit->integer) (gb516b core-prim . call-with-string-input-port) (gb516a core-prim . call-with-string-io) (gb5169 core-prim . string-split) (gb5168 core-prim . bytevector-for-each) (gb5167 core-prim . string->regexp) (gb5166 core-prim . rxmatch) (gb5165 core-prim . regexp-replace-all) (gb5164 core-prim . hashtable-fold-left) (gb5163 core-prim . hashtable-for-each) (gb2934 core-prim . mosh-cache-dir) (gb5162 core-prim . %start-process) (gb5161 core-prim . %call-process) (gb5160 core-prim . local-tz-offset) (gb515f core-prim . microseconds) (gb515e core-prim . directory-list) (gb515d core-prim . set-current-directory!) (gb515c core-prim . expand-path) (gb515b core-prim . current-directory) (gb515a core-prim . %getpid) (gb5159 core-prim . %waitpid) (gb5158 core-prim . simple-struct-name) (gb5157 core-prim . simple-struct-set!) (gb5156 core-prim . simple-struct-ref) (gb5155 core-prim . make-simple-struct) (gb5154 core-prim . simple-struct?) (gb5153 core-prim . pointer-ref-c-int64) (gb5152 core-prim . pointer-ref-c-int32) (gb5151 core-prim . pointer-ref-c-int16) (gb5150 core-prim . pointer-ref-c-int8) (gb514f core-prim . pointer-ref-c-uint64) (gb514e core-prim . pointer-ref-c-uint32) (gb514d core-prim . pointer-ref-c-uint16) (gb514c core-prim . pointer-ref-c-uint8) (gb514b core-prim . pointer-set-c-uint64!) (gb514a core-prim . pointer-set-c-uint32!) (gb5149 core-prim . pointer-set-c-uint16!) (gb5148 core-prim . pointer-set-c-uint8!) (gb5147 core-prim . pointer-set-c-int64!) (gb5146 core-prim . pointer-set-c-int32!) (gb5145 core-prim . pointer-set-c-int16!) (gb5144 core-prim . pointer-set-c-int8!) (gb5143 core-prim . pointer-set-c-pointer!) (gb5142 core-prim . pointer-set-c-double!) (gb5141 core-prim . pointer-set-c-float!) (gb5140 core-prim . pointer-set-c-long-long!) (gb513f core-prim . pointer-set-c-long!) (gb513e core-prim . pointer-set-c-int!) (gb513d core-prim . pointer-set-c-short!) (gb513c core-prim . pointer-set-c-char!) (gb513b core-prim . pointer-ref-c-pointer) (gb513a core-prim . pointer-ref-c-double) (gb5139 core-prim . pointer-ref-c-float) (gb5138 core-prim . pointer-ref-c-unsigned-long-long) (gb5137 core-prim . pointer-ref-c-signed-long-long) (gb5136 core-prim . pointer-ref-c-unsigned-long) (gb5135 core-prim . pointer-ref-c-signed-long) (gb5134 core-prim . pointer-ref-c-unsigned-int) (gb5133 core-prim . pointer-ref-c-signed-int) (gb5132 core-prim . pointer-ref-c-unsigned-short) (gb5131 core-prim . pointer-ref-c-signed-short) (gb5130 core-prim . pointer-ref-c-unsigned-char) (gb512f core-prim . pointer-ref-c-signed-char) (gb512e core-prim . pointer->integer) (gb512d core-prim . integer->pointer) (gb512c core-prim . pointer?) (gb512b core-prim . shared-errno) (gb512a core-prim . %ffi-error) (gb5129 core-prim . %ffi-close) (gb5128 core-prim . %ffi-free-c-callback-trampoline) (gb5127 core-prim . %ffi-make-c-callback-trampoline) (gb5126 core-prim . %ffi-free) (gb5125 core-prim . %ffi-malloc) (gb5124 core-prim . %ffi-supported?) (gb5123 core-prim . %ffi-pointer->string) (gb5122 core-prim . %ffi-call) (gb5121 core-prim . %ffi-lookup) (gb5120 core-prim . %ffi-open) (gb511f core-prim . null-terminated-utf8->string) (gb511e core-prim . null-terminated-bytevector->string) (gb511d core-prim . %exec) (gb511c core-prim . %fork) (gb511b core-prim . %pipe) (gb511a core-prim . %confstr) (gb5119 core-prim . %dup) (gb5118 core-prim . p) (gb5117 core-prim . open-output-string) (gb5116 core-prim . get-output-string) (gb5115 core-prim . file-stat-ctime) (gb5114 core-prim . file-stat-atime) (gb5113 core-prim . file-stat-mtime) (gb5112 core-prim . file-size-in-bytes) (gb5111 core-prim . file-writable?) (gb5110 core-prim . file-executable?) (gb510f core-prim . file-readable?) (gb510e core-prim . file-regular?) (gb510d core-prim . file-symbolic-link?) (gb510c core-prim . file-directory?) (gb510b core-prim . create-symbolic-link) (gb510a core-prim . rename-file) (gb5109 core-prim . delete-directory) (gb5108 core-prim . create-directory) (gb5107 core-prim . create-mosh-cache-dir) (gb5106 core-prim . get-environment-variables) (gb5105 core-prim . current-exception-handler) (gb5104 core-prim . get-environment-variable) (gb5103 core-prim . join-wraps) (gb5102 core-prim . id->real-label) (gb5101 core-prim . same-marks?) (gb5100 core-prim . same-marks*?) (gb50ff core-prim . get-timeofday) (gb50fe core-prim . get-command-line) (gb50fd core-prim . sys-display) (gb50fc core-prim . whereis) (gb50fb core-prim . register) (gb50fa core-prim . vm-join!) (gb50f9 core-prim . vm-set-value!) (gb50f8 core-prim . vm?) (gb50f7 core-prim . main-vm?) (gb50f6 core-prim . vm-eval) (gb50f5 core-prim . vm-self) (gb50f4 core-prim . vm-start!) (gb50f3 core-prim . make-vm) (gb50f2 core-prim . mutex-try-lock!) (gb50f1 core-prim . mutex-unlock!) (gb50f0 core-prim . mutex-lock!) (gb50ef core-prim . mutex?) (gb50ee core-prim . make-mutex) (gb50ed core-prim . condition-variable-notify-all!) (gb50ec core-prim . condition-variable-notify!) (gb50eb core-prim . condition-variable-wait!) (gb50ea core-prim . make-condition-variable) (gb50e9 core-prim . write/ss) (gb50e8 core-prim . mosh-executable-path) (gb50e7 core-prim . make-file-options) (gb50e6 core-prim . source-info) (gb50e5 core-prim . make-compiler-instruction) (gb50e4 core-prim . make-instruction) (gb50e3 core-prim . set-annotation!) (gb50e2 core-prim . get-annotation) (gb50e1 core-prim . annotated-pair?) (gb50e0 core-prim . annotated-cons) (gb50df core-prim . set-source-info!) (gb50de core-prim . bignum?) (gb50dd core-prim . fast-equal?) (gb50dc core-prim . fasl-read) (gb50db core-prim . fasl-write) (gb50da core-prim . time-usage) (gb50d9 core-prim . os-constant) (gb50d8 core-prim . condition-printer) (gb50d7 core-prim . disasm) (gb2932 core-prim . make-parameter) (gb50d6 core-prim . socket-port) (gb50d5 core-prim . socket-shutdown) (gb50d4 core-prim . socket-close) (gb50d3 core-prim . socket-send) (gb50d2 core-prim . socket-recv!) (gb50d1 core-prim . socket-recv) (gb50d0 core-prim . make-server-socket) (gb50cf core-prim . make-client-socket) (gb50ce core-prim . socket-accept) (gb50cd core-prim . socket?) (gb50cc core-prim . string-upcase) (gb50cb core-prim . string-titlecase) (gb50ca core-prim . string-normalize-nfkd) (gb50c9 core-prim . string-normalize-nfkc) (gb50c8 core-prim . string-normalize-nfd) (gb50c7 core-prim . string-normalize-nfc) (gb50c6 core-prim . string-foldcase) (gb50c5 core-prim . string-downcase) (gb50c4 core-prim . string-ci>?) (gb50c3 core-prim . string-ci>=?) (gb50c2 core-prim . string-ci=?) (gb50c1 core-prim . string-ci<?) (gb50c0 core-prim . string-ci<=?) (gb50bf core-prim . char-whitespace?) (gb50be core-prim . char-upper-case?) (gb50bd core-prim . char-title-case?) (gb50bc core-prim . char-numeric?) (gb50bb core-prim . char-lower-case?) (gb50ba core-prim . char-general-category) (gb50b9 core-prim . char-upcase) (gb50b8 core-prim . char-titlecase) (gb50b7 core-prim . char-foldcase) (gb50b6 core-prim . char-downcase) (gb50b5 core-prim . char-ci>?) (gb50b4 core-prim . char-ci>=?) (gb50b3 core-prim . char-ci=?) (gb50b2 core-prim . char-ci<?) (gb50b1 core-prim . char-ci<=?) (gb50b0 core-prim . char-alphabetic?) (gb2f36 core-prim . make-variable-transformer) (gb31ed core-prim . identifier?) (gb31d9 core-prim . generate-temporaries) (gb31db core-prim . free-identifier=?) (gb31f1 core-prim . syntax->datum) (gb31ef core-prim . datum->syntax) (gb31dd core-prim . bound-identifier=?) (gb50af core-prim . record-type-descriptor?) (gb50ae core-prim . record-predicate) (gb50ad core-prim . record-mutator) (gb50ac core-prim . record-constructor) (gb50ab core-prim . record-accessor) (gb50aa core-prim . make-record-type-descriptor) (gb50a9 core-prim . make-record-constructor-descriptor) (gb50a8 core-prim . record?) (gb50a7 core-prim . record-type-uid) (gb50a6 core-prim . record-type-sealed?) (gb50a5 core-prim . record-type-parent) (gb50a4 core-prim . record-type-opaque?) (gb50a3 core-prim . record-type-name) (gb50a2 core-prim . record-type-generative?) (gb50a1 core-prim . record-type-field-names) (gb50a0 core-prim . record-rtd) (gb509f core-prim . record-field-mutable?) (gb509e core-prim . delete-file) (gb509d core-prim . file-exists?) (gb509c core-prim . vector-sort!) (gb509b core-prim . vector-sort) (gb509a core-prim . list-sort) (gb5099 core-prim . symbol-hash) (gb5098 core-prim . string-ci-hash) (gb5097 core-prim . string-hash) (gb5096 core-prim . equal-hash) (gb5095 core-prim . hashtable-equivalence-function) (gb5094 core-prim . make-hashtable) (gb5093 core-prim . hashtable-hash-function) (gb5092 core-prim . make-eqv-hashtable) (gb5091 core-prim . make-eq-hashtable) (gb5090 core-prim . hashtable?) (gb508f core-prim . hashtable-update!) (gb508e core-prim . hashtable-size) (gb508d core-prim . hashtable-set!) (gb508c core-prim . hashtable-ref) (gb508b core-prim . hashtable-mutable?) (gb508a core-prim . hashtable-keys) (gb5089 core-prim . hashtable-entries) (gb5088 core-prim . hashtable-delete!) (gb5087 core-prim . hashtable-copy) (gb5086 core-prim . hashtable-contains?) (gb5085 core-prim . hashtable-clear!) (gb5084 core-prim . call-with-output-file) (gb5083 core-prim . call-with-input-file) (gb5082 core-prim . write-char) (gb5081 core-prim . write) (gb5080 core-prim . with-output-to-file) (gb507f core-prim . with-input-from-file) (gb507e core-prim . read-char) (gb507d core-prim . read) (gb507c core-prim . peek-char) (gb507b core-prim . open-output-file) (gb507a core-prim . open-input-file) (gb5079 core-prim . newline) (gb5078 core-prim . display) (gb5077 core-prim . close-output-port) (gb5076 core-prim . close-input-port) (gb5075 core-prim . eof-object?) (gb5074 core-prim . eof-object) (gb5073 core-prim . current-error-port) (gb5072 core-prim . current-output-port) (gb5071 core-prim . current-input-port) (gb5070 core-prim . output-port?) (gb506f core-prim . input-port?) (gb506e core-prim . utf-8-codec) (gb506d core-prim . utf-16-codec) (gb506c core-prim . transcoder-error-handling-mode) (gb506b core-prim . transcoder-eol-style) (gb506a core-prim . transcoder-codec) (gb5069 core-prim . transcoded-port) (gb5068 core-prim . textual-port?) (gb5067 core-prim . string->bytevector) (gb5066 core-prim . standard-output-port) (gb5065 core-prim . standard-input-port) (gb5064 core-prim . standard-error-port) (gb5063 core-prim . set-port-position!) (gb5062 core-prim . put-u8) (gb5061 core-prim . put-string) (gb5060 core-prim . put-datum) (gb505f core-prim . put-char) (gb505e core-prim . put-bytevector) (gb505d core-prim . port?) (gb505c core-prim . port-transcoder) (gb505b core-prim . port-position) (gb505a core-prim . port-has-set-port-position!?) (gb5059 core-prim . port-has-port-position?) (gb5058 core-prim . port-eof?) (gb5057 core-prim . output-port-buffer-mode) (gb5056 core-prim . open-string-output-port) (gb5055 core-prim . open-string-input-port) (gb5054 core-prim . open-file-output-port) (gb5053 core-prim . open-file-input/output-port) (gb5052 core-prim . open-file-input-port) (gb5051 core-prim . open-bytevector-output-port) (gb5050 core-prim . open-bytevector-input-port) (gb504f core-prim . native-transcoder) (gb504e core-prim . native-eol-style) (gb504d core-prim . make-transcoder) (gb504c core-prim . latin-1-codec) (gb504b core-prim . make-i/o-write-error) (gb504a core-prim . make-i/o-read-error) (gb5049 core-prim . make-i/o-port-error) (gb5048 core-prim . make-i/o-invalid-position-error) (gb5047 core-prim . make-i/o-filename-error) (gb5046 core-prim . make-i/o-file-protection-error) (gb5045 core-prim . make-i/o-file-is-read-only-error) (gb5044 core-prim . make-i/o-file-does-not-exist-error) (gb5043 core-prim . make-i/o-file-already-exists-error) (gb5042 core-prim . make-i/o-error) (gb5041 core-prim . make-i/o-encoding-error) (gb5040 core-prim . make-i/o-decoding-error) (gb503f core-prim . make-custom-textual-output-port) (gb503e core-prim . make-custom-textual-input/output-port) (gb503d core-prim . make-custom-textual-input-port) (gb503c core-prim . make-custom-binary-output-port) (gb503b core-prim . make-custom-binary-input/output-port) (gb503a core-prim . make-custom-binary-input-port) (gb5039 core-prim . make-bytevector) (gb5038 core-prim . lookahead-u8) (gb5037 core-prim . lookahead-char) (gb5036 core-prim . i/o-write-error?) (gb5035 core-prim . i/o-read-error?) (gb5034 core-prim . i/o-port-error?) (gb5033 core-prim . i/o-invalid-position-error?) (gb5032 core-prim . i/o-filename-error?) (gb5031 core-prim . i/o-file-protection-error?) (gb5030 core-prim . i/o-file-is-read-only-error?) (gb502f core-prim . i/o-file-does-not-exist-error?) (gb502e core-prim . i/o-file-already-exists-error?) (gb502d core-prim . i/o-error?) (gb502c core-prim . i/o-error-position) (gb502b core-prim . i/o-error-port) (gb502a core-prim . i/o-error-filename) (gb5029 core-prim . i/o-encoding-error?) (gb5028 core-prim . i/o-encoding-error-char) (gb5027 core-prim . i/o-decoding-error?) (gb5026 core-prim . get-u8) (gb5025 core-prim . get-string-n!) (gb5024 core-prim . get-string-n) (gb5023 core-prim . get-string-all) (gb5022 core-prim . get-line) (gb5021 core-prim . get-datum) (gb5020 core-prim . get-char) (gb501f core-prim . get-bytevector-some) (gb501e core-prim . get-bytevector-n!) (gb501d core-prim . get-bytevector-n) (gb501c core-prim . get-bytevector-all) (gb501b core-prim . flush-output-port) (gb501a core-prim . close-port) (gb31c7 core-prim . scheme-report-environment) (gb5019 core-prim . quotient) (gb31c5 core-prim . null-environment) (gb5018 core-prim . remainder) (gb5017 core-prim . modulo) (gb5016 core-prim . inexact->exact) (gb5015 core-prim . force) (gb5014 core-prim . exact->inexact) (gb5013 core-prim . make-promise) (gb5012 core-prim . exit) (gb4ca4 core-prim . command-line) (gb5011 core-prim . string-fill!) (gb5010 core-prim . string-set!) (gb500f core-prim . set-cdr!) (gb500e core-prim . set-car!) (gb500d core-prim . remove) (gb500c core-prim . remv) (gb500b core-prim . remp) (gb500a core-prim . remq) (gb5009 core-prim . partition) (gb5008 core-prim . memv) (gb5007 core-prim . memq) (gb5006 core-prim . memp) (gb5005 core-prim . member) (gb5004 core-prim . exists) (gb5003 core-prim . for-all) (gb5002 core-prim . fold-right) (gb5001 core-prim . fold-left) (gb5000 core-prim . find) (gb4fff core-prim . filter) (gb4ffe core-prim . cons*) (gb4ffd core-prim . assv) (gb4ffc core-prim . assq) (gb4ffb core-prim . assp) (gb4ffa core-prim . assoc) (gb4ff9 core-prim . call-with-string-output-port) (gb4ff8 core-prim . call-with-port) (gb4ff7 core-prim . call-with-bytevector-output-port) (gb4ff6 core-prim . bytevector->string) (gb4ff5 core-prim . buffer-mode?) (gb4ff4 core-prim . binary-port?) (gb4ff3 core-prim . with-exception-handler) (gb4ff2 core-prim . raise-continuable) (gb4ff1 core-prim . raise) (gb31cb core-prim . eval) (gb31c3 core-prim . environment) (gb4ff0 core-prim . make-enumeration) (gb4fef core-prim . enum-set=?) (gb4fee core-prim . enum-set-universe) (gb4fed core-prim . enum-set-union) (gb4fec core-prim . enum-set-subset?) (gb4feb core-prim . enum-set-projection) (gb4fea core-prim . enum-set-member?) (gb4fe9 core-prim . enum-set-intersection) (gb4fe8 core-prim . enum-set-indexer) (gb4fe7 core-prim . enum-set-difference) (gb4fe6 core-prim . enum-set-constructor) (gb4fe5 core-prim . enum-set-complement) (gb4fe4 core-prim . enum-set->list) (gb4fe3 core-prim . who-condition?) (gb4fe2 core-prim . warning?) (gb4fe1 core-prim . violation?) (gb4fe0 core-prim . undefined-violation?) (gb4fdf core-prim . syntax-violation?) (gb4fde core-prim . syntax-violation-subform) (gb4fdd core-prim . syntax-violation-form) (gb31eb core-prim . syntax-violation) (gb4fdc core-prim . simple-conditions) (gb4fdb core-prim . serious-condition?) (gb4fda core-prim . non-continuable-violation?) (gb4fd9 core-prim . message-condition?) (gb4fd8 core-prim . make-who-condition) (gb4fd7 core-prim . make-warning) (gb4fd6 core-prim . make-violation) (gb4fd5 core-prim . make-undefined-violation) (gb4fd4 core-prim . make-syntax-violation) (gb4fd3 core-prim . make-serious-condition) (gb4fd2 core-prim . make-non-continuable-violation) (gb4fd1 core-prim . make-message-condition) (gb4fd0 core-prim . make-lexical-violation) (gb4fcf core-prim . make-irritants-condition) (gb4fce core-prim . make-implementation-restriction-violation) (gb4fcd core-prim . make-error) (gb4fcc core-prim . make-assertion-violation) (gb4fcb core-prim . lexical-violation?) (gb4fca core-prim . irritants-condition?) (gb4fc9 core-prim . implementation-restriction-violation?) (gb4fc8 core-prim . error?) (gb4fc7 core-prim . condition-who) (gb4fc6 core-prim . condition-predicate) (gb4fc5 core-prim . condition-message) (gb4fc4 core-prim . condition-irritants) (gb4fc3 core-prim . condition-accessor) (gb4fc2 core-prim . condition) (gb4fc1 core-prim . assertion-violation?) (gb4fc0 core-prim . condition?) (gb4fbf core-prim . utf32->string) (gb4fbe core-prim . utf16->string) (gb4fbd core-prim . utf8->string) (gb4fbc core-prim . uint-list->bytevector) (gb4fbb core-prim . u8-list->bytevector) (gb4fba core-prim . string->utf8) (gb4fb9 core-prim . string->utf32) (gb4fb8 core-prim . string->utf16) (gb4fb7 core-prim . sint-list->bytevector) (gb4fb6 core-prim . native-endianness) (gb4fb5 core-prim . bytevector?) (gb4fb4 core-prim . bytevector=?) (gb4fb3 core-prim . bytevector-uint-set!) (gb4fb2 core-prim . bytevector-uint-ref) (gb4fb1 core-prim . bytevector-u8-set!) (gb4fb0 core-prim . bytevector-u8-ref) (gb4faf core-prim . bytevector-u64-set!) (gb4fae core-prim . bytevector-u64-ref) (gb4fad core-prim . bytevector-u64-native-set!) (gb4fac core-prim . bytevector-u64-native-ref) (gb4fab core-prim . bytevector-u32-set!) (gb4faa core-prim . bytevector-u32-ref) (gb4fa9 core-prim . bytevector-u32-native-set!) (gb4fa8 core-prim . bytevector-u32-native-ref) (gb4fa7 core-prim . bytevector-u16-set!) (gb4fa6 core-prim . bytevector-u16-ref) (gb4fa5 core-prim . bytevector-u16-native-set!) (gb4fa4 core-prim . bytevector-u16-native-ref) (gb4fa3 core-prim . bytevector-sint-set!) (gb4fa2 core-prim . bytevector-sint-ref) (gb4fa1 core-prim . bytevector-s8-set!) (gb4fa0 core-prim . bytevector-s8-ref) (gb4f9f core-prim . bytevector-s64-set!) (gb4f9e core-prim . bytevector-s64-ref) (gb4f9d core-prim . bytevector-s64-native-set!) (gb4f9c core-prim . bytevector-s64-native-ref) (gb4f9b core-prim . bytevector-s32-set!) (gb4f9a core-prim . bytevector-s32-ref) (gb4f99 core-prim . bytevector-s32-native-set!) (gb4f98 core-prim . bytevector-s32-native-ref) (gb4f97 core-prim . bytevector-s16-set!) (gb4f96 core-prim . bytevector-s16-ref) (gb4f95 core-prim . bytevector-s16-native-set!) (gb4f94 core-prim . bytevector-s16-native-ref) (gb4f93 core-prim . bytevector-length) (gb4f92 core-prim . bytevector-ieee-single-ref) (gb4f91 core-prim . bytevector-ieee-single-set!) (gb4f90 core-prim . bytevector-ieee-single-native-set!) (gb4f8f core-prim . bytevector-ieee-single-native-ref) (gb4f8e core-prim . bytevector-ieee-double-set!) (gb4f8d core-prim . bytevector-ieee-double-ref) (gb4f8c core-prim . bytevector-ieee-double-native-set!) (gb4f8b core-prim . bytevector-ieee-double-native-ref) (gb4f8a core-prim . bytevector-fill!) (gb4f89 core-prim . bytevector-copy!) (gb4f88 core-prim . bytevector-copy) (gb4f87 core-prim . bytevector->uint-list) (gb4f86 core-prim . bytevector->u8-list) (gb4f85 core-prim . bytevector->sint-list) (gb4f84 core-prim . no-nans-violation?) (gb4f83 core-prim . no-infinities-violation?) (gb4f82 core-prim . make-no-nans-violation) (gb4f81 core-prim . make-no-infinities-violation) (gb4f80 core-prim . real->flonum) (gb4f7f core-prim . flzero?) (gb4f7e core-prim . fltruncate) (gb4f7d core-prim . fltan) (gb4f7c core-prim . flsqrt) (gb4f7b core-prim . flsin) (gb4f7a core-prim . flround) (gb4f79 core-prim . flpositive?) (gb4f78 core-prim . flonum?) (gb4f77 core-prim . flodd?) (gb4f76 core-prim . flnumerator) (gb4f75 core-prim . flnegative?) (gb4f74 core-prim . flnan?) (gb4f73 core-prim . flmod0) (gb4f72 core-prim . flmod) (gb4f71 core-prim . flmin) (gb4f70 core-prim . flmax) (gb4f6f core-prim . fllog) (gb4f6e core-prim . flinteger?) (gb4f6d core-prim . flinfinite?) (gb4f6c core-prim . flfloor) (gb4f6b core-prim . flfinite?) (gb4f6a core-prim . flexpt) (gb4f69 core-prim . flexp) (gb4f68 core-prim . fleven?) (gb4f67 core-prim . fldiv0-and-mod0) (gb4f66 core-prim . fldiv0) (gb4f65 core-prim . fldiv-and-mod) (gb4f64 core-prim . fldiv) (gb4f63 core-prim . fldenominator) (gb4f62 core-prim . flcos) (gb4f61 core-prim . flceiling) (gb4f60 core-prim . flatan) (gb4f5f core-prim . flasin) (gb4f5e core-prim . flacos) (gb4f5d core-prim . flabs) (gb4f5c core-prim . fl>?) (gb4f5b core-prim . fl>=?) (gb4f5a core-prim . fl=?) (gb4f59 core-prim . fl<?) (gb4f58 core-prim . fl<=?) (gb4f57 core-prim . fl/) (gb4f56 core-prim . fl-) (gb4f55 core-prim . fl+) (gb4f54 core-prim . fl*) (gb4f53 core-prim . fixnum->flonum) (gb4f52 core-prim . fxzero?) (gb4f51 core-prim . fxxor) (gb4f50 core-prim . fxrotate-bit-field) (gb4f4f core-prim . fxreverse-bit-field) (gb4f4e core-prim . fxpositive?) (gb4f4d core-prim . fxodd?) (gb4f4c core-prim . fxnot) (gb4f4b core-prim . fxnegative?) (gb4f4a core-prim . fxmod0) (gb4f49 core-prim . fxmod) (gb4f48 core-prim . fxmin) (gb4f47 core-prim . fxmax) (gb4f46 core-prim . fxlength) (gb4f45 core-prim . fxior) (gb4f44 core-prim . fxif) (gb4f43 core-prim . fxfirst-bit-set) (gb4f42 core-prim . fxeven?) (gb4f41 core-prim . fxdiv0-and-mod0) (gb4f40 core-prim . fxdiv0) (gb4f3f core-prim . fxdiv-and-mod) (gb4f3e core-prim . fxdiv) (gb4f3d core-prim . fxcopy-bit-field) (gb4f3c core-prim . fxcopy-bit) (gb4f3b core-prim . fxbit-set?) (gb4f3a core-prim . fxbit-field) (gb4f39 core-prim . fxbit-count) (gb4f38 core-prim . fxarithmetic-shift-right) (gb4f37 core-prim . fxarithmetic-shift-left) (gb4f36 core-prim . fxarithmetic-shift) (gb4f35 core-prim . fxand) (gb4f34 core-prim . fx>?) (gb4f33 core-prim . fx>=?) (gb4f32 core-prim . fx=?) (gb4f31 core-prim . fx<?) (gb4f30 core-prim . fx<=?) (gb4f2f core-prim . fx-/carry) (gb4f2e core-prim . fx-) (gb4f2d core-prim . fx+/carry) (gb4f2c core-prim . fx+) (gb4f2b core-prim . fx*/carry) (gb4f2a core-prim . fx*) (gb4f29 core-prim . greatest-fixnum) (gb4f28 core-prim . least-fixnum) (gb4f27 core-prim . fixnum-width) (gb4f26 core-prim . fixnum?) (gb4f25 core-prim . bitwise-rotate-bit-field) (gb4f24 core-prim . bitwise-reverse-bit-field) (gb4f23 core-prim . bitwise-length) (gb4f22 core-prim . bitwise-if) (gb4f21 core-prim . bitwise-first-bit-set) (gb4f20 core-prim . bitwise-copy-bit-field) (gb4f1f core-prim . bitwise-copy-bit) (gb4f1e core-prim . bitwise-bit-set?) (gb4f1d core-prim . bitwise-bit-field) (gb4f1c core-prim . bitwise-bit-count) (gb4f1b core-prim . bitwise-xor) (gb4f1a core-prim . bitwise-ior) (gb4f19 core-prim . bitwise-and) (gb4f18 core-prim . bitwise-not) (gb4f17 core-prim . bitwise-arithmetic-shift-right) (gb4f16 core-prim . bitwise-arithmetic-shift-left) (gb4f15 core-prim . bitwise-arithmetic-shift) (gb4f14 core-prim . zero?) (gb4f13 core-prim . vector?) (gb4f12 core-prim . vector-set!) (gb4f11 core-prim . vector-ref) (gb4f10 core-prim . vector-map) (gb4f0f core-prim . vector-length) (gb4f0e core-prim . vector-for-each) (gb4f0d core-prim . vector-fill!) (gb4f0c core-prim . vector->list) (gb4f0b core-prim . vector) (gb4f0a core-prim . values) (gb4f09 core-prim . truncate) (gb4f08 core-prim . tan) (gb4f07 core-prim . symbol?) (gb4f06 core-prim . symbol=?) (gb4f05 core-prim . symbol->string) (gb4f04 core-prim . substring) (gb4f03 core-prim . string?) (gb4f02 core-prim . string>?) (gb4f01 core-prim . string>=?) (gb4f00 core-prim . string=?) (gb4eff core-prim . string<?) (gb4efe core-prim . string<=?) (gb4efd core-prim . string-ref) (gb4efc core-prim . string-length) (gb4efb core-prim . string-for-each) (gb4efa core-prim . string-copy) (gb4ef9 core-prim . string-append) (gb4ef8 core-prim . string->symbol) (gb4ef7 core-prim . string->number) (gb4ef6 core-prim . string->list) (gb4ef5 core-prim . string) (gb4ef4 core-prim . sqrt) (gb4ef3 core-prim . sin) (gb4ef2 core-prim . round) (gb4ef1 core-prim . reverse) (gb4ef0 core-prim . real?) (gb4eef core-prim . real-valued?) (gb4eee core-prim . real-part) (gb4eed core-prim . rationalize) (gb4eec core-prim . rational?) (gb4eeb core-prim . rational-valued?) (gb4eea core-prim . procedure?) (gb4ee9 core-prim . positive?) (gb4ee8 core-prim . pair?) (gb4ee7 core-prim . odd?) (gb4ee6 core-prim . numerator) (gb4ee5 core-prim . number?) (gb4ee4 core-prim . number->string) (gb4ee3 core-prim . null?) (gb4ee2 core-prim . not) (gb4ee1 core-prim . negative?) (gb4ee0 core-prim . nan?) (gb4edf core-prim . min) (gb4ede core-prim . max) (gb4edd core-prim . map) (gb4edc core-prim . make-vector) (gb4edb core-prim . make-string) (gb4eda core-prim . make-rectangular) (gb4ed9 core-prim . make-polar) (gb4ed8 core-prim . magnitude) (gb4ed7 core-prim . log) (gb4ed6 core-prim . list?) (gb4ed5 core-prim . list-tail) (gb4ed4 core-prim . list-ref) (gb4ed3 core-prim . list->vector) (gb4ed2 core-prim . list->string) (gb4ed1 core-prim . list) (gb4ed0 core-prim . length) (gb4ecf core-prim . lcm) (gb4ece core-prim . integer?) (gb4ecd core-prim . integer-valued?) (gb4ecc core-prim . integer->char) (gb4ecb core-prim . infinite?) (gb4eca core-prim . inexact?) (gb4ec9 core-prim . inexact) (gb4ec8 core-prim . imag-part) (gb4ec7 core-prim . gcd) (gb4ec6 core-prim . for-each) (gb4ec5 core-prim . floor) (gb4ec4 core-prim . finite?) (gb4ec3 core-prim . expt) (gb4ec2 core-prim . exp) (gb4ec1 core-prim . exact?) (gb4ec0 core-prim . exact-integer-sqrt) (gb4ebf core-prim . exact) (gb4ebe core-prim . even?) (gb4ebd core-prim . error) (gb4ebc core-prim . eqv?) (gb4ebb core-prim . equal?) (gb4eba core-prim . eq?) (gb4eb9 core-prim . dynamic-wind) (gb4eb8 core-prim . div0-and-mod0) (gb4eb7 core-prim . mod0) (gb4eb6 core-prim . div0) (gb4eb5 core-prim . div-and-mod) (gb4eb4 core-prim . mod) (gb4eb3 core-prim . div) (gb4eb2 core-prim . denominator) (gb4eb1 core-prim . cos) (gb4eb0 core-prim . cons) (gb4eaf core-prim . complex?) (gb4eae core-prim . char?) (gb4ead core-prim . char>?) (gb4eac core-prim . char>=?) (gb4eab core-prim . char=?) (gb4eaa core-prim . char<?) (gb4ea9 core-prim . char<=?) (gb4ea8 core-prim . char->integer) (gb4ea7 core-prim . ceiling) (gb4ea6 core-prim . call-with-values) (gb4ea5 core-prim . call/cc) (gb4ea4 core-prim . call-with-current-continuation) (gb4ea3 core-prim . cddddr) (gb4ea2 core-prim . cdddar) (gb4ea1 core-prim . cddadr) (gb4ea0 core-prim . cddaar) (gb4e9f core-prim . cdaddr) (gb4e9e core-prim . cdadar) (gb4e9d core-prim . cdaadr) (gb4e9c core-prim . cdaaar) (gb4e9b core-prim . cadddr) (gb4e9a core-prim . caddar) (gb4e99 core-prim . cadadr) (gb4e98 core-prim . cadaar) (gb4e97 core-prim . caaddr) (gb4e96 core-prim . caadar) (gb4e95 core-prim . caaadr) (gb4e94 core-prim . caaaar) (gb4e93 core-prim . cdddr) (gb4e92 core-prim . cddar) (gb4e91 core-prim . cdadr) (gb4e90 core-prim . cdaar) (gb4e8f core-prim . caddr) (gb4e8e core-prim . cadar) (gb4e8d core-prim . caadr) (gb4e8c core-prim . caaar) (gb4e8b core-prim . cddr) (gb4e8a core-prim . cdar) (gb4e89 core-prim . cadr) (gb4e88 core-prim . caar) (gb4e87 core-prim . cdr) (gb4e86 core-prim . car) (gb4e85 core-prim . boolean?) (gb4e84 core-prim . boolean=?) (gb4e83 core-prim . atan) (gb4e82 core-prim . assertion-violation) (gb31e5 core-prim . assertion-error) (gb4e81 core-prim . asin) (gb4e80 core-prim . apply) (gb4e7f core-prim . append) (gb4e7e core-prim . angle) (gb4e7d core-prim . acos) (gb4e7c core-prim . abs) (gb4e7b core-prim . /) (gb4e7a core-prim . *) (gb4e79 core-prim . -) (gb4e78 core-prim . +) (gb4e77 core-prim . >=) (gb4e76 core-prim . >) (gb4e75 core-prim . =) (gb4e74 core-prim . <=) (gb4e73 core-prim . <) (gb4e72 core-prim . library) (gb4e71 $core-rtd &no-nans-rtd &no-nans-rcd) (gb4e70 $core-rtd &no-infinities-rtd &no-infinities-rcd) (gb4e6f $core-rtd &i/o-encoding-rtd &i/o-encoding-rcd) (gb4e6e $core-rtd &i/o-decoding-rtd &i/o-decoding-rcd) (gb4e6d $core-rtd &i/o-port-rtd &i/o-port-rcd) (gb4e6c $core-rtd &i/o-file-does-not-exist-rtd &i/o-file-does-not-exist-rcd) (gb4e6b $core-rtd &i/o-file-already-exists-rtd &i/o-file-already-exists-rcd) (gb4e6a $core-rtd &i/o-file-is-read-only-rtd &i/o-fie-is-read-only-rcd) (gb4e69 $core-rtd &i/o-file-protection-rtd &i/o-file-protection-rcd) (gb4e68 $core-rtd &i/o-filename-rtd &i/o-filename-rcd) (gb4e67 $core-rtd &i/o-invalid-position-rtd &i/o-invalid-position-rcd) (gb4e66 $core-rtd &i/o-write-rtd &i/o-write-rcd) (gb4e65 $core-rtd &i/o-read-rtd &i/o-read-rcd) (gb4e64 $core-rtd &i/o-rtd &i/o-rcd) (gb4e63 $core-rtd &undefined-rtd &undefined-rcd) (gb4e62 $core-rtd &syntax-rtd &syntax-rcd) (gb4e61 $core-rtd &lexical-rtd &lexical-rcd) (gb4e60 $core-rtd &implementation-restriction-rtd &implementation-restriction-rcd) (gb4e5f $core-rtd &non-continuable-rtd &non-continuable-rcd) (gb4e5e $core-rtd &who-rtd &who-rcd) (gb4e5d $core-rtd &irritants-rtd &irritants-rcd) (gb4e5c $core-rtd &assertion-rtd &assertion-rcd) (gb4e5b $core-rtd &violation-rtd &violation-rcd) (gb4e5a $core-rtd &error-rtd &error-rcd) (gb4e59 $core-rtd &serious-rtd &serious-rcd) (gb4e58 $core-rtd &warning-rtd &warning-rcd) (gb4e57 $core-rtd &message-rtd &message-rcd) (gb4e56 $core-rtd &condition-rtd &condition-rcd) (gb4e55 macro . define-condition-type) (gb4e54 macro . define-enumeration) (gb4e53 macro . define-record-type) (gb4e52 macro . parent-rtd) (gb4e51 macro . nongenerative) (gb4e50 macro . opaque) (gb4e4f macro . sealed) (gb4e4e macro . protocol) (gb4e4d macro . parent) (gb4e4c macro . immutable) (gb4e4b macro . mutable) (gb4e4a macro . fields) (gb4e49 macro . error-handling-mode) (gb4e48 macro . file-options) (gb4e47 macro . buffer-mode) (gb4e46 macro . eol-style) (gb4e45 macro . guard) (gb4e44 macro . trace-define) (gb4e43 macro . trace-lambda) (gb4e42 macro . unsyntax-splicing) (gb4e41 macro . unsyntax) (gb4e40 macro . unquote-splicing) (gb4e3f macro . unquote) (gb4e3e macro . _) (gb4e3d macro . else) (gb4e3c macro . =>) (gb4e3b macro . ...) (gb4e3a macro . assert) (gb4e39 macro . endianness) (gb4e38 macro . delay) (gb4e37 macro . time) (gb4e36 macro . do) (gb4e35 macro . cond) (gb4e34 macro . let*) (gb4e33 macro . let*-values) (gb4e32 macro . let-values) (gb4e31 macro . identifier-syntax) (gb4e30 macro . with-syntax) (gb4e2f macro . quasisyntax) (gb4e2e macro . quasiquote) (gb4e2d macro . syntax-rules) (gb4e2c macro . include) (gb4e2b macro . define-struct) (gb4e2a core-macro . record-constructor-descriptor) (gb4e29 core-macro . record-type-descriptor) (gb4e28 macro . case) (gb4e27 macro . parameterize) (gb4e26 macro . unless) (gb4e25 macro . when) (gb4e24 core-macro . or) (gb4e23 core-macro . and) (gb4e22 core-macro . if) (gb4e21 core-macro . let) (gb4e20 core-macro . letrec*) (gb4e1f core-macro . letrec) (gb4e1e core-macro . type-descriptor) (gb4e1d core-macro . case-lambda) (gb4e1c core-macro . lambda) (gb4e1b core-macro . syntax) (gb4e1a core-macro . syntax-case) (gb4e19 core-macro . quote) (gb4e18 core-macro . foreign-call) (gb4e17 letrec-syntax) (gb4e16 let-syntax) (gb4e15 set!) (gb4e14 import) (gb4e13 begin) (gb4e12 module) (gb4e11 define-syntax) (gb4e10 define)) values values '#f '#f '#f '#f) (gb2d1f@gb2b6b@install-library 'gb51ea '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . gb5191) (eval-core . gb5190) (set-symbol-value! . gb518f) (symbol-value . gb518e) (gensym . gb518d) (void . gb518c)) '() values values '#f '#f '#f '#f) (gb2d1f@gb2b6b@install-library 'gb51eb '(mosh) '() '() '() '() '((set-symbol-value! . gb518f) (symbol-value . gb518e) (regexp? . gb518a) (read-line . gb5189) (ungensym . gb5187) (alist->eq-hash-table . gb5186) (assoc-ref . gb5185) (print . gb5184) (format . gb5183) (host-os . gb5182) (library-path . gb2b4a) (standard-library-path . gb5181) (file-newer? . gb5171) (stat-mtime . gb5170) (digit->integer . gb516c) (call-with-string-input-port . gb516b) (call-with-string-io . gb516a) (string-split . gb5169) (bytevector-for-each . gb5168) (string->regexp . gb5167) (rxmatch . gb5166) (regexp-replace-all . gb5165) (hashtable-fold-left . gb5164) (hashtable-for-each . gb5163) (set-current-directory! . gb515d) (expand-path . gb515c) (current-directory . gb515b) (p . gb5118) (get-timeofday . gb50ff) (get-command-line . gb50fe) (sys-display . gb50fd) (whereis . gb50fc) (register . gb50fb) (vm-join! . gb50fa) (vm-set-value! . gb50f9) (vm? . gb50f8) (main-vm? . gb50f7) (vm-eval . gb50f6) (vm-self . gb50f5) (vm-start! . gb50f4) (make-vm . gb50f3) (mutex-try-lock! . gb50f2) (mutex-unlock! . gb50f1) (mutex-lock! . gb50f0) (mutex? . gb50ef) (make-mutex . gb50ee) (condition-variable-notify-all! . gb50ed) (condition-variable-notify! . gb50ec) (condition-variable-wait! . gb50eb) (make-condition-variable . gb50ea) (write/ss . gb50e9) (mosh-executable-path . gb50e8) (make-file-options . gb50e7) (source-info . gb50e6) (make-compiler-instruction . gb50e5) (make-instruction . gb50e4) (set-annotation! . gb50e3) (get-annotation . gb50e2) (annotated-pair? . gb50e1) (annotated-cons . gb50e0) (set-source-info! . gb50df) (bignum? . gb50de) (fast-equal? . gb50dd) (fasl-read . gb50dc) (fasl-write . gb50db) (time-usage . gb50da) (os-constant . gb50d9) (condition-printer . gb50d8) (time . gb4e37) (include . gb4e2c)) '() values values '#f '#f '#f '#f) (gb2d1f@gb2b6b@install-library 'gb51ec '(system) '() '() '() '() '((gensym-prefix-set! . gb5188) (ssl-supported? . gb5180) (ssl-socket? . gb517f) (socket-sslize! . gb517e) (%monapi-stream-read . gb517d) (%monapi-stream-write . gb517c) (%monapi-stream-handle . gb517b) (%monapi-make-stream . gb517a) (%monapi-name-add! . gb5179) (%monapi-message-receive . gb5178) (%monapi-name-whereis . gb5177) (%monapi-message-reply . gb5176) (%monapi-message-send-receive . gb5175) (%monapi-message-send . gb5174) (process-terminate! . gb5173) (process-list . gb5172) (write-to-file . gb516f) (file->list . gb516e) (file->string . gb516d) (mosh-cache-dir . gb2934) (%start-process . gb5162) (%call-process . gb5161) (local-tz-offset . gb5160) (microseconds . gb515f) (directory-list . gb515e) (expand-path . gb515c) (%getpid . gb515a) (%waitpid . gb5159) (simple-struct-name . gb5158) (simple-struct-set! . gb5157) (simple-struct-ref . gb5156) (make-simple-struct . gb5155) (simple-struct? . gb5154) (pointer-ref-c-int64 . gb5153) (pointer-ref-c-int32 . gb5152) (pointer-ref-c-int16 . gb5151) (pointer-ref-c-int8 . gb5150) (pointer-ref-c-uint64 . gb514f) (pointer-ref-c-uint32 . gb514e) (pointer-ref-c-uint16 . gb514d) (pointer-ref-c-uint8 . gb514c) (pointer-set-c-uint64! . gb514b) (pointer-set-c-uint32! . gb514a) (pointer-set-c-uint16! . gb5149) (pointer-set-c-uint8! . gb5148) (pointer-set-c-int64! . gb5147) (pointer-set-c-int32! . gb5146) (pointer-set-c-int16! . gb5145) (pointer-set-c-int8! . gb5144) (pointer-set-c-pointer! . gb5143) (pointer-set-c-double! . gb5142) (pointer-set-c-float! . gb5141) (pointer-set-c-long-long! . gb5140) (pointer-set-c-long! . gb513f) (pointer-set-c-int! . gb513e) (pointer-set-c-short! . gb513d) (pointer-set-c-char! . gb513c) (pointer-ref-c-pointer . gb513b) (pointer-ref-c-double . gb513a) (pointer-ref-c-float . gb5139) (pointer-ref-c-unsigned-long-long . gb5138) (pointer-ref-c-signed-long-long . gb5137) (pointer-ref-c-unsigned-long . gb5136) (pointer-ref-c-signed-long . gb5135) (pointer-ref-c-unsigned-int . gb5134) (pointer-ref-c-signed-int . gb5133) (pointer-ref-c-unsigned-short . gb5132) (pointer-ref-c-signed-short . gb5131) (pointer-ref-c-unsigned-char . gb5130) (pointer-ref-c-signed-char . gb512f) (pointer->integer . gb512e) (integer->pointer . gb512d) (pointer? . gb512c) (shared-errno . gb512b) (%ffi-error . gb512a) (%ffi-close . gb5129) (%ffi-free-c-callback-trampoline . gb5128) (%ffi-make-c-callback-trampoline . gb5127) (%ffi-free . gb5126) (%ffi-malloc . gb5125) (%ffi-supported? . gb5124) (%ffi-pointer->string . gb5123) (%ffi-call . gb5122) (%ffi-lookup . gb5121) (%ffi-open . gb5120) (null-terminated-utf8->string . gb511f) (null-terminated-bytevector->string . gb511e) (%exec . gb511d) (%fork . gb511c) (%pipe . gb511b) (%confstr . gb511a) (%dup . gb5119) (open-output-string . gb5117) (get-output-string . gb5116) (file-stat-ctime . gb5115) (file-stat-atime . gb5114) (file-stat-mtime . gb5113) (file-size-in-bytes . gb5112) (file-writable? . gb5111) (file-executable? . gb5110) (file-readable? . gb510f) (file-regular? . gb510e) (file-symbolic-link? . gb510d) (file-directory? . gb510c) (create-symbolic-link . gb510b) (rename-file . gb510a) (delete-directory . gb5109) (create-directory . gb5108) (create-mosh-cache-dir . gb5107) (get-environment-variables . gb5106) (current-exception-handler . gb5105) (get-environment-variable . gb5104) (join-wraps . gb5103) (id->real-label . gb5102) (same-marks? . gb5101) (same-marks*? . gb5100) (disasm . gb50d7) (make-parameter . gb2932) (socket-port . gb50d6) (socket-shutdown . gb50d5) (socket-close . gb50d4) (socket-send . gb50d3) (socket-recv! . gb50d2) (socket-recv . gb50d1) (make-server-socket . gb50d0) (make-client-socket . gb50cf) (socket-accept . gb50ce) (socket? . gb50cd) (parameterize . gb4e27)) '() values values '#f '#f '#f '#f)))
(begin (set! gb4c8f@ref (unspecified)) (set! gb4c91@x* (unspecified)) (set! gb4c93@add-library-path! (unspecified)) (set! gb4c95@parse-and-add-library-path (unspecified)) (set! gb4c97@for-each-with-index (unspecified)) (set! gb4c99@rpad (unspecified)) (set! gb4c9b@condition-printer/p (unspecified)) (set! gb4c9d@record->field-alist (unspecified)) (set! gb4c9f@map-with-index (unspecified)) (set! gb4ca1@repl (unspecified)) (set! gb4ca3@trace-printer (unspecified)) (set! gb4ca5@command-line (unspecified)) (set! gb4ca7@local-library-path (unspecified)) (set! gb4ca9@load/args (unspecified)) (set! gb4cab@load (unspecified)) (set! gb4cad@ironscheme-build (unspecified)) (set! gb4caf@eval-top-level (unspecified)) (set! gb4cb1@compile-system-libraries (unspecified)) (set! gb4cb3@compile (unspecified)) (set! gb4cb5@compile->closure (unspecified)) (set! gb4cb7@pre-compile-r6rs-file (unspecified)) (set! gb4cb9@load-r6rs-top-level (unspecified)) (set! gb4cbb@load-r6rs-top-level-sexp (unspecified)) (set! gb4cbd@prefix-inc (unspecified)) (set! gb4cbf@prefix-inc! (unspecified)) (set! gb4c8f@ref (lambda (gb4cfa@rtd gb4cfb@i gb4cfc@x) (let ((gb4d00@val ((record-accessor gb4cfa@rtd gb4cfb@i) gb4cfc@x))) (if (symbol? gb4d00@val) (ungensym gb4d00@val) gb4d00@val)))) (set! gb4df6@gb4c8f@ref gb4c8f@ref) (set! gb4c91@x* '()) (set! gb4df7@gb4c91@x* gb4c91@x*) (set! gb4c93@add-library-path! (lambda (gb4d02@path) (gb2d0f@gb2b4b@library-path (append (gb2d0f@gb2b4b@library-path) (list gb4d02@path))))) (set! gb4df8@gb4c93@add-library-path! gb4c93@add-library-path!) (set! gb4c95@parse-and-add-library-path (lambda (gb4d04@paths gb4d05@message) (letrec* ((gb4d09@separator (if (string=? (host-os) '"win32") '#\; '#\:))) (let ((gb4d0a@t gb4d04@paths)) (if gb4d0a@t ((lambda (gb4d0c@paths) (for-each (lambda (gb4d0e@path) (if (file-exists? gb4d0e@path) (gb4c93@add-library-path! (expand-path gb4d0e@path)) (format (current-error-port) gb4d05@message gb4d0e@path))) (string-split gb4d0c@paths gb4d09@separator))) gb4d0a@t) (void)))))) (set! gb4df9@gb4c95@parse-and-add-library-path gb4c95@parse-and-add-library-path) (set! gb4c97@for-each-with-index (lambda (gb4d10@proc gb4d11@lst) (letrec ((gb4d14@loop (lambda (gb4d16@i gb4d17@lst) (if (null? gb4d17@lst) (if '#f '#f (void)) (begin (gb4d10@proc gb4d16@i (car gb4d17@lst)) (gb4d14@loop (+ gb4d16@i '1) (cdr gb4d17@lst))))))) (gb4d14@loop '1 gb4d11@lst)))) (set! gb4dfa@gb4c97@for-each-with-index gb4c97@for-each-with-index) (set! gb4c99@rpad (lambda (gb4d1a@str gb4d1b@pad gb4d1c@n) (let ((gb4d20@rest (- gb4d1c@n (string-length (format '"~a" gb4d1a@str))))) (let gb4d26@loop ((gb4d22@rest gb4d20@rest) (gb4d23@ret (format '"~a" gb4d1a@str))) (if (<= gb4d22@rest '0) gb4d23@ret (gb4d26@loop (- gb4d22@rest '1) (string-append gb4d23@ret gb4d1b@pad))))))) (set! gb4dfb@gb4c99@rpad gb4c99@rpad) (set! gb4c9b@condition-printer/p (lambda (gb4d28@e gb4d29@port) (letrec* ((gb4d2d@max-condition-len (apply max (map (lambda (gb4d3e@c) (string-length (symbol->string (record-type-name (record-rtd gb4d3e@c))))) (simple-conditions gb4d28@e))))) (begin (display '" Condition components:\n" gb4d29@port) (gb4c97@for-each-with-index (lambda (gb4d2e@i gb4d2f@x) (let ((gb4d32@rtd (record-rtd gb4d2f@x)) (gb4d33@fields-alist (gb4c9d@record->field-alist gb4d2f@x))) (begin (format gb4d29@port '" ~d. ~a" gb4d2e@i (gb4c99@rpad (symbol->string (record-type-name gb4d32@rtd)) '" " gb4d2d@max-condition-len)) (if (null? gb4d33@fields-alist) (newline gb4d29@port) (void)) (let gb4d3a@loop ((gb4d36@first '#t) (gb4d37@fields-alist gb4d33@fields-alist)) (if (null? gb4d37@fields-alist) '() (let ((gb4d3c@field (car gb4d37@fields-alist))) (begin (if (not gb4d36@first) (display (gb4c99@rpad '"" '" " (+ '4 gb4d2d@max-condition-len)) gb4d29@port) (void)) (display '"       " gb4d29@port) (display (car gb4d3c@field) gb4d29@port) (display '": " gb4d29@port) (write (cdr gb4d3c@field) gb4d29@port) (newline gb4d29@port) (gb4d3a@loop '#f (cdr gb4d37@fields-alist))))))))) (simple-conditions gb4d28@e)))))) (set! gb4dfc@gb4c9b@condition-printer/p gb4c9b@condition-printer/p) (set! gb4c9d@record->field-alist (lambda (gb4d40@r) (letrec* ((gb4d43@ref (lambda (gb4d4e@rtd gb4d4f@i gb4d50@x) (let ((gb4d54@val ((record-accessor gb4d4e@rtd gb4d4f@i) gb4d50@x))) (if (symbol? gb4d54@val) (ungensym gb4d54@val) gb4d54@val))))) (let gb4d48@loop ((gb4d44@ret '()) (gb4d45@rtd (record-rtd gb4d40@r))) (if gb4d45@rtd (gb4d48@loop (append gb4d44@ret (gb4c9f@map-with-index (lambda (gb4d4a@i gb4d4b@field) (cons gb4d4b@field (gb4d43@ref gb4d45@rtd gb4d4a@i gb4d40@r))) (vector->list (record-type-field-names gb4d45@rtd)))) (record-type-parent gb4d45@rtd)) gb4d44@ret))))) (set! gb4dfd@gb4c9d@record->field-alist gb4c9d@record->field-alist) (set! gb4c9f@map-with-index (lambda (gb4d56@proc gb4d57@lst) (let gb4d60@loop ((gb4d5a@i '0) (gb4d5b@lst gb4d57@lst) (gb4d5c@ret '())) (if (null? gb4d5b@lst) (reverse gb4d5c@ret) (gb4d60@loop (+ gb4d5a@i '1) (cdr gb4d5b@lst) (cons (gb4d56@proc gb4d5a@i (car gb4d5b@lst)) gb4d5c@ret)))))) (set! gb4dfe@gb4c9f@map-with-index gb4c9f@map-with-index) (set! gb4ca1@repl (lambda gb4d62@x (letrec* ((gb4d65@rec (lambda () (begin (display '"mosh> ") ((call/cc (lambda (gb4d68@gb4d66) (lambda () (with-exception-handler (lambda (gb4d6a@e) ((call/cc (lambda (gb4d6c@gb4d67) (gb4d68@gb4d66 (lambda () (if '#t (begin (display '"\nUnhandled exception:\n\n" (current-error-port)) (if (condition? gb4d6a@e) (gb4c9b@condition-printer/p gb4d6a@e (current-error-port)) (format (current-error-port) '"  Non-condition object:\n     ~a\n" gb4d6a@e))) (gb4d6c@gb4d67 (lambda () (raise-continuable gb4d6a@e)))))))))) (lambda () (let gb4d72@loop ((gb4d6e@line (get-line (current-input-port))) (gb4d6f@accum '"")) (letrec* ((gb4d75@parentheses-ok? (lambda (gb4d80@text) (let gb4d88@loop ((gb4d82@chars (string->list gb4d80@text)) (gb4d83@p0 '0) (gb4d84@p1 '0)) (if (null? gb4d82@chars) (= '0 gb4d83@p0 gb4d84@p1) (let ((gb4d8a@t (car gb4d82@chars))) (if (memv gb4d8a@t '(#\()) (gb4d88@loop (cdr gb4d82@chars) (+ gb4d83@p0 '1) gb4d84@p1) (if (memv gb4d8a@t '(#\))) (gb4d88@loop (cdr gb4d82@chars) (- gb4d83@p0 '1) gb4d84@p1) (if (memv gb4d8a@t '(#\[)) (gb4d88@loop (cdr gb4d82@chars) gb4d83@p0 (+ gb4d84@p1 '1)) (if (memv gb4d8a@t '(#\])) (gb4d88@loop (cdr gb4d82@chars) gb4d83@p0 (- gb4d84@p1 '1)) (gb4d88@loop (cdr gb4d82@chars) gb4d83@p0 gb4d84@p1)))))))))) (gb4d77@eval-string-print (lambda (gb4d7a@text) (if (not (or (string=? '"\n" gb4d7a@text) (= '0 (string-length gb4d7a@text)))) (call-with-values (lambda () (gb4caf@eval-top-level (call-with-port (open-string-input-port gb4d7a@text) read))) (lambda gb4d7c@out* (for-each (lambda (gb4d7e@out) (begin (write/ss gb4d7e@out) (newline))) gb4d7c@out*))) (void))))) (if (eof-object? gb4d6e@line) (begin (gb4d77@eval-string-print gb4d6f@accum) (exit)) (let ((gb4d78@current (string-append gb4d6f@accum gb4d6e@line))) (if (gb4d75@parentheses-ok? gb4d78@current) (gb4d77@eval-string-print gb4d78@current) (gb4d72@loop (get-line (current-input-port)) gb4d78@current)))))))))))) (newline) (gb4d65@rec))))) (gb4d65@rec)))) (set! gb4dff@gb4ca1@repl gb4ca1@repl) (set! gb4ca3@trace-printer (gb2a55@gb2933@make-parameter write)) (set! gb4e00@gb4ca3@trace-printer gb4ca3@trace-printer) (set! gb4ca5@command-line (gb2a55@gb2933@make-parameter (get-command-line))) (set! gb4e01@gb4ca5@command-line gb4ca5@command-line) (set! gb4ca7@local-library-path (lambda (gb4d8c@filename) (gb2d0f@gb2b4b@library-path))) (set! gb4e02@gb4ca7@local-library-path gb4ca7@local-library-path) (set! gb4ca9@load/args (lambda (gb4d8e@filename . gb4d90@args) (begin (apply gb4cb9@load-r6rs-top-level gb4d8e@filename 'load gb4d90@args) (void)))) (set! gb4e03@gb4ca9@load/args gb4ca9@load/args) (set! gb4cab@load (lambda (gb4d92@filename) (begin (apply gb4cb9@load-r6rs-top-level gb4d92@filename 'load (gb4ca5@command-line)) (void)))) (set! gb4e04@gb4cab@load gb4cab@load) (set! gb4cad@ironscheme-build (lambda () (gb4cab@load '"ironscheme-buildscript.ss"))) (set! gb4e05@gb4cad@ironscheme-build gb4cad@ironscheme-build) (set! gb4caf@eval-top-level (lambda (gb4d94@x) (gb4c6c@gb31cc@eval gb4d94@x (gb4c83@gb31fa@interaction-environment)))) (set! gb4e06@gb4caf@eval-top-level gb4caf@eval-top-level) (set! gb4cb1@compile-system-libraries (lambda () (gb4caf@eval-top-level '(begin (include "system-libraries.ss") (compile "system-libraries.ss"))))) (set! gb4e07@gb4cb1@compile-system-libraries gb4cb1@compile-system-libraries) (set! gb4cb3@compile (lambda (gb4d96@filename) (gb4cb9@load-r6rs-top-level gb4d96@filename 'compile))) (set! gb4e08@gb4cb3@compile gb4cb3@compile) (set! gb4cb5@compile->closure (lambda (gb4d98@filename) (gb4cb9@load-r6rs-top-level gb4d98@filename 'closure))) (set! gb4e09@gb4cb5@compile->closure gb4cb5@compile->closure) (set! gb4cb7@pre-compile-r6rs-file (lambda (gb4d9a@filename) (gb4cb9@load-r6rs-top-level gb4d9a@filename 'compile))) (set! gb4e0a@gb4cb7@pre-compile-r6rs-file gb4cb7@pre-compile-r6rs-file) (set! gb4cb9@load-r6rs-top-level (lambda (gb4d9c@filename gb4d9d@how . gb4da0@args) (begin (gb2d0f@gb2b4b@library-path (gb4ca7@local-library-path gb4d9c@filename)) (let ((gb4da2@x* (with-input-from-file gb4d9c@filename (lambda () (let gb4da4@f () (let ((gb4da6@x (gb2a47@gb2917@read-annotated))) (if (eof-object? gb4da6@x) '() (cons gb4da6@x (gb4da4@f))))))))) (let ((gb4da8@t gb4d9d@how)) (if (memv gb4da8@t '(closure)) (gb4c82@gb31f8@pre-compile-r6rs-top-level gb4da2@x*) (if (memv gb4da8@t '(load)) (begin (gb4ca5@command-line (cons gb4d9c@filename (car gb4da0@args))) (gb2a56@gb2935@mosh-cache-dir (create-mosh-cache-dir)) (if (gb2a56@gb2935@mosh-cache-dir) (gensym-prefix-set! (gb4cbf@prefix-inc! (string-append (gb2a56@gb2935@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (gb4daa@file) ((call/cc (lambda (gb4dae@gb4dac) (lambda () (with-exception-handler (lambda (gb4db0@c) ((call/cc (lambda (gb4db2@gb4dad) (gb4dae@gb4dac (lambda () (if '#t '#t (gb4db2@gb4dad (lambda () (raise-continuable gb4db0@c)))))))))) (lambda () (delete-file (string-append (gb2a56@gb2935@mosh-cache-dir) '"/" gb4daa@file))))))))) (directory-list (gb2a56@gb2935@mosh-cache-dir))) (void)) (let ((gb4db4@compiled (gb4c81@gb31f6@compile-r6rs-top-level gb4da2@x*))) (begin (if (and (gb2a56@gb2935@mosh-cache-dir) (not (symbol-value '%disable-acc))) (gb2d13@gb2b53@serialize-all gb2a50@gb2929@serialize-library gb2aac@gb2a65@compile-core-expr) (void)) (gb4db4@compiled)))) (if (memv gb4da8@t '(compile)) (begin (gb4c81@gb31f6@compile-r6rs-top-level gb4da2@x*) (gb2d13@gb2b53@serialize-all gb2a50@gb2929@serialize-library gb2aac@gb2a65@compile-core-expr)) (if '#f '#f (void)))))))))) (set! gb4e0b@gb4cb9@load-r6rs-top-level gb4cb9@load-r6rs-top-level) (set! gb4cbb@load-r6rs-top-level-sexp (lambda (gb4db6@import-spec gb4db7@thunk) (let ((gb4dc2@gb4dbb gb2d0f@gb2b4b@library-path) (gb4dc3@gb4dbd gb2a56@gb2935@mosh-cache-dir) (gb4dc4@gb4dbf (gb4ca7@local-library-path '"")) (gb4dc5@gb4dc1 (create-mosh-cache-dir))) (let ((gb4dca@swap (lambda () (begin (let ((gb4dcc@t (gb4dc2@gb4dbb))) (begin (gb4dc2@gb4dbb gb4dc4@gb4dbf) (set! gb4dc4@gb4dbf gb4dcc@t))) (let ((gb4dce@t (gb4dc3@gb4dbd))) (begin (gb4dc3@gb4dbd gb4dc5@gb4dc1) (set! gb4dc5@gb4dc1 gb4dce@t))))))) (dynamic-wind gb4dca@swap (lambda () (begin (if (gb2a56@gb2935@mosh-cache-dir) (gensym-prefix-set! (gb4cbf@prefix-inc! (string-append (gb2a56@gb2935@mosh-cache-dir) '"/prefix.txt"))) (void)) (let ((gb4dd4@gb4dd1 gb4ca5@command-line) (gb4dd5@gb4dd3 '())) (let ((gb4dd8@swap (lambda () (let ((gb4dda@t (gb4dd4@gb4dd1))) (begin (gb4dd4@gb4dd1 gb4dd5@gb4dd3) (set! gb4dd5@gb4dd3 gb4dda@t)))))) (dynamic-wind gb4dd8@swap (lambda () ((gb4c81@gb31f6@compile-r6rs-top-level (list (cons 'import gb4db6@import-spec) (list gb4db7@thunk))))) gb4dd8@swap))))) gb4dca@swap))))) (set! gb4e0c@gb4cbb@load-r6rs-top-level-sexp gb4cbb@load-r6rs-top-level-sexp) (set! gb4cbd@prefix-inc (lambda (gb4ddc@prefix-string) (let ((gb4dde@prefix (symbol->string gb4ddc@prefix-string))) (let ((gb4de0@len (string-length gb4dde@prefix))) (let gb4de8@loop ((gb4de2@i (- gb4de0@len '1)) (gb4de3@carry? '#t) (gb4de4@accum '())) (if (< gb4de2@i '0) (string->symbol (list->string (if gb4de3@carry? (cons '#\a gb4de4@accum) gb4de4@accum))) (if gb4de3@carry? (let ((gb4dea@next-integer (+ '1 (char->integer (string-ref gb4dde@prefix gb4de2@i))))) (if (= gb4dea@next-integer '123) (gb4de8@loop (- gb4de2@i '1) '#f (cons '#\A gb4de4@accum)) (if (= gb4dea@next-integer '91) (gb4de8@loop (- gb4de2@i '1) '#t (cons '#\a gb4de4@accum)) (gb4de8@loop (- gb4de2@i '1) '#f (cons (integer->char gb4dea@next-integer) gb4de4@accum))))) (gb4de8@loop (- gb4de2@i '1) '#f (cons (string-ref gb4dde@prefix gb4de2@i) gb4de4@accum))))))))) (set! gb4e0d@gb4cbd@prefix-inc gb4cbd@prefix-inc) (set! gb4cbf@prefix-inc! (lambda (gb4dec@file) (begin (if (not (file-exists? gb4dec@file)) (call-with-output-file gb4dec@file (lambda (gb4dee@port) (write 'd gb4dee@port))) (void)) (let ((gb4df0@prefix (call-with-input-file gb4dec@file read))) (if (main-vm?) (let ((gb4df2@next-prefix (gb4cbd@prefix-inc gb4df0@prefix))) (begin (call-with-port (open-file-output-port gb4dec@file (make-file-options '(no-fail)) 'block (native-transcoder)) (lambda (gb4df4@port) (write gb4df2@next-prefix gb4df4@port))) gb4df0@prefix)) gb4df0@prefix))))) (set! gb4e0e@gb4cbf@prefix-inc! gb4cbf@prefix-inc!) (begin (gb2d14@gb2b55@current-precompiled-library-loader gb2a51@gb292b@load-serialized-library) (set-symbol-value! 'load gb4cab@load) (set-symbol-value! 'pre-compile-r6rs-file gb4cb7@pre-compile-r6rs-file) (set-symbol-value! 'eval-r6rs gb4caf@eval-top-level) (set-symbol-value! 'int-env-syms gb4c63@gb31ba@interaction-environment-symbols) (set-symbol-value! 'expanded2core gb2aab@gb2a63@expanded->core) (set-symbol-value! 'trace-printer gb4ca3@trace-printer) (set-symbol-value! 'compile-r6rs-top-level 'compile-r6rs-top-level) (set-symbol-value! 'create-non-continuable-violation (lambda (gb4cc0@c) (condition (make-non-continuable-violation) (make-who-condition 'raise) (make-message-condition '"returned from non-continuable exception") (make-irritants-condition (list gb4cc0@c))))) (gb4c95@parse-and-add-library-path (get-environment-variable '"MOSH_LOADPATH") '"** WARN in environment variable 'MOSH_LOADPATH': directory ~s not exist\n") (gb4c95@parse-and-add-library-path (symbol-value '%loadpath) '"** WARN in command-line option '--loadpath': directory ~s not exist\n") (if (mosh-executable-path) (if (file-exists? (string-append (mosh-executable-path) '"/lib")) (gb4c93@add-library-path! (string-append (mosh-executable-path) '"/lib")) (void)) (if (file-exists? (string-append (current-directory) '"/lib")) (gb4c93@add-library-path! (string-append (current-directory) '"/lib")) (void))) (if (file-exists? (string-append (standard-library-path) '"/lib")) (gb4c93@add-library-path! (string-append (standard-library-path) '"/lib")) (void)) (let ((gb4cc2@prefix (lambda (gb4cc4@ext gb4cc5@ls) (append (map (lambda (gb4cc8@x) (string-append gb4cc4@ext gb4cc8@x)) gb4cc5@ls) gb4cc5@ls)))) (gb2d10@gb2b4d@library-extensions (gb4cc2@prefix '".mosh" (gb2d10@gb2b4d@library-extensions)))) (current-exception-handler (lambda (gb4cca@c) (begin (if (condition? gb4cca@c) (gb4c9b@condition-printer/p gb4cca@c (current-error-port)) (format (current-error-port) '"\n Non-condition object:\n     ~a\n" gb4cca@c)) gb4cca@c))) (if ((call/cc (lambda (gb4cce@gb4ccc) (lambda () (with-exception-handler (lambda (gb4cd0@c) ((call/cc (lambda (gb4cd2@gb4ccd) (gb4cce@gb4ccc (lambda () (if '#t '#f (gb4cd2@gb4ccd (lambda () (raise-continuable gb4cd0@c)))))))))) (lambda () (symbol-value '%vm-import-spec))))))) (gb4cbb@load-r6rs-top-level-sexp (symbol-value '%vm-import-spec) (symbol-value '%vm-thunk)) (if (null? (gb4ca5@command-line)) (let ((gb4cdc@gb4cd5 gb4ca5@command-line) (gb4cdd@gb4cd7 gb2a56@gb2935@mosh-cache-dir) (gb4cde@gb4cd9 '()) (gb4cdf@gb4cdb (create-mosh-cache-dir))) (let ((gb4ce4@swap (lambda () (begin (let ((gb4ce6@t (gb4cdc@gb4cd5))) (begin (gb4cdc@gb4cd5 gb4cde@gb4cd9) (set! gb4cde@gb4cd9 gb4ce6@t))) (let ((gb4ce8@t (gb4cdd@gb4cd7))) (begin (gb4cdd@gb4cd7 gb4cdf@gb4cdb) (set! gb4cdf@gb4cdb gb4ce8@t))))))) (dynamic-wind gb4ce4@swap (lambda () (begin (if (gb2a56@gb2935@mosh-cache-dir) (gensym-prefix-set! (gb4cbf@prefix-inc! (string-append (gb2a56@gb2935@mosh-cache-dir) '"/prefix.txt"))) (void)) (gb4ca1@repl))) gb4ce4@swap))) (begin (gb2d0f@gb2b4b@library-path (gb4ca7@local-library-path (car (gb4ca5@command-line)))) (set! gb4c91@x* (with-input-from-file (car (gb4ca5@command-line)) (lambda () (let gb4cea@f () (let ((gb4cec@x (gb2a47@gb2917@read-annotated))) (if (eof-object? gb4cec@x) '() (cons gb4cec@x (gb4cea@f)))))))) (gb4ca5@command-line (cons (car (gb4ca5@command-line)) (cdr (gb4ca5@command-line)))) (gb2a56@gb2935@mosh-cache-dir (create-mosh-cache-dir)) (if (gb2a56@gb2935@mosh-cache-dir) (gensym-prefix-set! (gb4cbf@prefix-inc! (string-append (gb2a56@gb2935@mosh-cache-dir) '"/prefix.txt"))) (void)) (if (symbol-value '%clean-acc) (for-each (lambda (gb4cee@file) ((call/cc (lambda (gb4cf2@gb4cf0) (lambda () (with-exception-handler (lambda (gb4cf4@c) ((call/cc (lambda (gb4cf6@gb4cf1) (gb4cf2@gb4cf0 (lambda () (if '#t '#t (gb4cf6@gb4cf1 (lambda () (raise-continuable gb4cf4@c)))))))))) (lambda () (delete-file (string-append (gb2a56@gb2935@mosh-cache-dir) '"/" gb4cee@file))))))))) (directory-list (gb2a56@gb2935@mosh-cache-dir))) (void)) (let ((gb4cf8@compiled (gb4c81@gb31f6@compile-r6rs-top-level gb4c91@x*))) (begin (if (and (gb2a56@gb2935@mosh-cache-dir) (not (symbol-value '%disable-acc))) (gb2d13@gb2b53@serialize-all gb2a50@gb2929@serialize-library gb2aac@gb2a65@compile-core-expr) (void)) (gb4cf8@compiled))))))))
