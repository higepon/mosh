name: Build

on:
  push:
  pull_request:

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    steps:
      - name: Set env
        run: |
          pwd
          echo "LD_LIBRARY_PATH=/usr/local/lib" >> $GITHUB_ENV
          echo "STABLE_MOSH_PATH=mosh-0.2.8-rc4" >> $GITHUB_ENV
          echo "ONIGURUMA_PATH=onig-5.9.6" >> $GITHUB_ENV
          echo "NATURAL_DOCS_PATH=~/NaturalDocs-1.4" >> $GITHUB_ENV
          echo "R6RS_DOC_PATH=r6rs" >> $GITHUB_ENV          
      - name: Install tools
        run: |
          sudo apt update
          sudo apt install -y gauche wget make libgmp-dev autoconf automake golang-go
          sudo apt install -y re2c bison git bear clang-tidy unzip
      # We share r6rs & NaturalDocs cache between Ubuntu and macOS.
      - name: Cache R6RS doc
        id: cache-r6rs-doc
        uses: actions/cache@v3
        with:
          path: ${{ env.R6RS_DOC_PATH }}
          key: ${{ matrix.os }}-${{ env.R6RS_DOC_PATH }}
          restore-keys: ${{ matrix.os }}-${{ env.R6RS_DOC_PATH }}  
      - name: Get R6RS doc
        if: steps.cache-r6rs-doc.outputs.cache-hit != 'true'
        run: >
          wget http://www.r6rs.org/final/r6rs.tar.gz &&
          tar zvxf r6rs.tar.gz
      - name: Cache NaturalDocs
        id: cache-natural-docs
        uses: actions/cache@v3
        with:
          path: ${{ env.NATURAL_DOCS_PATH }}
          key: ${{ matrix.os }}-${{ env.NATURAL_DOCS_PATH }}
          restore-keys: ${{ matrix.os }}-${{ env.NATURAL_DOCS_PATH }}
      - name: Install NaturalDocs
        if: steps.cache-natural-doc.outputs.cache-hit != 'true'
        run: >
          wget -O NaturalDocs-1.4.zip https://sourceforge.net/projects/naturaldocs/files/Stable%20Releases/1.4/NaturalDocs-1.4.zip/download &&
          mv NaturalDocs-1.4.zip ~/ &&
          mkdir -p ~/NaturalDocs-1.4 &&
          cd ~/NaturalDocs-1.4 &&
          unzip -o ../NaturalDocs-1.4.zip
      - name: Cache Oniguruma
        id: cache-oniguruma-linux
        uses: actions/cache@v3
        with:
          path: ${{ env.ONIGURUMA_PATH }}
          key: ${{ matrix.os }}-${{ env.ONIGURUMA_PATH }}
          restore-keys: ${{ matrix.os }}-${{ env.ONIGURUMA_PATH }}
      - name: Build Oniguruma
        if: steps.cache-oniguruma-linux.outputs.cache-hit != 'true'
        run: >
          wget https://github.com/kkos/oniguruma/releases/download/v5.9.6/onig-5.9.6.tar.gz &&
          tar zvxf onig-5.9.6.tar.gz &&
          cd $ONIGURUMA_PATH &&
          rm config.sub &&
          rm config.guess &&
          wget http://savannah.gnu.org/cgi-bin/viewcvs/*checkout*/config/config/config.guess &&
          wget http://savannah.gnu.org/cgi-bin/viewcvs/*checkout*/config/config/config.sub &&
          ./configure &&
          make
      - name: Install Oniguruma
        run: >
          cd $ONIGURUMA_PATH &&
          sudo make install
      - name: Cache Stable Mosh
        id: cache-stable-mosh-linux
        uses: actions/cache@v3
        with:
          path: ${{ env.STABLE_MOSH_PATH }}
          key: ${{ matrix.os }}-${{ env.STABLE_MOSH_PATH }}
          restore-keys: ${{ matrix.os }}-${{ env.STABLE_MOSH_PATH }}
      - name: Build Stable Mosh
        if: steps.cache-stable-mosh-linux.outputs.cache-hit != 'true'
        # TODO(higepon): Replace this with 0.2.8 when it's released.
        run: >
          wget https://github.com/higepon/mosh/releases/download/mosh-0.2.8-rc4/mosh-0.2.8-rc4.tar.gz &&
          tar zvxf mosh-0.2.8-rc4.tar.gz &&
          cd $STABLE_MOSH_PATH &&
          ./configure &&
          make &&
          make test
      - name: Install Stable Mosh
        run: >
          cd $STABLE_MOSH_PATH &&
          sudo make install
      - uses: actions/checkout@v3
        with:
          path: mosh-latest
      - name: Build and test the latest changes.
        run: >
          ls -la &&
          ls -la ~/NaturalDocs-1.4 &&
          cd ${{ github.workspace }}/mosh-latest &&
          ./gen-git-build.sh &&
          ./configure --with-r6rs-doc=../r6rs &&
          make &&
          make test &&
          sudo make install &&
          make dist
      - name: Build the generated dist package.
        run: >
          cp mosh-latest/mosh-*.tar.gz /tmp &&
          cd /tmp &&
          tar zvxf *.tar.gz &&
          export DIST_DIR=`find . -type d -name "mosh-*" | head -1` &&
          cd $DIST_DIR &&
          ./configure --prefix=/tmp &&
          make &&
          make test &&
          make install
      - name: Run clang-tidy and treat warnings as error using bear 2.x.
        if: matrix.os == 'ubuntu-latest'
        run: >
          cd ${{ github.workspace }}/mosh-latest &&
          make clean &&
          bear --version &&
          bear --help &&
          bear --exclude src/ffi_stub_x86_64.S --exclude src/NumberReader.tab.cpp --exclude src/Reader.tab.cpp make &&
          run-clang-tidy -header-filter=src -quiet
      - name: Install jj so that we can edit compile_commands.json.
        if: matrix.os == 'ubuntu-22.04'
        run: >
          wget https://github.com/tidwall/jj/archive/refs/tags/v1.9.2.tar.gz &&
          tar zvxf v1.9.2.tar.gz &&
          cd jj-1.9.2/ &&
          make &&
          make install
      # TODO(higepon): Find better way to exclude some files from clang-tidy.
      # bear version 3 doesn't have exlude option.
      - name: Run clang-tidy and treat warnings as error using bear 3.x.
        if: matrix.os == 'ubuntu-22.04'
        run: >
          cd ${{ github.workspace }}/mosh-latest &&
          make clean &&
          bear --version &&
          bear --help &&
          bear -- make &&
          echo "Excluding .S file manually" &&
          cp compile_commands.json tmp.json &&
          cat tmp.json &&
          jj -i tmp.json '#(file!%"*ffi_stub_x86_64.S")#' > tmp2.json &&
          jj -i tmp2.json '#(file!%"*tab.cpp")#' > compile_commands.json &&
          echo "jj successfully done" &&
          run-clang-tidy -header-filter=src -quiet
      - uses: actions/upload-artifact@v2
        with:
          name: source-${{ matrix.os }}
          path: mosh-latest/mosh-*.tar.gz
      - name: Upload to release
        uses: softprops/action-gh-release@v1
        if: |
          startsWith(github.ref, 'refs/tags/')
        with:
          body_path: mosh-latest/doc/RELNOTE.2022
          files: |
            mosh-latest/mosh-*.tar.gz

  build-macos:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, macos-12]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    steps:
      - name: Set env
        run: |
          # Use homebrew bison instead of /usr/bin/bison
          echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH
          # FIXME: Detect gnump with pkg-config
          echo "LDFLAGS=-L$HOMEBREW_PREFIX/lib" >> $GITHUB_ENV
          echo "CFLAGS=-I$HOMEBREW_PREFIX/include" >> $GITHUB_ENV
          echo "CXXFLAGS=-I$HOMEBREW_PREFIX/include" >> $GITHUB_ENV
          echo "STABLE_MOSH_PATH=mosh-0.2.8-rc4" >> $GITHUB_ENV
          echo "NATURAL_DOCS_PATH=~/NaturalDocs-1.4" >> $GITHUB_ENV
          echo "R6RS_DOC_PATH=r6rs" >> $GITHUB_ENV
          # FIXME: Disable GC during CI for now
          echo "GC_DONT_GC=1" >> $GITHUB_ENV
      - name: Instlall tools
        run: |
          brew install gmp oniguruma automake re2c bison gauche unzip
      # We share r6rs & NaturalDocs between Ubuntu and macOS.
      - name: Cache R6RS doc
        id: cache-r6rs-doc
        uses: actions/cache@v3
        with:
          path: ${{ env.R6RS_DOC_PATH }}
          key: ${{ matrix.os }}-${{ env.R6RS_DOC_PATH }}
          restore-keys: ${{ matrix.os }}-${{ env.R6RS_DOC_PATH }}  
      - name: Get R6RS doc
        if: steps.cache-r6rs-doc.outputs.cache-hit != 'true'
        run: >
          curl -OL http://www.r6rs.org/final/r6rs.tar.gz &&
          tar zvxf r6rs.tar.gz
      - name: Cache NaturalDocs
        id: cache-natural-docs
        uses: actions/cache@v3
        with:
          path: ${{ env.NATURAL_DOCS_PATH }}
          key: ${{ matrix.os }}-${{ env.NATURAL_DOCS_PATH }}
          restore-keys: ${{ matrix.os }}-${{ env.NATURAL_DOCS_PATH }}
      - name: Install NaturalDocs
        if: steps.cache-natural-doc.outputs.cache-hit != 'true'
        run: >
          curl -L -o NaturalDocs-1.4.zip https://sourceforge.net/projects/naturaldocs/files/Stable%20Releases/1.4/NaturalDocs-1.4.zip/download &&
          mv NaturalDocs-1.4.zip ~/ &&
          mkdir -p ~/NaturalDocs-1.4 &&
          cd ~/NaturalDocs-1.4 &&
          unzip -o ../NaturalDocs-1.4.zip
      - name: Cache Stable Mosh
        id: cache-stable-mosh-macos
        uses: actions/cache@v3
        with:
          path: ${{ env.STABLE_MOSH_PATH }}
          key: ${{ matrix.os }}-${{ env.STABLE_MOSH_PATH }}
          restore-keys: ${{ matrix.os }}-${{ env.STABLE_MOSH_PATH }}
      - name: Build Stable Mosh
        if: steps.cache-stable-mosh-macos.outputs.cache-hit != 'true'
        run: >
          curl -OL https://github.com/higepon/mosh/releases/download/mosh-0.2.8-rc4/mosh-0.2.8-rc4.tar.gz &&
          tar zvxf mosh-0.2.8-rc4.tar.gz &&
          cd $STABLE_MOSH_PATH &&
          ./configure &&
          make &&
          make test
      - name: Install Stable Mosh
        run: >
          cd $STABLE_MOSH_PATH &&
          sudo make install
      - uses: actions/checkout@v3
        with:
          path: mosh-latest
      - name: Build and test the latest changes.
        run: >
          cd ${{ github.workspace }}/mosh-latest &&
          ./gen-git-build.sh &&
          ./configure --with-r6rs-doc=../r6rs &&
          make &&
          make test &&
          sudo make install &&
          make dist
      - name: Build the generated dist package.
        run: >
          cp mosh-latest/mosh-*.tar.gz /tmp &&
          cd /tmp &&
          tar zvxf *.tar.gz &&
          export DIST_DIR=`find . -type d -name "mosh-*" | head -1` &&
          cd $DIST_DIR &&
          ./configure --prefix=/tmp &&
          make &&
          make test &&
          make install
      - uses: actions/upload-artifact@v2
        with:
          name: source-${{ matrix.os }}
          path: mosh-latest/mosh-*.tar.gz